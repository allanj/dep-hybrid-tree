Picked up _JAVA_OPTIONS: -Xmx1000000m
org.statnlp.example.depsemtree.DepHybridTree
{trainIDFile=600, l2reg=0.01, iteration=10000, language=en, thread=40}
maxHeight=	12
maxHeight=	18
Read..600 instances.
[PATTERN:w id: 0, PATTERN:W id: 1, PATTERN:WW id: 2, PATTERN:X id: 3, PATTERN:Y id: 4, PATTERN:XW id: 5, PATTERN:WX id: 6, PATTERN:XY id: 7, PATTERN:YX id: 8, PATTERN:A id: 9, PATTERN:B id: 10, PATTERN:C id: 11]
ROOT pattern for arity 0 is PATTERN:A id: 9
ROOT pattern for arity 1 is PATTERN:B id: 10
ROOT pattern for arity 2 is PATTERN:C id: 11
214
Capacity successfully set to: [300, 300, 3, 1000, 1000, 1000, 2, 100]
Compiling generic network
eIndex: 1
eIndex: 2
eIndex: 3
eIndex: 4
eIndex: 5
eIndex: 6
eIndex: 7
eIndex: 8
eIndex: 9
eIndex: 10
eIndex: 11
eIndex: 12
eIndex: 13
eIndex: 14
eIndex: 15
eIndex: 16
eIndex: 17
eIndex: 18
eIndex: 19
eIndex: 20
eIndex: 21
eIndex: 22
eIndex: 23
eIndex: 24
24185635 nodes..
#instances=600
Thread 0 has 30 instances.
Thread 1 has 30 instances.
Thread 2 has 30 instances.
Thread 3 has 30 instances.
Thread 4 has 30 instances.
Thread 5 has 30 instances.
Thread 6 has 30 instances.
Thread 7 has 30 instances.
Thread 8 has 30 instances.
Thread 9 has 30 instances.
Thread 10 has 30 instances.
Thread 11 has 30 instances.
Thread 12 has 30 instances.
Thread 13 has 30 instances.
Thread 14 has 30 instances.
Thread 15 has 30 instances.
Thread 16 has 30 instances.
Thread 17 has 30 instances.
Thread 18 has 30 instances.
Thread 19 has 30 instances.
Thread 20 has 30 instances.
Thread 21 has 30 instances.
Thread 22 has 30 instances.
Thread 23 has 30 instances.
Thread 24 has 30 instances.
Thread 25 has 30 instances.
Thread 26 has 30 instances.
Thread 27 has 30 instances.
Thread 28 has 30 instances.
Thread 29 has 30 instances.
Thread 30 has 30 instances.
Thread 31 has 30 instances.
Thread 32 has 30 instances.
Thread 33 has 30 instances.
Thread 34 has 30 instances.
Thread 35 has 30 instances.
Thread 36 has 30 instances.
Thread 37 has 30 instances.
Thread 38 has 30 instances.
Thread 39 has 30 instances.
........................................
Thread 0 touch time: 508.951 secs.

Thread 15 touch time: 519.806 secs.

Thread 32 touch time: 561.541 secs.

Thread 31 touch time: 561.618 secs.

Thread 12 touch time: 564.623 secs.

Thread 4 touch time: 569.315 secs.

Thread 34 touch time: 572.851 secs.

Thread 1 touch time: 573.614 secs.

Thread 30 touch time: 609.002 secs.

Thread 23 touch time: 609.112 secs.

Thread 35 touch time: 610.019 secs.

Thread 8 touch time: 612.929 secs.

Thread 7 touch time: 613.308 secs.

Thread 28 touch time: 613.996 secs.

Thread 10 touch time: 771.92 secs.

Thread 14 touch time: 772.114 secs.

Thread 11 touch time: 772.345 secs.

Thread 29 touch time: 772.546 secs.

Thread 20 touch time: 773.024 secs.

Thread 25 touch time: 774.516 secs.

Thread 24 touch time: 775.149 secs.

Thread 19 touch time: 775.61 secs.

Thread 39 touch time: 776.406 secs.

Thread 33 touch time: 777.522 secs.

Thread 16 touch time: 791.539 secs.

Thread 9 touch time: 791.751 secs.

Thread 13 touch time: 791.945 secs.

Thread 18 touch time: 792.0 secs.

Thread 38 touch time: 792.976 secs.

Thread 17 touch time: 793.335 secs.

Thread 3 touch time: 795.137 secs.

Thread 21 touch time: 795.408 secs.

Thread 2 touch time: 796.29 secs.

Thread 5 touch time: 796.383 secs.

Thread 26 touch time: 796.398 secs.

Thread 27 touch time: 797.809 secs.

Thread 22 touch time: 815.068 secs.

Thread 36 touch time: 815.029 secs.

Thread 37 touch time: 820.843 secs.

Thread 6 touch time: 824.259 secs.
Finalized local param. size:5738
Finalized local param. size:6114
Finalized local param. size:5926
Finalized local param. size:6114
Finalized local param. size:5738
Finalized local param. size:6208
Finalized local param. size:6302
Finalized local param. size:5643
Finalized local param. size:6020
Finalized local param. size:5832
Finalized local param. size:5925
Finalized local param. size:6489
Finalized local param. size:6018
Finalized local param. size:5548
Finalized local param. size:6018
Finalized local param. size:5359
Finalized local param. size:6018
Finalized local param. size:6112
Finalized local param. size:5737
Finalized local param. size:6114
Finalized local param. size:6300
Finalized local param. size:6207
Finalized local param. size:6113
Finalized local param. size:6104
Finalized local param. size:6020
Finalized local param. size:5832
Finalized local param. size:5644
Finalized local param. size:5926
Finalized local param. size:5362
Finalized local param. size:5738
Finalized local param. size:5362
Finalized local param. size:5362
Finalized local param. size:5832
Finalized local param. size:5644
Finalized local param. size:5644
Finalized local param. size:5080
Finalized local param. size:6208
Finalized local param. size:5832
Finalized local param. size:6019
Finalized local param. size:5550
25847 features.
*************************************************
  n = 25847   number of corrections = 4
       initial values
 f =  4952961.807688552   gnorm =  20687.991523714496
*************************************************
	i	nfn	func			gnorm			steplength
Iteration 0: Obj=-4952961.807688552000 Time=125.892s 0.000000000000 Total time: 125.901s
	1	2	4934633.490555597	15923.623829128253	4.833722011407957E-5
Iteration 1: Obj=-4934633.490555597000 Time=130.528s 0.996299523831 Total time: 256.437s
Iteration 2: Obj=-4915671.090155043000 Time=123.860s 0.996157282919 Total time: 380.301s
Iteration 3: Obj=-4915184.906537350000 Time=122.598s 0.999901095169 Total time: 502.902s
Iteration 4: Obj=-4913075.751613213000 Time=119.782s 0.999570890014 Total time: 622.686s
Iteration 5: Obj=-4911075.870846806000 Time=124.872s 0.999592947297 Total time: 747.560s
Iteration 6: Obj=-4902270.407960918000 Time=124.412s 0.998207019578 Total time: 871.973s
Iteration 7: Obj=-4862043.270486601000 Time=122.769s 0.991794182261 Total time: 994.743s
Iteration 8: Obj=-4706941.467832661000 Time=122.433s 0.968099460654 Total time: 1117.177s
Iteration 9: Obj=-3781909.767375524000 Time=151.415s 0.803474993947 Total time: 1268.593s
Iteration 10: Obj=-3477137.310190350000 Time=152.062s 0.919413080710 Total time: 1420.656s
Iteration 11: Obj=-35513192.573707300000 Time=154.017s 10.213342012589 Total time: 1574.674s
Iteration 12: Obj=-3162416.952106748200 Time=140.763s 0.089049075088 Total time: 1715.439s
Iteration 13: Obj=-33226587.438447077000 Time=130.619s 10.506706718832 Total time: 1846.059s
Iteration 14: Obj=-2937622.155483401000 Time=133.198s 0.088411792542 Total time: 1979.259s
Iteration 15: Obj=-17406398.828978870000 Time=144.028s 5.925336175889 Total time: 2123.287s
Iteration 16: Obj=-2890106.695836091000 Time=129.955s 0.166037026052 Total time: 2253.244s
Iteration 17: Obj=-2861182.385593457000 Time=122.377s 0.989991957638 Total time: 2375.622s
Iteration 18: Obj=-34513576.997188830000 Time=136.967s 12.062697285909 Total time: 2512.590s
Iteration 19: Obj=-2978606.194215738700 Time=133.023s 0.086302448293 Total time: 2645.615s
Iteration 20: Obj=-2828906.547716985500 Time=134.379s 0.949741712486 Total time: 2779.995s
Iteration 21: Obj=-2864743.883521774000 Time=135.794s 1.012668264292 Total time: 2915.790s
Iteration 22: Obj=-2826039.339459374500 Time=138.632s 0.986489352753 Total time: 3054.424s
Iteration 23: Obj=-2741996.005606548400 Time=139.720s 0.970261088485 Total time: 3194.145s
Iteration 24: Obj=-2737055.128875639000 Time=129.381s 0.998198072966 Total time: 3323.527s
Iteration 25: Obj=-2701045.561765518000 Time=128.807s 0.986843682201 Total time: 3452.336s
Iteration 26: Obj=-2670169.516068910200 Time=133.545s 0.988568854175 Total time: 3585.882s
Iteration 27: Obj=-2634118.605178158700 Time=128.202s 0.986498643373 Total time: 3714.086s
Iteration 28: Obj=-2692822.813819345000 Time=130.237s 1.022286091646 Total time: 3844.324s
Iteration 29: Obj=-2618730.223981894000 Time=137.063s 0.972485159641 Total time: 3981.388s
Iteration 30: Obj=-2592629.281716721600 Time=134.996s 0.990032977805 Total time: 4116.385s
Iteration 31: Obj=-2561030.800284113300 Time=130.077s 0.987812186781 Total time: 4246.463s
Iteration 32: Obj=-2541822.452457869000 Time=121.321s 0.992499759150 Total time: 4367.785s
Iteration 33: Obj=-2490221.798595626000 Time=133.795s 0.979699347682 Total time: 4501.580s
Iteration 34: Obj=-2420384.420484121400 Time=128.172s 0.971955358293 Total time: 4629.753s
Iteration 35: Obj=-2389676.503500258000 Time=141.801s 0.987312793487 Total time: 4771.556s
Iteration 36: Obj=-2347072.413845272300 Time=127.610s 0.982171607917 Total time: 4899.166s
Iteration 37: Obj=-2327591.662990225000 Time=133.102s 0.991699978774 Total time: 5032.269s
Iteration 38: Obj=-2271762.064363655600 Time=132.919s 0.976014006445 Total time: 5165.189s
Iteration 39: Obj=-2243519.571451714700 Time=134.147s 0.987568023362 Total time: 5299.337s
Iteration 40: Obj=-2172724.986704971000 Time=137.174s 0.968444855286 Total time: 5436.513s
Iteration 41: Obj=-2133804.340485494600 Time=141.254s 0.982086713018 Total time: 5577.767s
Iteration 42: Obj=-2097733.218376302000 Time=119.335s 0.983095393788 Total time: 5697.104s
Iteration 43: Obj=-2067049.260328835800 Time=120.720s 0.985372802519 Total time: 5817.825s
Iteration 44: Obj=-1995828.119690101800 Time=117.333s 0.965544536356 Total time: 5935.159s
Iteration 45: Obj=-1954286.890526125200 Time=112.064s 0.979185968594 Total time: 6047.224s
Iteration 46: Obj=-1910619.927180243400 Time=115.042s 0.977655807058 Total time: 6162.267s
Iteration 47: Obj=-1888165.144586884600 Time=132.589s 0.988247383860 Total time: 6294.857s
Iteration 48: Obj=-1850454.712778915200 Time=115.123s 0.980028001303 Total time: 6409.981s
Iteration 49: Obj=-1836633.922774535800 Time=115.864s 0.992531138477 Total time: 6525.845s
Iteration 50: Obj=-1814519.981279154500 Time=115.125s 0.987959526816 Total time: 6640.972s
Iteration 51: Obj=-1779283.717625468000 Time=118.257s 0.980580944813 Total time: 6759.230s
Iteration 52: Obj=-1755522.281856835400 Time=120.186s 0.986645504855 Total time: 6879.417s
Iteration 53: Obj=-1739869.820236655400 Time=119.864s 0.991083871859 Total time: 6999.283s
Iteration 54: Obj=-1720845.869327870000 Time=126.337s 0.989065876833 Total time: 7125.621s
Iteration 55: Obj=-1725056.723932283500 Time=122.620s 1.002446967901 Total time: 7248.242s
Iteration 56: Obj=-1712663.627895350000 Time=131.273s 0.992815832740 Total time: 7379.516s
Iteration 57: Obj=-1694652.121639856100 Time=124.362s 0.989483336972 Total time: 7503.879s
Iteration 58: Obj=-1678717.235979349800 Time=123.625s 0.990596957655 Total time: 7627.505s
Iteration 59: Obj=-1668793.719514445000 Time=122.344s 0.994088631336 Total time: 7749.850s
Iteration 60: Obj=-1656214.232097364500 Time=127.235s 0.992461927876 Total time: 7877.087s
Iteration 61: Obj=-1642510.785032210000 Time=126.317s 0.991726041958 Total time: 8003.404s
Iteration 62: Obj=-1627567.019755321800 Time=125.588s 0.990901876923 Total time: 8128.993s
Iteration 63: Obj=-1612924.953478591300 Time=128.580s 0.991003709157 Total time: 8257.575s
Iteration 64: Obj=-1604212.253556347000 Time=128.014s 0.994598198817 Total time: 8385.590s
Iteration 65: Obj=-1585101.764700497700 Time=119.063s 0.988087306519 Total time: 8504.654s
Iteration 66: Obj=-1576074.775370911000 Time=128.587s 0.994305104233 Total time: 8633.242s
Iteration 67: Obj=-1564658.338169300000 Time=124.001s 0.992756411447 Total time: 8757.244s
Iteration 68: Obj=-1556957.582137955000 Time=127.582s 0.995078314643 Total time: 8884.827s
Iteration 69: Obj=-1549360.801302740800 Time=124.124s 0.995120752856 Total time: 9008.952s
Iteration 70: Obj=-1540377.501135670300 Time=122.923s 0.994201931429 Total time: 9131.876s
Iteration 71: Obj=-1534424.989771709000 Time=128.660s 0.996135680144 Total time: 9260.537s
Iteration 72: Obj=-1525967.230979502400 Time=124.718s 0.994487994624 Total time: 9385.256s
Iteration 73: Obj=-1517641.585065470500 Time=124.112s 0.994544020510 Total time: 9509.369s
Iteration 74: Obj=-1507630.490729927800 Time=127.297s 0.993403518700 Total time: 9636.667s
Iteration 75: Obj=-1497204.798680544600 Time=123.861s 0.993084716637 Total time: 9760.529s
Iteration 76: Obj=-1491243.474666835700 Time=123.849s 0.996018364342 Total time: 9884.378s
Iteration 77: Obj=-1483191.893328266000 Time=130.987s 0.994600760053 Total time: 10015.366s
Iteration 78: Obj=-1478982.902450116000 Time=123.485s 0.997162207468 Total time: 10138.853s
Iteration 79: Obj=-1474758.256541670000 Time=127.972s 0.997143546486 Total time: 10266.826s
Iteration 80: Obj=-1470046.403498865200 Time=124.652s 0.996804999720 Total time: 10391.479s
Iteration 81: Obj=-1466896.987153193200 Time=122.155s 0.997857607530 Total time: 10513.635s
Iteration 82: Obj=-1462164.928641392000 Time=121.394s 0.996774103053 Total time: 10635.030s
Iteration 83: Obj=-1458655.242673603800 Time=126.407s 0.997599664785 Total time: 10761.438s
Iteration 84: Obj=-1453642.376553821800 Time=126.556s 0.996563364685 Total time: 10887.995s
Iteration 85: Obj=-1449590.060723510000 Time=127.538s 0.997212302079 Total time: 11015.534s
Iteration 86: Obj=-1445203.463687904600 Time=134.105s 0.996973905137 Total time: 11149.641s
Iteration 87: Obj=-1442336.343837200400 Time=127.691s 0.998016113355 Total time: 11277.333s
Iteration 88: Obj=-1438214.182493037000 Time=144.532s 0.997142024909 Total time: 11421.866s
Iteration 89: Obj=-1436848.211082377700 Time=137.811s 0.999050230885 Total time: 11559.678s
Iteration 90: Obj=-1433434.721428538000 Time=104.996s 0.997624321325 Total time: 11664.676s
Iteration 91: Obj=-1430003.367741720300 Time=96.119s 0.997606201639 Total time: 11760.795s
Iteration 92: Obj=-1426641.816023999800 Time=94.488s 0.997649270069 Total time: 11855.284s
Iteration 93: Obj=-1420981.880180448800 Time=89.339s 0.996032686144 Total time: 11944.625s
Iteration 94: Obj=-1420848.073385232400 Time=88.782s 0.999905834974 Total time: 12033.407s
Iteration 95: Obj=-1416158.536362714400 Time=88.541s 0.996699480324 Total time: 12121.950s
Iteration 96: Obj=-1414550.448579413000 Time=92.624s 0.998864471920 Total time: 12214.575s
Iteration 97: Obj=-1412615.265645788300 Time=92.032s 0.998631944915 Total time: 12306.608s
Iteration 98: Obj=-1410567.600481617500 Time=97.894s 0.998550443837 Total time: 12404.502s
Iteration 99: Obj=-1410251.748717462600 Time=94.108s 0.999776081796 Total time: 12498.612s
Iteration 100: Obj=-1431702.955813643000 Time=96.939s 1.015210906220 Total time: 12595.552s
Iteration 101: Obj=-1409616.231672065800 Time=99.216s 0.984573109910 Total time: 12694.769s
Iteration 102: Obj=-1407153.499264758300 Time=95.889s 0.998252905754 Total time: 12790.659s
Iteration 103: Obj=-1405481.739756460000 Time=93.111s 0.998811956543 Total time: 12883.771s
Iteration 104: Obj=-1404549.485118658000 Time=90.512s 0.999336700996 Total time: 12974.284s
Iteration 105: Obj=-1405177.870065140800 Time=92.914s 1.000447392529 Total time: 13067.199s
Iteration 106: Obj=-1403528.228824173800 Time=88.841s 0.998826026743 Total time: 13156.042s
Iteration 107: Obj=-1402805.147627252600 Time=92.327s 0.999484811789 Total time: 13248.370s
Iteration 108: Obj=-1402143.757821403000 Time=89.112s 0.999528523397 Total time: 13337.484s
Iteration 109: Obj=-1400989.537323849000 Time=90.061s 0.999176817291 Total time: 13427.546s
Iteration 110: Obj=-1399956.126323636200 Time=91.653s 0.999262370651 Total time: 13519.199s
Iteration 111: Obj=-1398694.835402205000 Time=92.367s 0.999099049679 Total time: 13611.568s
Iteration 112: Obj=-1397298.049024494600 Time=101.131s 0.999001364456 Total time: 13712.700s
Iteration 113: Obj=-1396132.901506755700 Time=98.772s 0.999166142457 Total time: 13811.473s
Iteration 114: Obj=-1395304.145802108800 Time=94.350s 0.999406391968 Total time: 13905.824s
Iteration 115: Obj=-1394531.032264440000 Time=92.829s 0.999445917551 Total time: 13998.654s
Iteration 116: Obj=-1393851.120720563000 Time=93.170s 0.999512444307 Total time: 14091.825s
Iteration 117: Obj=-1393178.789827542800 Time=97.200s 0.999517645118 Total time: 14189.027s
Iteration 118: Obj=-1392396.315581231400 Time=98.024s 0.999438353317 Total time: 14287.051s
Iteration 119: Obj=-1391661.237411101800 Time=100.088s 0.999472076907 Total time: 14387.141s
Iteration 120: Obj=-1391107.093535186300 Time=100.512s 0.999601811230 Total time: 14487.654s
Iteration 121: Obj=-1390546.479117209000 Time=107.271s 0.999597001251 Total time: 14594.926s
Iteration 122: Obj=-1389626.020409040900 Time=100.294s 0.999338059733 Total time: 14695.221s
Iteration 123: Obj=-1388837.689489032600 Time=98.249s 0.999432702822 Total time: 14793.471s
Iteration 124: Obj=-1388108.674408990000 Time=95.693s 0.999475089792 Total time: 14889.164s
Iteration 125: Obj=-1387345.595399233700 Time=100.279s 0.999450274302 Total time: 14989.444s
Iteration 126: Obj=-1386830.597094571000 Time=103.300s 0.999628788741 Total time: 15092.745s
Iteration 127: Obj=-1386447.352225571000 Time=94.257s 0.999723654158 Total time: 15187.003s
Iteration 128: Obj=-1385837.973796950200 Time=95.586s 0.999560474887 Total time: 15282.590s
Iteration 129: Obj=-1385054.353057398500 Time=99.636s 0.999434550969 Total time: 15382.227s
Iteration 130: Obj=-1384398.661734201200 Time=98.513s 0.999526595240 Total time: 15480.741s
Iteration 131: Obj=-1383804.669131658000 Time=91.208s 0.999570938185 Total time: 15571.950s
Iteration 132: Obj=-1382756.802298599600 Time=96.079s 0.999242763913 Total time: 15668.030s
Iteration 133: Obj=-1382197.093641486500 Time=97.887s 0.999595222633 Total time: 15765.917s
Iteration 134: Obj=-1381456.850555605500 Time=97.287s 0.999464444623 Total time: 15863.205s
Iteration 135: Obj=-1380862.415976977400 Time=101.882s 0.999569704563 Total time: 15965.088s
Iteration 136: Obj=-1380424.921814964600 Time=99.585s 0.999683173242 Total time: 16064.674s
Iteration 137: Obj=-1380037.081084582700 Time=101.235s 0.999719042503 Total time: 16165.910s
Iteration 138: Obj=-1379469.577079868400 Time=100.831s 0.999588776264 Total time: 16266.742s
Iteration 139: Obj=-1379132.582259865500 Time=93.091s 0.999755706958 Total time: 16359.835s
Iteration 140: Obj=-1378716.760269591800 Time=99.572s 0.999698490199 Total time: 16459.408s
Iteration 141: Obj=-1378351.705797059500 Time=93.745s 0.999735221560 Total time: 16553.154s
Iteration 142: Obj=-1378041.830774891000 Time=93.047s 0.999775184359 Total time: 16646.202s
Iteration 143: Obj=-1377632.568088633500 Time=94.414s 0.999703011420 Total time: 16740.617s
Iteration 144: Obj=-1377132.365200831000 Time=98.580s 0.999636911249 Total time: 16839.197s
Iteration 145: Obj=-1376798.769591479000 Time=93.263s 0.999757760679 Total time: 16932.462s
Iteration 146: Obj=-1376567.526756358600 Time=98.408s 0.999832043113 Total time: 17030.871s
Iteration 147: Obj=-1376274.703126154800 Time=97.221s 0.999787279865 Total time: 17128.093s
Iteration 148: Obj=-1376022.127718458000 Time=93.025s 0.999816478929 Total time: 17221.119s
Iteration 149: Obj=-1375763.986478114500 Time=93.895s 0.999812400371 Total time: 17315.014s
Iteration 150: Obj=-1375434.653054260600 Time=97.185s 0.999760617790 Total time: 17412.200s
Iteration 151: Obj=-1375149.751519862800 Time=92.852s 0.999792864362 Total time: 17505.053s
Iteration 152: Obj=-1374877.949133878600 Time=94.471s 0.999802347064 Total time: 17599.526s
Iteration 153: Obj=-1374529.893054842000 Time=95.784s 0.999746845835 Total time: 17695.310s
Iteration 154: Obj=-1374204.516214458000 Time=97.346s 0.999763281365 Total time: 17792.657s
Iteration 155: Obj=-1373841.704300166300 Time=96.717s 0.999735984047 Total time: 17889.375s
Iteration 156: Obj=-1373659.192893349000 Time=98.238s 0.999867152521 Total time: 17987.614s
Iteration 157: Obj=-1373471.876265274100 Time=98.559s 0.999863636753 Total time: 18086.174s
Iteration 158: Obj=-1373246.371733293400 Time=103.918s 0.999835814234 Total time: 18190.093s
Iteration 159: Obj=-1373046.541212404100 Time=95.346s 0.999854483125 Total time: 18285.439s
Iteration 160: Obj=-1372820.004169233000 Time=96.461s 0.999835011388 Total time: 18381.901s
Iteration 161: Obj=-1372478.244098351800 Time=98.306s 0.999751052527 Total time: 18480.208s
Iteration 162: Obj=-1372140.593302695000 Time=94.039s 0.999753984592 Total time: 18574.248s
Iteration 163: Obj=-1371987.432176960200 Time=103.569s 0.999888377965 Total time: 18677.817s
Iteration 164: Obj=-1371803.849398860000 Time=90.818s 0.999866192085 Total time: 18768.636s
Iteration 165: Obj=-1371609.199399749500 Time=92.226s 0.999858106537 Total time: 18860.863s
Iteration 166: Obj=-1371453.113718959300 Time=92.277s 0.999886202512 Total time: 18953.141s
Iteration 167: Obj=-1371271.901592399700 Time=93.963s 0.999867868522 Total time: 19047.105s
Iteration 168: Obj=-1371045.217364313300 Time=101.199s 0.999834690532 Total time: 19148.305s
Iteration 169: Obj=-1370847.143538207300 Time=95.003s 0.999855530785 Total time: 19243.309s
Iteration 170: Obj=-1370683.888470031000 Time=97.935s 0.999880909357 Total time: 19341.245s
Iteration 171: Obj=-1370503.036295987400 Time=94.532s 0.999868056978 Total time: 19435.778s
Iteration 172: Obj=-1370331.319834504500 Time=106.939s 0.999874705523 Total time: 19542.718s
Iteration 173: Obj=-1370171.215280509800 Time=98.841s 0.999883163618 Total time: 19641.560s
Iteration 174: Obj=-1369962.275398563400 Time=101.646s 0.999847508195 Total time: 19743.208s
Iteration 175: Obj=-1369801.363660365300 Time=101.999s 0.999882542942 Total time: 19845.208s
Iteration 176: Obj=-1369659.217411355300 Time=102.511s 0.999896228568 Total time: 19947.720s
Iteration 177: Obj=-1369531.446641960600 Time=93.870s 0.999906713460 Total time: 20041.592s
Iteration 178: Obj=-1369394.347281777800 Time=100.817s 0.999899893237 Total time: 20142.410s
Iteration 179: Obj=-1369293.125673155800 Time=95.372s 0.999926082937 Total time: 20237.783s
Iteration 180: Obj=-1369111.897379458000 Time=90.516s 0.999867648285 Total time: 20328.300s
Iteration 181: Obj=-1369118.923073178000 Time=90.807s 1.000005131570 Total time: 20419.108s
Iteration 182: Obj=-1369008.908389972500 Time=88.686s 0.999919645634 Total time: 20507.795s
Iteration 183: Obj=-1368867.484643221800 Time=91.009s 0.999896696255 Total time: 20598.804s
Iteration 184: Obj=-1368627.539329642400 Time=103.402s 0.999824712533 Total time: 20702.207s
Iteration 185: Obj=-1368502.813848933000 Time=120.838s 0.999908868208 Total time: 20823.046s
Iteration 186: Obj=-1368383.763876354300 Time=125.221s 0.999913007141 Total time: 20948.268s
Iteration 187: Obj=-1368221.549933437300 Time=108.462s 0.999881455811 Total time: 21056.732s
Iteration 188: Obj=-1368086.621131350300 Time=95.096s 0.999901383806 Total time: 21151.829s
Iteration 189: Obj=-1367968.960746266200 Time=94.791s 0.999913996392 Total time: 21246.621s
Iteration 190: Obj=-1367853.118925617800 Time=89.298s 0.999915318385 Total time: 21335.920s
Training completes. No significant progress (<objtol) after 190 iterations.
#threads:40
#instances=280
Thread 0 has 7 instances.
Thread 1 has 7 instances.
Thread 2 has 7 instances.
Thread 3 has 7 instances.
Thread 4 has 7 instances.
Thread 5 has 7 instances.
Thread 6 has 7 instances.
Thread 7 has 7 instances.
Thread 8 has 7 instances.
Thread 9 has 7 instances.
Thread 10 has 7 instances.
Thread 11 has 7 instances.
Thread 12 has 7 instances.
Thread 13 has 7 instances.
Thread 14 has 7 instances.
Thread 15 has 7 instances.
Thread 16 has 7 instances.
Thread 17 has 7 instances.
Thread 18 has 7 instances.
Thread 19 has 7 instances.
Thread 20 has 7 instances.
Thread 21 has 7 instances.
Thread 22 has 7 instances.
Thread 23 has 7 instances.
Thread 24 has 7 instances.
Thread 25 has 7 instances.
Thread 26 has 7 instances.
Thread 27 has 7 instances.
Thread 28 has 7 instances.
Thread 29 has 7 instances.
Thread 30 has 7 instances.
Thread 31 has 7 instances.
Thread 32 has 7 instances.
Thread 33 has 7 instances.
Thread 34 has 7 instances.
Thread 35 has 7 instances.
Thread 36 has 7 instances.
Thread 37 has 7 instances.
Thread 38 has 7 instances.
Thread 39 has 7 instances.
Touching test set.
........................................
Thread 28 touch time: 106.625 secs.

Thread 8 touch time: 107.873 secs.

Thread 2 touch time: 116.449 secs.

Thread 9 touch time: 117.145 secs.

Thread 0 touch time: 117.234 secs.

Thread 29 touch time: 117.507 secs.

Thread 39 touch time: 117.94 secs.

Thread 7 touch time: 189.241 secs.

Thread 36 touch time: 189.253 secs.

Thread 26 touch time: 189.551 secs.

Thread 11 touch time: 189.909 secs.

Thread 33 touch time: 190.065 secs.

Thread 34 touch time: 190.165 secs.

Thread 5 touch time: 190.197 secs.

Thread 6 touch time: 190.933 secs.

Thread 20 touch time: 190.929 secs.

Thread 21 touch time: 191.321 secs.

Thread 27 touch time: 191.507 secs.

Thread 4 touch time: 191.583 secs.

Thread 15 touch time: 191.598 secs.

Thread 19 touch time: 191.741 secs.

Thread 23 touch time: 202.624 secs.

Thread 24 touch time: 202.927 secs.

Thread 35 touch time: 203.021 secs.

Thread 30 touch time: 203.44 secs.

Thread 38 touch time: 203.501 secs.

Thread 32 touch time: 203.966 secs.

Thread 10 touch time: 204.037 secs.

Thread 13 touch time: 205.825 secs.

Thread 12 touch time: 206.116 secs.

Thread 14 touch time: 206.324 secs.

Thread 22 touch time: 207.012 secs.

Thread 31 touch time: 208.384 secs.

Thread 18 touch time: 208.698 secs.

Thread 37 touch time: 209.153 secs.

Thread 25 touch time: 209.249 secs.

Thread 16 touch time: 209.516 secs.

Thread 3 touch time: 221.809 secs.

Thread 17 touch time: 221.874 secs.

Thread 1 touch time: 239.432 secs.
Okay. Decoding started.
Decoding time for thread 28 = 712.024 secs (48/712.024 = 0.067 tokens/s, 7/712.024 = 0.010 sentences/s)
Decoding time for thread 8 = 810.732 secs (49/810.732 = 0.060 tokens/s, 7/810.732 = 0.009 sentences/s)
Decoding time for thread 9 = 951.247 secs (50/951.247 = 0.053 tokens/s, 7/951.247 = 0.007 sentences/s)
Decoding time for thread 0 = 951.516 secs (52/951.516 = 0.055 tokens/s, 7/951.516 = 0.007 sentences/s)
Decoding time for thread 33 = 1110.173 secs (56/1110.173 = 0.050 tokens/s, 7/1110.173 = 0.006 sentences/s)
Decoding time for thread 26 = 1110.515 secs (55/1110.515 = 0.050 tokens/s, 7/1110.515 = 0.006 sentences/s)
Decoding time for thread 39 = 1110.85 secs (56/1110.850 = 0.050 tokens/s, 7/1110.850 = 0.006 sentences/s)
Decoding time for thread 29 = 1111.436 secs (50/1111.436 = 0.045 tokens/s, 7/1111.436 = 0.006 sentences/s)
Decoding time for thread 2 = 1113.261 secs (58/1113.261 = 0.052 tokens/s, 7/1113.261 = 0.006 sentences/s)
Decoding time for thread 5 = 1137.265 secs (57/1137.265 = 0.050 tokens/s, 7/1137.265 = 0.006 sentences/s)
Decoding time for thread 11 = 1137.763 secs (59/1137.763 = 0.052 tokens/s, 7/1137.763 = 0.006 sentences/s)
Decoding time for thread 4 = 1137.984 secs (56/1137.984 = 0.049 tokens/s, 7/1137.984 = 0.006 sentences/s)
Decoding time for thread 36 = 1138.022 secs (58/1138.022 = 0.051 tokens/s, 7/1138.022 = 0.006 sentences/s)
Decoding time for thread 6 = 1138.341 secs (57/1138.341 = 0.050 tokens/s, 7/1138.341 = 0.006 sentences/s)
Decoding time for thread 19 = 1139.162 secs (59/1139.162 = 0.052 tokens/s, 7/1139.162 = 0.006 sentences/s)
Decoding time for thread 24 = 1139.389 secs (58/1139.389 = 0.051 tokens/s, 7/1139.389 = 0.006 sentences/s)
Decoding time for thread 20 = 1139.423 secs (60/1139.423 = 0.053 tokens/s, 7/1139.423 = 0.006 sentences/s)
Decoding time for thread 7 = 1331.827 secs (54/1331.827 = 0.041 tokens/s, 7/1331.827 = 0.005 sentences/s)
Decoding time for thread 27 = 1332.227 secs (57/1332.227 = 0.043 tokens/s, 7/1332.227 = 0.005 sentences/s)
Decoding time for thread 30 = 1332.442 secs (57/1332.442 = 0.043 tokens/s, 7/1332.442 = 0.005 sentences/s)
Decoding time for thread 21 = 1332.557 secs (61/1332.557 = 0.046 tokens/s, 7/1332.557 = 0.005 sentences/s)
Decoding time for thread 34 = 1332.605 secs (58/1332.605 = 0.044 tokens/s, 7/1332.605 = 0.005 sentences/s)
Decoding time for thread 15 = 1332.89 secs (63/1332.890 = 0.047 tokens/s, 7/1332.890 = 0.005 sentences/s)
Decoding time for thread 10 = 1333.533 secs (61/1333.533 = 0.046 tokens/s, 7/1333.533 = 0.005 sentences/s)
Decoding time for thread 23 = 1334.938 secs (61/1334.938 = 0.046 tokens/s, 7/1334.938 = 0.005 sentences/s)
Decoding time for thread 32 = 1341.51 secs (63/1341.510 = 0.047 tokens/s, 7/1341.510 = 0.005 sentences/s)
Decoding time for thread 38 = 1342.212 secs (60/1342.212 = 0.045 tokens/s, 7/1342.212 = 0.005 sentences/s)
Decoding time for thread 35 = 1342.697 secs (63/1342.697 = 0.047 tokens/s, 7/1342.697 = 0.005 sentences/s)
Decoding time for thread 14 = 1343.868 secs (65/1343.868 = 0.048 tokens/s, 7/1343.868 = 0.005 sentences/s)
Decoding time for thread 13 = 1344.264 secs (65/1344.264 = 0.048 tokens/s, 7/1344.264 = 0.005 sentences/s)
Decoding time for thread 22 = 1356.315 secs (68/1356.315 = 0.050 tokens/s, 7/1356.315 = 0.005 sentences/s)
Decoding time for thread 31 = 1357.093 secs (69/1357.093 = 0.051 tokens/s, 7/1357.093 = 0.005 sentences/s)
Decoding time for thread 25 = 1357.435 secs (69/1357.435 = 0.051 tokens/s, 7/1357.435 = 0.005 sentences/s)
Decoding time for thread 12 = 1369.134 secs (69/1369.134 = 0.050 tokens/s, 7/1369.134 = 0.005 sentences/s)
Decoding time for thread 3 = 1369.452 secs (64/1369.452 = 0.047 tokens/s, 7/1369.452 = 0.005 sentences/s)
Decoding time for thread 18 = 1369.495 secs (69/1369.495 = 0.050 tokens/s, 7/1369.495 = 0.005 sentences/s)
Decoding time for thread 16 = 1369.735 secs (71/1369.735 = 0.052 tokens/s, 7/1369.735 = 0.005 sentences/s)
Decoding time for thread 37 = 1370.483 secs (64/1370.483 = 0.047 tokens/s, 7/1370.483 = 0.005 sentences/s)
Decoding time for thread 17 = 1371.635 secs (76/1371.635 = 0.055 tokens/s, 7/1371.635 = 0.005 sentences/s)
Decoding time for thread 1 = 1415.197 secs (83/1415.197 = 0.059 tokens/s, 7/1415.197 = 0.005 sentences/s)
Okay. Decoding done.
Overall decoding time = 1415.201601766 secs.
4:	false
=INPUT=
*LeaveRoot* name all the rivers in colorado
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:5[19,128]5	0.0	null
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:4[18,129]4	0.0	null
		[
			child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:3[17,130]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' colorado ' })	#children:1[15,109]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:5[19,128]5	0.0	info:[6, 6, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:4[18,129]4	0.0	info:[4, 3, 0, 18, 129, 10, 0, 0]
		[
			child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:3[17,130]3	0.0	info:[3, 2, 1, 17, 130, 10, 0, 0]
			[
				child-0:*n:State -> ({ smallest ( *n:State ) })	#children:2[16,165]2	0.0	info:[3, 1, 0, 16, 165, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	info:[2, 0, 1, 15, 141, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(river(loc_2(stateid('colorado'))))
predic:	answer(river(loc_2(smallest(state(all)))))
7:	false
=INPUT=
*LeaveRoot* count the states which have elevations lower than what alabama has
=OUTPUT=
ROOT	#children:9[20,1000]9	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:8[19,144]8	0.0	null
	[
		child-0:*n:Num -> ({ count ( *n:State ) })	#children:7[18,176]7	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:6[17,126]6	0.0	null
			[
				child-0:*n:State -> ({ low_point_2 ( *n:Place ) })	#children:5[16,0]5	0.0	null
				[
					child-0:*n:Place -> ({ lower_2 ( *n:Place ) })	#children:4[15,0]4	0.0	null
					[
						child-0:*n:Place -> ({ low_point_1 ( *n:State ) })	#children:3[14,0]3	0.0	null
						[
							child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[13,123]2	0.0	null
							[
								child-0:*n:StateName -> ({ ' alabama ' })	#children:1[12,96]1	0.0	null
							]
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:9[20,1000]9	0.0	info:[11, 11, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:8[19,135]8	0.0	info:[11, 11, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:7[18,126]7	0.0	info:[10, 9, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:6[17,167]6	0.0	info:[8, 7, 0, 17, 167, 10, 0, 0]
			[
				child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:5[16,132]5	0.0	info:[7, 6, 0, 16, 132, 10, 0, 0]
				[
					child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[15,133]4	0.0	info:[6, 5, 0, 15, 133, 10, 0, 0]
					[
						child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:3[14,134]3	0.0	info:[5, 4, 0, 14, 134, 10, 0, 0]
						[
							child-0:*n:State -> ({ smallest_one ( population_1 ( *n:State ) ) })	#children:2[13,200]2	0.0	info:[4, 3, 1, 13, 200, 10, 0, 0]
							[
								child-0:*n:State -> ({ state ( all ) })	#children:1[12,141]1	0.0	info:[4, 3, 1, 12, 141, 9, 0, 0]
							]
						]
					]
				]
			]
		]
	]
]

output:	answer(count(state(low_point_2(lower_2(low_point_1(stateid('alabama')))))))
predic:	answer(state(loc_1(highest(place(loc_2(smallest_one(population_1(state(all)))))))))
16:	false
=INPUT=
*LeaveRoot* give me the number of rivers in california
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	null
	[
		child-0:*n:Num -> ({ count ( *n:River ) })	#children:5[18,161]5	0.0	null
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:4[17,129]4	0.0	null
			[
				child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:3[16,130]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' california ' })	#children:1[14,19]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:3[19,124]3	0.0	info:[8, 8, 1, 19, 124, 10, 0, 0]
	[
		child-0:*n:Place -> ({ lowest ( *n:Place ) })	#children:2[18,186]2	0.0	info:[5, 4, 0, 18, 186, 10, 0, 0]
		[
			child-0:*n:Place -> ({ place ( all ) })	#children:1[17,168]1	1.1131868545568896E-284	info:[4, 3, 0, 17, 168, 9, 0, 0]
		]
	]
]

output:	answer(count(river(loc_2(stateid('california')))))
predic:	answer(lowest(place(all)))
17:	false
=INPUT=
*LeaveRoot* give me the states that border utah
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	null
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' utah ' })	#children:1[15,65]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	info:[7, 7, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	info:[7, 6, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ next_to_2 ( *n:River ) })	#children:3[17,177]3	0.0	info:[6, 5, 0, 17, 177, 10, 0, 0]
			[
				child-0:*n:River -> ({ major ( *n:River ) })	#children:2[16,162]2	0.0	info:[2, 1, 0, 16, 162, 10, 0, 0]
				[
					child-0:*n:River -> ({ river ( all ) })	#children:1[15,171]1	0.0	info:[1, 0, 1, 15, 171, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(state(next_to_2(stateid('utah'))))
predic:	answer(state(next_to_2(major(river(all)))))
26:	false
=INPUT=
*LeaveRoot* how high is mount mckinley
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ elevation_1 ( *n:Place ) })	#children:3[18,148]3	0.0	null
		[
			child-0:*n:Place -> ({ placeid ( *n:PlaceName ) })	#children:2[17,149]2	0.0	null
			[
				child-0:*n:PlaceName -> ({ ' mount mckinley ' })	#children:1[16,98]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[5, 5, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	info:[5, 5, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ count ( *n:State ) })	#children:5[18,176]5	0.0	info:[5, 4, 0, 18, 176, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	info:[4, 3, 1, 17, 126, 10, 0, 0]
			[
				child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:3[16,167]3	0.0	info:[4, 2, 0, 16, 167, 10, 0, 0]
				[
					child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:2[15,132]2	0.0	info:[3, 1, 1, 15, 132, 10, 0, 0]
					[
						child-0:*n:Place -> ({ place ( all ) })	#children:1[14,168]1	0.0	info:[3, 1, 1, 14, 168, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(elevation_1(placeid('mountmckinley')))
predic:	answer(count(state(loc_1(highest(place(all))))))
27:	false
=INPUT=
*LeaveRoot* how high is the highest point in america
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:7[19,144]7	0.0	null
	[
		child-0:*n:Num -> ({ elevation_1 ( *n:Place ) })	#children:6[18,148]6	0.0	null
		[
			child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:5[17,132]5	0.0	null
			[
				child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[16,133]4	0.0	null
				[
					child-0:*n:Place -> ({ loc_2 ( *n:Country ) })	#children:3[15,183]3	0.0	null
					[
						child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[14,137]2	0.0	null
						[
							child-0:*n:CountryName -> ({ ' usa ' })	#children:1[13,34]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:7[19,124]7	0.0	info:[8, 8, 1, 19, 124, 10, 0, 0]
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:6[18,132]6	0.0	info:[8, 7, 0, 18, 132, 10, 0, 0]
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:5[17,133]5	0.0	info:[6, 5, 0, 17, 133, 10, 0, 0]
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:4[16,134]4	0.0	info:[5, 4, 0, 16, 134, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:3[15,126]3	0.0	info:[4, 3, 1, 15, 126, 10, 0, 0]
					[
						child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:2[14,181]2	0.0	info:[3, 1, 0, 14, 181, 10, 0, 0]
						[
							child-0:*n:River -> ({ river ( all ) })	#children:1[13,171]1	0.0	info:[2, 0, 1, 13, 171, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(elevation_1(highest(place(loc_2(countryid('usa'))))))
predic:	answer(highest(place(loc_2(state(traverse_1(river(all)))))))
30:	false
=INPUT=
*LeaveRoot* how high is the highest point of alabama
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:7[19,144]7	0.0	null
	[
		child-0:*n:Num -> ({ elevation_1 ( *n:Place ) })	#children:6[18,148]6	0.0	null
		[
			child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:5[17,132]5	0.0	null
			[
				child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[16,133]4	0.0	null
				[
					child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:3[15,134]3	0.0	null
					[
						child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[14,123]2	0.0	null
						[
							child-0:*n:StateName -> ({ ' alabama ' })	#children:1[13,96]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	info:[8, 8, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ elevation_1 ( *n:Place ) })	#children:5[18,148]5	0.0	info:[7, 6, 0, 18, 148, 10, 0, 0]
		[
			child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:4[17,132]4	0.0	info:[6, 4, 1, 17, 132, 10, 0, 0]
			[
				child-0:*n:Place -> ({ place ( *n:Place ) })	#children:3[16,133]3	0.0	info:[6, 3, 0, 16, 133, 10, 0, 0]
				[
					child-0:*n:Place -> ({ elevation_2 ( *n:Num ) })	#children:2[15,198]2	0.0	info:[4, 1, 0, 15, 198, 10, 0, 0]
					[
						child-0:*n:Num -> ({ 0 })	#children:1[14,199]1	3.012700441445711E-193	info:[3, 0, 1, 14, 199, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(elevation_1(highest(place(loc_2(stateid('alabama'))))))
predic:	answer(elevation_1(highest(place(elevation_2(0)))))
34:	false
=INPUT=
*LeaveRoot* how large is alaska
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ size ( *n:State ) })	#children:3[18,145]3	0.0	null
		[
			child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[17,123]2	0.0	null
			[
				child-0:*n:StateName -> ({ ' alaska ' })	#children:1[16,80]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[4, 4, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	info:[4, 4, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ size ( *n:City ) })	#children:3[18,146]3	0.0	info:[4, 3, 0, 18, 146, 10, 0, 0]
		[
			child-0:*n:City -> ({ largest ( *n:City ) })	#children:2[17,150]2	0.0	info:[3, 1, 1, 17, 150, 10, 0, 0]
			[
				child-0:*n:City -> ({ capital ( all ) })	#children:1[16,189]1	0.0	info:[3, 1, 1, 16, 189, 9, 0, 0]
			]
		]
	]
]

output:	answer(size(stateid('alaska')))
predic:	answer(size(largest(capital(all))))
35:	false
=INPUT=
*LeaveRoot* how large is texas
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ size ( *n:State ) })	#children:3[18,145]3	0.0	null
		[
			child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[17,123]2	0.0	null
			[
				child-0:*n:StateName -> ({ ' texas ' })	#children:1[16,92]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[4, 4, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	info:[4, 4, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ size ( *n:City ) })	#children:3[18,146]3	0.0	info:[4, 3, 0, 18, 146, 10, 0, 0]
		[
			child-0:*n:City -> ({ largest ( *n:City ) })	#children:2[17,150]2	0.0	info:[3, 1, 1, 17, 150, 10, 0, 0]
			[
				child-0:*n:City -> ({ capital ( all ) })	#children:1[16,189]1	0.0	info:[3, 1, 1, 16, 189, 9, 0, 0]
			]
		]
	]
]

output:	answer(size(stateid('texas')))
predic:	answer(size(largest(capital(all))))
38:	false
=INPUT=
*LeaveRoot* how long is the colorado river
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:5[19,144]5	0.0	null
	[
		child-0:*n:Num -> ({ len ( *n:River ) })	#children:4[18,151]4	0.0	null
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:3[17,129]3	0.0	null
			[
				child-0:*n:River -> ({ riverid ( *n:RiverName ) })	#children:2[16,152]2	0.0	null
				[
					child-0:*n:RiverName -> ({ ' colorado ' })	#children:1[15,110]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:3[19,144]3	0.0	info:[6, 6, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ len ( *n:River ) })	#children:2[18,151]2	0.0	info:[6, 5, 0, 18, 151, 10, 0, 0]
		[
			child-0:*n:River -> ({ river ( all ) })	#children:1[17,171]1	0.0	info:[5, 0, 1, 17, 171, 9, 0, 0]
		]
	]
]

output:	answer(len(river(riverid('colorado'))))
predic:	answer(len(river(all)))
39:	false
=INPUT=
*LeaveRoot* how long is the delaware river
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:5[19,144]5	0.0	null
	[
		child-0:*n:Num -> ({ len ( *n:River ) })	#children:4[18,151]4	0.0	null
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:3[17,129]3	0.0	null
			[
				child-0:*n:River -> ({ riverid ( *n:RiverName ) })	#children:2[16,152]2	0.0	null
				[
					child-0:*n:RiverName -> ({ ' delaware ' })	#children:1[15,22]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:3[19,144]3	0.0	info:[6, 6, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ len ( *n:River ) })	#children:2[18,151]2	0.0	info:[6, 5, 0, 18, 151, 10, 0, 0]
		[
			child-0:*n:River -> ({ river ( all ) })	#children:1[17,171]1	0.0	info:[5, 0, 1, 17, 171, 9, 0, 0]
		]
	]
]

output:	answer(len(river(riverid('delaware'))))
predic:	answer(len(river(all)))
40:	false
=INPUT=
*LeaveRoot* how long is the longest river in california
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:7[19,144]7	0.0	null
	[
		child-0:*n:Num -> ({ len ( *n:River ) })	#children:6[18,151]6	0.0	null
		[
			child-0:*n:River -> ({ longest ( *n:River ) })	#children:5[17,142]5	0.0	null
			[
				child-0:*n:River -> ({ river ( *n:River ) })	#children:4[16,129]4	0.0	null
				[
					child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:3[15,130]3	0.0	null
					[
						child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[14,123]2	0.0	null
						[
							child-0:*n:StateName -> ({ ' california ' })	#children:1[13,19]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:9[20,1000]9	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:8[19,144]8	0.0	info:[8, 8, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ sum ( *n:Num ) })	#children:7[18,192]7	0.0	info:[8, 7, 0, 18, 192, 10, 0, 0]
		[
			child-0:*n:Num -> ({ len ( *n:River ) })	#children:6[17,151]6	0.0	info:[7, 5, 1, 17, 151, 10, 0, 0]
			[
				child-0:*n:River -> ({ longest ( *n:River ) })	#children:5[16,142]5	0.0	info:[7, 2, 1, 16, 142, 10, 0, 0]
				[
					child-0:*n:River -> ({ river ( *n:River ) })	#children:4[15,129]4	0.0	info:[7, 1, 1, 15, 129, 10, 0, 0]
					[
						child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:3[14,130]3	0.0	info:[7, 0, 1, 14, 130, 10, 0, 0]
						[
							child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[13,123]2	0.0	info:[7, 0, 1, 13, 123, 10, 0, 0]
							[
								child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[12,7]1	0.0	info:[7, 0, 1, 12, 7, 9, 0, 0]
							]
						]
					]
				]
			]
		]
	]
]

output:	answer(len(longest(river(loc_2(stateid('california'))))))
predic:	answer(sum(len(longest(river(loc_2(stateid('northcarolina')))))))
41:	false
=INPUT=
*LeaveRoot* how long is the longest river in the usa
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:7[19,144]7	0.0	null
	[
		child-0:*n:Num -> ({ len ( *n:River ) })	#children:6[18,151]6	0.0	null
		[
			child-0:*n:River -> ({ longest ( *n:River ) })	#children:5[17,142]5	0.0	null
			[
				child-0:*n:River -> ({ river ( *n:River ) })	#children:4[16,129]4	0.0	null
				[
					child-0:*n:River -> ({ loc_2 ( *n:Country ) })	#children:3[15,154]3	0.0	null
					[
						child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[14,137]2	0.0	null
						[
							child-0:*n:CountryName -> ({ ' usa ' })	#children:1[13,34]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:9[20,1000]9	0.0	info:[9, 9, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:8[19,144]8	0.0	info:[9, 9, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ sum ( *n:Num ) })	#children:7[18,192]7	0.0	info:[9, 8, 0, 18, 192, 10, 0, 0]
		[
			child-0:*n:Num -> ({ len ( *n:River ) })	#children:6[17,151]6	0.0	info:[8, 6, 1, 17, 151, 10, 0, 0]
			[
				child-0:*n:River -> ({ longest ( *n:River ) })	#children:5[16,142]5	0.0	info:[8, 3, 1, 16, 142, 10, 0, 0]
				[
					child-0:*n:River -> ({ river ( *n:River ) })	#children:4[15,129]4	0.0	info:[8, 2, 1, 15, 129, 10, 0, 0]
					[
						child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:3[14,130]3	0.0	info:[8, 1, 1, 14, 130, 10, 0, 0]
						[
							child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[13,123]2	0.0	info:[8, 1, 1, 13, 123, 10, 0, 0]
							[
								child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[12,7]1	0.0	info:[8, 1, 1, 12, 7, 9, 0, 0]
							]
						]
					]
				]
			]
		]
	]
]

output:	answer(len(longest(river(loc_2(countryid('usa'))))))
predic:	answer(sum(len(longest(river(loc_2(stateid('northcarolina')))))))
46:	false
=INPUT=
*LeaveRoot* how long is the north platte river
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:5[19,144]5	0.0	null
	[
		child-0:*n:Num -> ({ len ( *n:River ) })	#children:4[18,151]4	0.0	null
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:3[17,129]3	0.0	null
			[
				child-0:*n:River -> ({ riverid ( *n:RiverName ) })	#children:2[16,152]2	0.0	null
				[
					child-0:*n:RiverName -> ({ ' north platte ' })	#children:1[15,54]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:5[19,144]5	0.0	info:[7, 7, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ len ( *n:River ) })	#children:4[18,151]4	0.0	info:[7, 5, 1, 18, 151, 10, 0, 0]
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:3[17,129]3	0.0	info:[7, 4, 0, 17, 129, 10, 0, 0]
			[
				child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:2[16,163]2	0.0	info:[6, 1, 1, 16, 163, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	info:[6, 0, 1, 15, 141, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(len(river(riverid('northplatte'))))
predic:	answer(len(river(traverse_2(state(all)))))
47:	false
=INPUT=
*LeaveRoot* how long is the ohio river
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:5[19,144]5	0.0	null
	[
		child-0:*n:Num -> ({ len ( *n:River ) })	#children:4[18,151]4	0.0	null
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:3[17,129]3	0.0	null
			[
				child-0:*n:River -> ({ riverid ( *n:RiverName ) })	#children:2[16,152]2	0.0	null
				[
					child-0:*n:RiverName -> ({ ' ohio ' })	#children:1[15,42]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:3[19,144]3	0.0	info:[6, 6, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ len ( *n:River ) })	#children:2[18,151]2	0.0	info:[6, 5, 0, 18, 151, 10, 0, 0]
		[
			child-0:*n:River -> ({ river ( all ) })	#children:1[17,171]1	0.0	info:[5, 0, 1, 17, 171, 9, 0, 0]
		]
	]
]

output:	answer(len(river(riverid('ohio'))))
predic:	answer(len(river(all)))
51:	false
=INPUT=
*LeaveRoot* how many capitals does rhode island have
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	null
	[
		child-0:*n:Num -> ({ count ( *n:City ) })	#children:5[18,155]5	0.0	null
		[
			child-0:*n:City -> ({ capital ( *n:City ) })	#children:4[17,131]4	0.0	null
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[16,122]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' rhode island ' })	#children:1[14,25]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	info:[7, 7, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ count ( *n:City ) })	#children:3[18,155]3	0.0	info:[7, 6, 0, 18, 155, 10, 0, 0]
		[
			child-0:*n:City -> ({ major ( *n:City ) })	#children:2[17,156]2	0.0	info:[6, 1, 1, 17, 156, 10, 0, 0]
			[
				child-0:*n:City -> ({ city ( all ) })	#children:1[16,160]1	0.0	info:[6, 0, 1, 16, 160, 9, 0, 0]
			]
		]
	]
]

output:	answer(count(capital(loc_2(stateid('rhodeisland')))))
predic:	answer(count(major(city(all))))
54:	false
=INPUT=
*LeaveRoot* how many cities are there in the united states
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	null
	[
		child-0:*n:Num -> ({ count ( *n:City ) })	#children:5[18,155]5	0.0	null
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:4[17,121]4	0.0	null
			[
				child-0:*n:City -> ({ loc_2 ( *n:Country ) })	#children:3[16,138]3	0.0	null
				[
					child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[15,137]2	0.0	null
					[
						child-0:*n:CountryName -> ({ ' usa ' })	#children:1[14,34]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[9, 9, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	info:[9, 9, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ population_1 ( *n:City ) })	#children:5[18,159]5	0.0	info:[8, 7, 0, 18, 159, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:4[17,121]4	0.0	info:[7, 4, 1, 17, 121, 10, 0, 0]
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[16,122]3	0.0	info:[7, 3, 1, 16, 122, 10, 0, 0]
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	info:[7, 1, 1, 15, 123, 10, 0, 0]
					[
						child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[14,7]1	0.0	info:[7, 1, 1, 14, 7, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(count(city(loc_2(countryid('usa')))))
predic:	answer(population_1(city(loc_2(stateid('northcarolina')))))
61:	false
=INPUT=
*LeaveRoot* how many citizens does the biggest city have in the usa
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:City ) })	#children:3[18,159]3	0.0	null
		[
			child-0:*n:City -> ({ largest ( *n:City ) })	#children:2[17,150]2	0.0	null
			[
				child-0:*n:City -> ({ city ( all ) })	#children:1[16,160]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[11, 11, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	info:[11, 11, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ count ( *n:City ) })	#children:5[18,155]5	0.0	info:[11, 10, 0, 18, 155, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:4[17,121]4	0.0	info:[10, 3, 1, 17, 121, 10, 0, 0]
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[16,122]3	0.0	info:[10, 2, 1, 16, 122, 10, 0, 0]
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	info:[10, 1, 1, 15, 123, 10, 0, 0]
					[
						child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[14,7]1	0.0	info:[10, 1, 1, 14, 7, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(population_1(largest(city(all))))
predic:	answer(count(city(loc_2(stateid('northcarolina')))))
65:	false
=INPUT=
*LeaveRoot* how many colorado rivers are there
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:5[19,144]5	0.0	null
	[
		child-0:*n:Num -> ({ count ( *n:River ) })	#children:4[18,161]4	0.0	null
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:3[17,129]3	0.0	null
			[
				child-0:*n:River -> ({ riverid ( *n:RiverName ) })	#children:2[16,152]2	0.0	null
				[
					child-0:*n:RiverName -> ({ ' colorado ' })	#children:1[15,110]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:5[19,144]5	0.0	info:[6, 6, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ count ( *n:State ) })	#children:4[18,176]4	0.0	info:[4, 3, 0, 18, 176, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:3[17,126]3	0.0	info:[3, 2, 1, 17, 126, 10, 0, 0]
			[
				child-0:*n:State -> ({ loc_1 ( *n:River ) })	#children:2[16,182]2	0.0	info:[3, 1, 1, 16, 182, 10, 0, 0]
				[
					child-0:*n:River -> ({ river ( all ) })	#children:1[15,171]1	0.0	info:[3, 0, 1, 15, 171, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(count(river(riverid('colorado'))))
predic:	answer(count(state(loc_1(river(all)))))
83:	false
=INPUT=
*LeaveRoot* how many people live in detroit
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:City ) })	#children:3[18,159]3	0.0	null
		[
			child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[17,147]2	0.0	null
			[
				child-0:*n:CityName -> ({ ' detroit ' })	#children:1[16,119]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:3[19,144]3	0.0	info:[6, 6, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ len ( *n:River ) })	#children:2[18,151]2	0.0	info:[6, 5, 0, 18, 151, 10, 0, 0]
		[
			child-0:*n:River -> ({ river ( all ) })	#children:1[17,171]1	0.0	info:[5, 0, 1, 17, 171, 9, 0, 0]
		]
	]
]

output:	answer(population_1(cityid('detroit',_)))
predic:	answer(len(river(all)))
85:	false
=INPUT=
*LeaveRoot* how many people live in houston
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:City ) })	#children:3[18,159]3	0.0	null
		[
			child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[17,147]2	0.0	null
			[
				child-0:*n:CityName -> ({ ' houston ' })	#children:1[16,108]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:3[19,144]3	0.0	info:[6, 6, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ len ( *n:River ) })	#children:2[18,151]2	0.0	info:[6, 5, 0, 18, 151, 10, 0, 0]
		[
			child-0:*n:River -> ({ river ( all ) })	#children:1[17,171]1	0.0	info:[5, 0, 1, 17, 171, 9, 0, 0]
		]
	]
]

output:	answer(population_1(cityid('houston',_)))
predic:	answer(len(river(all)))
88:	false
=INPUT=
*LeaveRoot* how many people live in minneapolis minnesota
=OUTPUT=
ROOT	#children:6[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:5[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:City ) })	#children:4[18,159]3	0.0	null
		[
			child-0:*n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) })	#children:3[17,164]2	0.0	null
			[
				child-0:*n:CityName -> ({ ' minneapolis ' })	#children:1[16,48]1	0.0	null
			]
			[
				child-0:*n:StateAbbrev -> ({ ' mn ' })	#children:1[16,11]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	info:[7, 7, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:3[18,158]3	0.0	info:[7, 6, 0, 18, 158, 10, 0, 0]
		[
			child-0:*n:State -> ({ largest_one ( density_1 ( *n:State ) ) })	#children:2[17,166]2	0.0	info:[6, 2, 1, 17, 166, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( all ) })	#children:1[16,141]1	0.0	info:[6, 1, 0, 16, 141, 9, 0, 0]
			]
		]
	]
]

output:	answer(population_1(cityid('minneapolis','mn')))
predic:	answer(population_1(largest_one(density_1(state(all)))))
89:	false
=INPUT=
*LeaveRoot* how many people live in mississippi
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:3[18,158]3	0.0	null
		[
			child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[17,123]2	0.0	null
			[
				child-0:*n:StateName -> ({ ' mississippi ' })	#children:1[16,83]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:3[19,144]3	0.0	info:[6, 6, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ len ( *n:River ) })	#children:2[18,151]2	0.0	info:[6, 5, 0, 18, 151, 10, 0, 0]
		[
			child-0:*n:River -> ({ river ( all ) })	#children:1[17,171]1	0.0	info:[5, 0, 1, 17, 171, 9, 0, 0]
		]
	]
]

output:	answer(population_1(stateid('mississippi')))
predic:	answer(len(river(all)))
94:	false
=INPUT=
*LeaveRoot* how many people live in rhode island
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:3[18,158]3	0.0	null
		[
			child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[17,123]2	0.0	null
			[
				child-0:*n:StateName -> ({ ' rhode island ' })	#children:1[16,25]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	info:[7, 7, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:3[18,158]3	0.0	info:[7, 6, 0, 18, 158, 10, 0, 0]
		[
			child-0:*n:State -> ({ largest_one ( density_1 ( *n:State ) ) })	#children:2[17,166]2	0.0	info:[6, 2, 1, 17, 166, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( all ) })	#children:1[16,141]1	0.0	info:[6, 1, 0, 16, 141, 9, 0, 0]
			]
		]
	]
]

output:	answer(population_1(stateid('rhodeisland')))
predic:	answer(population_1(largest_one(density_1(state(all)))))
100:	false
=INPUT=
*LeaveRoot* how many people live in the biggest city in new york state
=OUTPUT=
ROOT	#children:9[20,1000]9	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:8[19,144]8	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:City ) })	#children:7[18,159]7	0.0	null
		[
			child-0:*n:City -> ({ largest ( *n:City ) })	#children:6[17,150]6	0.0	null
			[
				child-0:*n:City -> ({ city ( *n:City ) })	#children:5[16,121]5	0.0	null
				[
					child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:4[15,122]4	0.0	null
					[
						child-0:*n:State -> ({ state ( *n:State ) })	#children:3[14,126]3	0.0	null
						[
							child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[13,123]2	0.0	null
							[
								child-0:*n:StateName -> ({ ' new york ' })	#children:1[12,112]1	0.0	null
							]
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[12, 12, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	info:[12, 12, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ size ( *n:City ) })	#children:5[18,146]5	0.0	info:[11, 10, 0, 18, 146, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:4[17,121]4	0.0	info:[8, 7, 0, 17, 121, 10, 0, 0]
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[16,122]3	0.0	info:[7, 3, 1, 16, 122, 10, 0, 0]
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	info:[7, 2, 1, 15, 123, 10, 0, 0]
					[
						child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[14,7]1	0.0	info:[7, 2, 1, 14, 7, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(population_1(largest(city(loc_2(state(stateid('newyork')))))))
predic:	answer(size(city(loc_2(stateid('northcarolina')))))
102:	false
=INPUT=
*LeaveRoot* how many people live in the capital of texas
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:City ) })	#children:5[18,159]5	0.0	null
		[
			child-0:*n:City -> ({ capital ( *n:City ) })	#children:4[17,131]4	0.0	null
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[16,122]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' texas ' })	#children:1[14,92]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[9, 9, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:7[19,144]7	0.0	info:[9, 9, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ population_1 ( *n:City ) })	#children:6[18,159]6	0.0	info:[8, 7, 0, 18, 159, 10, 0, 0]
		[
			child-0:*n:City -> ({ capital ( *n:City ) })	#children:5[17,131]5	0.0	info:[7, 6, 0, 17, 131, 10, 0, 0]
			[
				child-0:*n:City -> ({ city ( *n:City ) })	#children:4[16,121]4	0.0	info:[6, 4, 1, 16, 121, 10, 0, 0]
				[
					child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[15,122]3	0.0	info:[6, 2, 1, 15, 122, 10, 0, 0]
					[
						child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[14,123]2	0.0	info:[6, 1, 1, 14, 123, 10, 0, 0]
						[
							child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[13,7]1	0.0	info:[6, 1, 1, 13, 7, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(population_1(capital(loc_2(stateid('texas')))))
predic:	answer(population_1(capital(city(loc_2(stateid('northcarolina'))))))
105:	false
=INPUT=
*LeaveRoot* how many people live in the united states
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:Country ) })	#children:3[18,0]3	0.0	null
		[
			child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[17,137]2	0.0	null
			[
				child-0:*n:CountryName -> ({ ' usa ' })	#children:1[16,34]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:5[19,144]5	0.0	info:[8, 8, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ count ( *n:State ) })	#children:4[18,176]4	0.0	info:[8, 7, 0, 18, 176, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:3[17,126]3	0.0	info:[7, 6, 1, 17, 126, 10, 0, 0]
			[
				child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:2[16,172]2	0.0	info:[7, 5, 0, 16, 172, 10, 0, 0]
				[
					child-0:*n:City -> ({ city ( all ) })	#children:1[15,160]1	0.0	info:[4, 2, 0, 15, 160, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(population_1(countryid('usa')))
predic:	answer(count(state(loc_1(city(all)))))
108:	false
=INPUT=
*LeaveRoot* how many people lived in austin
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:City ) })	#children:3[18,159]3	0.0	null
		[
			child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[17,147]2	0.0	null
			[
				child-0:*n:CityName -> ({ ' austin ' })	#children:1[16,30]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:3[19,144]3	0.0	info:[6, 6, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ count ( *n:State ) })	#children:2[18,176]2	0.0	info:[6, 5, 0, 18, 176, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	info:[5, 1, 1, 17, 141, 9, 0, 0]
		]
	]
]

output:	answer(population_1(cityid('austin',_)))
predic:	answer(count(state(all)))
109:	false
=INPUT=
*LeaveRoot* how many people reside in utah
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:3[18,158]3	0.0	null
		[
			child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[17,123]2	0.0	null
			[
				child-0:*n:StateName -> ({ ' utah ' })	#children:1[16,65]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:3[19,144]3	0.0	info:[6, 6, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:2[18,158]2	0.0	info:[6, 5, 0, 18, 158, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	info:[5, 1, 1, 17, 141, 9, 0, 0]
		]
	]
]

output:	answer(population_1(stateid('utah')))
predic:	answer(population_1(state(all)))
111:	false
=INPUT=
*LeaveRoot* how many residents live in texas
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:3[18,158]3	0.0	null
		[
			child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[17,123]2	0.0	null
			[
				child-0:*n:StateName -> ({ ' texas ' })	#children:1[16,92]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	info:[6, 6, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ count ( *n:River ) })	#children:3[18,161]3	0.0	info:[6, 5, 0, 18, 161, 10, 0, 0]
		[
			child-0:*n:River -> ({ major ( *n:River ) })	#children:2[17,162]2	0.0	info:[4, 3, 0, 17, 162, 10, 0, 0]
			[
				child-0:*n:River -> ({ river ( all ) })	#children:1[16,171]1	0.0	info:[3, 0, 1, 16, 171, 9, 0, 0]
			]
		]
	]
]

output:	answer(population_1(stateid('texas')))
predic:	answer(count(major(river(all))))
115:	false
=INPUT=
*LeaveRoot* how many rivers are in iowa
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	null
	[
		child-0:*n:Num -> ({ count ( *n:River ) })	#children:5[18,161]5	0.0	null
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:4[17,129]4	0.0	null
			[
				child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:3[16,130]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' iowa ' })	#children:1[14,17]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	info:[6, 6, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ count ( *n:River ) })	#children:5[18,161]5	0.0	info:[6, 5, 0, 18, 161, 10, 0, 0]
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:4[17,129]4	0.0	info:[5, 2, 1, 17, 129, 10, 0, 0]
			[
				child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:3[16,130]3	0.0	info:[5, 0, 1, 16, 130, 10, 0, 0]
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	info:[5, 0, 1, 15, 123, 10, 0, 0]
					[
						child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[14,7]1	0.0	info:[5, 0, 1, 14, 7, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(count(river(loc_2(stateid('iowa')))))
predic:	answer(count(river(loc_2(stateid('northcarolina')))))
118:	false
=INPUT=
*LeaveRoot* how many rivers are in the state that has the most rivers
=OUTPUT=
ROOT	#children:9[20,1000]9	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:8[19,144]8	0.0	null
	[
		child-0:*n:Num -> ({ count ( *n:River ) })	#children:7[18,161]7	0.0	null
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:6[17,129]6	0.0	null
			[
				child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:5[16,130]5	0.0	null
				[
					child-0:*n:State -> ({ most ( *n:State ) })	#children:4[15,179]4	0.0	null
					[
						child-0:*n:State -> ({ state ( *n:State ) })	#children:3[14,126]3	0.0	null
						[
							child-0:*n:State -> ({ loc_1 ( *n:River ) })	#children:2[13,182]2	0.0	null
							[
								child-0:*n:River -> ({ river ( all ) })	#children:1[12,171]1	0.0	null
							]
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:11[20,1000]11	0.0	info:[12, 12, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:10[19,144]10	0.0	info:[12, 12, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ count ( *n:River ) })	#children:9[18,161]9	0.0	info:[12, 11, 1, 18, 161, 10, 0, 0]
		[
			child-0:*n:River -> ({ major ( *n:River ) })	#children:8[17,162]8	0.0	info:[12, 11, 1, 17, 162, 10, 0, 0]
			[
				child-0:*n:River -> ({ river ( *n:River ) })	#children:7[16,129]7	0.0	info:[12, 10, 0, 16, 129, 10, 0, 0]
				[
					child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:6[15,163]6	0.0	info:[11, 8, 1, 15, 163, 10, 0, 0]
					[
						child-0:*n:State -> ({ most ( *n:State ) })	#children:5[14,179]5	0.0	info:[11, 7, 0, 14, 179, 10, 0, 0]
						[
							child-0:*n:State -> ({ state ( *n:State ) })	#children:4[13,126]4	0.0	info:[10, 6, 1, 13, 126, 10, 0, 0]
							[
								child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[12,172]3	0.0	info:[10, 3, 1, 12, 172, 10, 0, 0]
								[
									child-0:*n:City -> ({ smallest ( *n:City ) })	#children:2[11,204]2	0.0	info:[9, 1, 0, 11, 204, 10, 0, 0]
									[
										child-0:*n:City -> ({ capital ( all ) })	#children:1[10,189]1	0.0	info:[8, 0, 1, 10, 189, 9, 0, 0]
									]
								]
							]
						]
					]
				]
			]
		]
	]
]

output:	answer(count(river(loc_2(most(state(loc_1(river(all))))))))
predic:	answer(count(major(river(traverse_2(most(state(loc_1(smallest(capital(all))))))))))
126:	false
=INPUT=
*LeaveRoot* how many rivers does colorado have
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	null
	[
		child-0:*n:Num -> ({ count ( *n:River ) })	#children:5[18,161]5	0.0	null
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:4[17,129]4	0.0	null
			[
				child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:3[16,130]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' colorado ' })	#children:1[14,109]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:5[19,144]5	0.0	info:[6, 6, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ count ( *n:River ) })	#children:4[18,161]4	0.0	info:[5, 4, 0, 18, 161, 10, 0, 0]
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:3[17,129]3	0.0	info:[3, 2, 0, 17, 129, 10, 0, 0]
			[
				child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:2[16,163]2	0.0	info:[2, 1, 1, 16, 163, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	info:[2, 0, 1, 15, 141, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(count(river(loc_2(stateid('colorado')))))
predic:	answer(count(river(traverse_2(state(all)))))
133:	false
=INPUT=
*LeaveRoot* how many states are in the usa
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	null
	[
		child-0:*n:Num -> ({ count ( *n:State ) })	#children:5[18,176]5	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	null
			[
				child-0:*n:State -> ({ loc_2 ( *n:Country ) })	#children:3[16,136]3	0.0	null
				[
					child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[15,137]2	0.0	null
					[
						child-0:*n:CountryName -> ({ ' usa ' })	#children:1[14,34]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:3[19,144]3	0.0	info:[7, 7, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ len ( *n:River ) })	#children:2[18,151]2	0.0	info:[7, 6, 0, 18, 151, 10, 0, 0]
		[
			child-0:*n:River -> ({ river ( all ) })	#children:1[17,171]1	0.0	info:[6, 1, 1, 17, 171, 9, 0, 0]
		]
	]
]

output:	answer(count(state(loc_2(countryid('usa')))))
predic:	answer(len(river(all)))
135:	false
=INPUT=
*LeaveRoot* how many states are there
=OUTPUT=
ROOT	#children:4[20,1000]4	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:3[19,144]3	0.0	null
	[
		child-0:*n:Num -> ({ count ( *n:State ) })	#children:2[18,176]2	0.0	null
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	null
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[5, 5, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:3[19,144]3	0.0	info:[5, 5, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ len ( *n:River ) })	#children:2[18,151]2	0.0	info:[3, 2, 0, 18, 151, 10, 0, 0]
		[
			child-0:*n:River -> ({ river ( all ) })	#children:1[17,171]1	0.0	info:[2, 0, 1, 17, 171, 9, 0, 0]
		]
	]
]

output:	answer(count(state(all)))
predic:	answer(len(river(all)))
136:	false
=INPUT=
*LeaveRoot* how many states are there in the usa
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	null
	[
		child-0:*n:Num -> ({ count ( *n:State ) })	#children:5[18,176]5	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	null
			[
				child-0:*n:State -> ({ loc_2 ( *n:Country ) })	#children:3[16,136]3	0.0	null
				[
					child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[15,137]2	0.0	null
					[
						child-0:*n:CountryName -> ({ ' usa ' })	#children:1[14,34]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:3[19,144]3	0.0	info:[8, 8, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ len ( *n:River ) })	#children:2[18,151]2	0.0	info:[8, 7, 0, 18, 151, 10, 0, 0]
		[
			child-0:*n:River -> ({ river ( all ) })	#children:1[17,171]1	0.0	info:[7, 2, 1, 17, 171, 9, 0, 0]
		]
	]
]

output:	answer(count(state(loc_2(countryid('usa')))))
predic:	answer(len(river(all)))
142:	false
=INPUT=
*LeaveRoot* how many states border iowa
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	null
	[
		child-0:*n:Num -> ({ count ( *n:State ) })	#children:5[18,176]5	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	null
			[
				child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[16,127]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' iowa ' })	#children:1[14,17]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[5, 5, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	info:[5, 5, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:5[18,158]5	0.0	info:[5, 4, 0, 18, 158, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	info:[4, 3, 1, 17, 126, 10, 0, 0]
			[
				child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[16,127]3	0.0	info:[4, 2, 0, 16, 127, 10, 0, 0]
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	info:[3, 0, 1, 15, 123, 10, 0, 0]
					[
						child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[14,7]1	0.0	info:[3, 0, 1, 14, 7, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(count(state(next_to_2(stateid('iowa')))))
predic:	answer(population_1(state(next_to_2(stateid('northcarolina')))))
149:	false
=INPUT=
*LeaveRoot* how many states border the state with the largest population
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	null
	[
		child-0:*n:Num -> ({ count ( *n:State ) })	#children:5[18,176]5	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	null
			[
				child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[16,127]3	0.0	null
				[
					child-0:*n:State -> ({ largest_one ( population_1 ( *n:State ) ) })	#children:2[15,169]2	0.0	null
					[
						child-0:*n:State -> ({ state ( all ) })	#children:1[14,141]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[10, 10, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	info:[10, 10, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:5[18,158]5	0.0	info:[9, 8, 0, 18, 158, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	info:[8, 7, 1, 17, 126, 10, 0, 0]
			[
				child-0:*n:State -> ({ next_to_2 ( *n:River ) })	#children:3[16,177]3	0.0	info:[8, 4, 1, 16, 177, 10, 0, 0]
				[
					child-0:*n:River -> ({ longest ( *n:River ) })	#children:2[15,142]2	0.0	info:[8, 4, 1, 15, 142, 10, 0, 0]
					[
						child-0:*n:River -> ({ river ( all ) })	#children:1[14,171]1	0.0	info:[7, 2, 0, 14, 171, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(count(state(next_to_2(largest_one(population_1(state(all)))))))
predic:	answer(population_1(state(next_to_2(longest(river(all))))))
150:	false
=INPUT=
*LeaveRoot* how many states do not have rivers
=OUTPUT=
ROOT	#children:7[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]5	0.0	null
	[
		child-0:*n:Num -> ({ count ( *n:State ) })	#children:5[18,176]4	0.0	null
		[
			child-0:*n:State -> ({ exclude ( *n:State , *n:State ) })	#children:4[17,185]3	0.0	null
			[
				child-0:*n:State -> ({ state ( all ) })	#children:1[16,141]1	0.0	null
			]
			[
				child-0:*n:State -> ({ loc_1 ( *n:River ) })	#children:2[16,182]2	0.0	null
				[
					child-0:*n:River -> ({ river ( all ) })	#children:1[15,171]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:7[19,144]7	0.0	info:[7, 7, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ count ( *n:State ) })	#children:6[18,176]6	0.0	info:[7, 6, 0, 18, 176, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:5[17,126]5	0.0	info:[6, 5, 1, 17, 126, 10, 0, 0]
			[
				child-0:*n:State -> ({ high_point_2 ( *n:Place ) })	#children:4[16,209]4	0.0	info:[6, 4, 0, 16, 209, 10, 0, 0]
				[
					child-0:*n:Place -> ({ higher_2 ( *n:Place ) })	#children:3[15,210]3	0.0	info:[5, 3, 1, 15, 210, 10, 0, 0]
					[
						child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:2[14,132]2	0.0	info:[5, 2, 0, 14, 132, 10, 0, 0]
						[
							child-0:*n:Place -> ({ place ( all ) })	#children:1[13,168]1	0.0	info:[4, 1, 0, 13, 168, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(count(exclude(state(all),loc_1(river(all)))))
predic:	answer(count(state(high_point_2(higher_2(highest(place(all)))))))
153:	false
=INPUT=
*LeaveRoot* how many states does tennessee border
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	null
	[
		child-0:*n:Num -> ({ count ( *n:State ) })	#children:5[18,176]5	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	null
			[
				child-0:*n:State -> ({ next_to_1 ( *n:State ) })	#children:3[16,180]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' tennessee ' })	#children:1[14,57]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:5[19,144]5	0.0	info:[6, 6, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ count ( *n:State ) })	#children:4[18,176]4	0.0	info:[6, 5, 0, 18, 176, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:3[17,126]3	0.0	info:[5, 4, 1, 17, 126, 10, 0, 0]
			[
				child-0:*n:State -> ({ loc_1 ( *n:River ) })	#children:2[16,182]2	0.0	info:[5, 3, 1, 16, 182, 10, 0, 0]
				[
					child-0:*n:River -> ({ river ( all ) })	#children:1[15,171]1	0.0	info:[5, 2, 0, 15, 171, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(count(state(next_to_1(stateid('tennessee')))))
predic:	answer(count(state(loc_1(river(all)))))
159:	false
=INPUT=
*LeaveRoot* how many states does usa have
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	null
	[
		child-0:*n:Num -> ({ count ( *n:State ) })	#children:5[18,176]5	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	null
			[
				child-0:*n:State -> ({ loc_2 ( *n:Country ) })	#children:3[16,136]3	0.0	null
				[
					child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[15,137]2	0.0	null
					[
						child-0:*n:CountryName -> ({ ' usa ' })	#children:1[14,34]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	info:[6, 6, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ count ( *n:State ) })	#children:5[18,176]5	0.0	info:[6, 5, 0, 18, 176, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	info:[5, 4, 1, 17, 126, 10, 0, 0]
			[
				child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:3[16,167]3	0.0	info:[5, 3, 0, 16, 167, 10, 0, 0]
				[
					child-0:*n:Place -> ({ lowest ( *n:Place ) })	#children:2[15,186]2	0.0	info:[4, 2, 1, 15, 186, 10, 0, 0]
					[
						child-0:*n:Place -> ({ place ( all ) })	#children:1[14,168]1	0.0	info:[4, 1, 0, 14, 168, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(count(state(loc_2(countryid('usa')))))
predic:	answer(count(state(loc_1(lowest(place(all))))))
162:	false
=INPUT=
*LeaveRoot* how many states have a higher point than the highest point of the state with the largest capital city in the us
=OUTPUT=
ROOT	#children:18[20,1000]18	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:17[19,144]17	0.0	null
	[
		child-0:*n:Num -> ({ count ( *n:State ) })	#children:16[18,176]16	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:15[17,126]15	0.0	null
			[
				child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:14[16,167]14	0.0	null
				[
					child-0:*n:Place -> ({ place ( *n:Place ) })	#children:13[15,133]13	0.0	null
					[
						child-0:*n:Place -> ({ higher_2 ( *n:Place ) })	#children:12[14,210]12	0.0	null
						[
							child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:11[13,132]11	0.0	null
							[
								child-0:*n:Place -> ({ place ( *n:Place ) })	#children:10[12,133]10	0.0	null
								[
									child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:9[11,134]9	0.0	null
									[
										child-0:*n:State -> ({ state ( *n:State ) })	#children:8[10,126]8	0.0	null
										[
											child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:7[9,172]7	0.0	null
											[
												child-0:*n:City -> ({ largest ( *n:City ) })	#children:6[8,150]6	0.0	null
												[
													child-0:*n:City -> ({ capital ( *n:City ) })	#children:5[7,131]5	0.0	null
													[
														child-0:*n:City -> ({ city ( *n:City ) })	#children:4[6,121]4	0.0	null
														[
															child-0:*n:City -> ({ loc_2 ( *n:Country ) })	#children:3[5,138]3	0.0	null
															[
																child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[4,137]2	0.0	null
																[
																	child-0:*n:CountryName -> ({ ' usa ' })	#children:1[3,34]1	0.0	null
																]
															]
														]
													]
												]
											]
										]
									]
								]
							]
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:14[20,1000]14	0.0	info:[22, 22, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:13[19,144]13	0.0	info:[22, 22, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ count ( *n:City ) })	#children:12[18,155]12	0.0	info:[22, 21, 0, 18, 155, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:11[17,121]11	0.0	info:[19, 18, 0, 17, 121, 10, 0, 0]
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:10[16,122]10	0.0	info:[18, 17, 0, 16, 122, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:9[15,126]9	0.0	info:[12, 11, 0, 15, 126, 10, 0, 0]
					[
						child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:8[14,167]8	0.0	info:[11, 10, 1, 14, 167, 10, 0, 0]
						[
							child-0:*n:Place -> ({ place ( *n:Place ) })	#children:7[13,133]7	0.0	info:[11, 9, 0, 13, 133, 10, 0, 0]
							[
								child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:6[12,134]6	0.0	info:[10, 8, 0, 12, 134, 10, 0, 0]
								[
									child-0:*n:State -> ({ state ( *n:State ) })	#children:5[11,126]5	0.0	info:[9, 5, 1, 11, 126, 10, 0, 0]
									[
										child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:4[10,167]4	0.0	info:[8, 3, 0, 10, 167, 10, 0, 0]
										[
											child-0:*n:Place -> ({ place ( *n:Place ) })	#children:3[9,133]3	0.0	info:[7, 2, 0, 9, 133, 10, 0, 0]
											[
												child-0:*n:Place -> ({ elevation_2 ( *n:Num ) })	#children:2[8,198]2	0.0	info:[6, 1, 0, 8, 198, 10, 0, 0]
												[
													child-0:*n:Num -> ({ 0 })	#children:1[7,199]1	2.524352410007072E-182	info:[5, 0, 1, 7, 199, 9, 0, 0]
												]
											]
										]
									]
								]
							]
						]
					]
				]
			]
		]
	]
]

output:	answer(count(state(loc_1(place(higher_2(highest(place(loc_2(state(loc_1(largest(capital(city(loc_2(countryid('usa'))))))))))))))))
predic:	answer(count(city(loc_2(state(loc_1(place(loc_2(state(loc_1(place(elevation_2(0))))))))))))
167:	false
=INPUT=
*LeaveRoot* how much population does texas have
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:3[18,158]3	0.0	null
		[
			child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[17,123]2	0.0	null
			[
				child-0:*n:StateName -> ({ ' texas ' })	#children:1[16,92]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	info:[6, 6, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ count ( *n:River ) })	#children:3[18,161]3	0.0	info:[6, 5, 0, 18, 161, 10, 0, 0]
		[
			child-0:*n:River -> ({ major ( *n:River ) })	#children:2[17,162]2	0.0	info:[5, 4, 0, 17, 162, 10, 0, 0]
			[
				child-0:*n:River -> ({ river ( all ) })	#children:1[16,171]1	0.0	info:[4, 2, 1, 16, 171, 9, 0, 0]
			]
		]
	]
]

output:	answer(population_1(stateid('texas')))
predic:	answer(count(major(river(all))))
168:	false
=INPUT=
*LeaveRoot* how tall is mount mckinley
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ elevation_1 ( *n:Place ) })	#children:3[18,148]3	0.0	null
		[
			child-0:*n:Place -> ({ placeid ( *n:PlaceName ) })	#children:2[17,149]2	0.0	null
			[
				child-0:*n:PlaceName -> ({ ' mount mckinley ' })	#children:1[16,98]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[5, 5, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	info:[5, 5, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ count ( *n:State ) })	#children:5[18,176]5	0.0	info:[5, 4, 0, 18, 176, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	info:[4, 3, 1, 17, 126, 10, 0, 0]
			[
				child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:3[16,167]3	0.0	info:[4, 2, 0, 16, 167, 10, 0, 0]
				[
					child-0:*n:Place -> ({ lowest ( *n:Place ) })	#children:2[15,186]2	0.0	info:[3, 1, 1, 15, 186, 10, 0, 0]
					[
						child-0:*n:Place -> ({ place ( all ) })	#children:1[14,168]1	0.0	info:[3, 1, 1, 14, 168, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(elevation_1(placeid('mountmckinley')))
predic:	answer(count(state(loc_1(lowest(place(all))))))
169:	false
=INPUT=
*LeaveRoot* how tall is the highest point in montana
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:7[19,144]7	0.0	null
	[
		child-0:*n:Num -> ({ elevation_1 ( *n:Place ) })	#children:6[18,148]6	0.0	null
		[
			child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:5[17,132]5	0.0	null
			[
				child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[16,133]4	0.0	null
				[
					child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:3[15,134]3	0.0	null
					[
						child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[14,123]2	0.0	null
						[
							child-0:*n:StateName -> ({ ' montana ' })	#children:1[13,49]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	info:[8, 8, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ elevation_1 ( *n:Place ) })	#children:5[18,148]5	0.0	info:[8, 7, 0, 18, 148, 10, 0, 0]
		[
			child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:4[17,132]4	0.0	info:[7, 6, 0, 17, 132, 10, 0, 0]
			[
				child-0:*n:Place -> ({ place ( *n:Place ) })	#children:3[16,133]3	0.0	info:[6, 5, 0, 16, 133, 10, 0, 0]
				[
					child-0:*n:Place -> ({ elevation_2 ( *n:Num ) })	#children:2[15,198]2	0.0	info:[2, 1, 0, 15, 198, 10, 0, 0]
					[
						child-0:*n:Num -> ({ 0 })	#children:1[14,199]1	1.719754002638742E-183	info:[1, 0, 1, 14, 199, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(elevation_1(highest(place(loc_2(stateid('montana'))))))
predic:	answer(elevation_1(highest(place(elevation_2(0)))))
173:	false
=INPUT=
*LeaveRoot* iowa borders how many states
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	null
	[
		child-0:*n:Num -> ({ count ( *n:State ) })	#children:5[18,176]5	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	null
			[
				child-0:*n:State -> ({ next_to_1 ( *n:State ) })	#children:3[16,180]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' iowa ' })	#children:1[14,17]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:14[20,1000]8	Infinity	info:[5, 5, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:13[19,135]7	Infinity	info:[5, 5, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ intersection ( *n:State , *n:State ) })	#children:12[18,178]6	Infinity	info:[5, 4, 1, 18, 178, 11, 0, 0]
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:8[17,126]5	Infinity	info:[5, 2, 1, 17, 126, 10, 0, 0]
			[
				child-0:*n:State -> ({ intersection ( *n:State , *n:State ) })	#children:7[16,178]4	Infinity	info:[5, 2, 1, 16, 178, 11, 0, 0]
				[
					child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[15,127]3	Infinity	info:[5, 0, 1, 15, 127, 10, 0, 0]
					[
						child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[14,123]2	Infinity	info:[5, 0, 1, 14, 123, 10, 0, 0]
						[
							child-0:*n:StateName -> ({ ' iowa ' })	#children:1[13,17]1	1.0	info:[5, 0, 1, 13, 17, 9, 0, 0]
						]
					]
				]
				[
					child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[15,127]3	Infinity	info:[5, 1, 0, 15, 127, 10, 0, 0]
					[
						child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[14,123]2	Infinity	info:[4, 0, 1, 14, 123, 10, 0, 0]
						[
							child-0:*n:StateName -> ({ ' iowa ' })	#children:1[13,17]1	1.0	info:[4, 0, 1, 13, 17, 9, 0, 0]
						]
					]
				]
			]
		]
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	Infinity	info:[3, 1, 0, 17, 127, 10, 0, 0]
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	Infinity	info:[2, 0, 1, 16, 123, 10, 0, 0]
				[
					child-0:*n:StateName -> ({ ' iowa ' })	#children:1[15,17]1	1.0	info:[2, 0, 1, 15, 17, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(count(state(next_to_1(stateid('iowa')))))
predic:	answer(intersection(state(intersection(next_to_2(stateid('iowa')),next_to_2(stateid('iowa')))),next_to_2(stateid('iowa'))))
180:	false
=INPUT=
*LeaveRoot* name the major rivers in florida
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:6[19,128]6	0.0	null
	[
		child-0:*n:River -> ({ major ( *n:River ) })	#children:5[18,162]5	0.0	null
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:4[17,129]4	0.0	null
			[
				child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:3[16,130]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' florida ' })	#children:1[14,13]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:5[19,128]5	0.0	info:[6, 6, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:4[18,129]4	0.0	info:[6, 2, 1, 18, 129, 10, 0, 0]
		[
			child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:3[17,130]3	0.0	info:[6, 1, 1, 17, 130, 10, 0, 0]
			[
				child-0:*n:State -> ({ largest ( *n:State ) })	#children:2[16,140]2	0.0	info:[6, 1, 1, 16, 140, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	info:[6, 0, 1, 15, 141, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(major(river(loc_2(stateid('florida')))))
predic:	answer(river(loc_2(largest(state(all)))))
184:	false
=INPUT=
*LeaveRoot* number of people in boulder
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:City ) })	#children:3[18,159]3	0.0	null
		[
			child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[17,147]2	0.0	null
			[
				child-0:*n:CityName -> ({ ' boulder ' })	#children:1[16,37]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[5, 5, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:3[19,135]3	0.0	info:[5, 5, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ largest_one ( population_1 ( *n:State ) ) })	#children:2[18,169]2	0.0	info:[3, 2, 0, 18, 169, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	info:[2, 1, 1, 17, 141, 9, 0, 0]
		]
	]
]

output:	answer(population_1(cityid('boulder',_)))
predic:	answer(largest_one(population_1(state(all))))
185:	false
=INPUT=
*LeaveRoot* number of states bordering iowa
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	null
	[
		child-0:*n:Num -> ({ count ( *n:State ) })	#children:5[18,176]5	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	null
			[
				child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[16,127]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' iowa ' })	#children:1[14,17]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[5, 5, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	info:[5, 5, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:3[18,158]3	0.0	info:[5, 4, 0, 18, 158, 10, 0, 0]
		[
			child-0:*n:State -> ({ largest_one ( area_1 ( *n:State ) ) })	#children:2[17,187]2	0.0	info:[4, 3, 1, 17, 187, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( all ) })	#children:1[16,141]1	0.0	info:[4, 2, 0, 16, 141, 9, 0, 0]
			]
		]
	]
]

output:	answer(count(state(next_to_2(stateid('iowa')))))
predic:	answer(population_1(largest_one(area_1(state(all)))))
189:	false
=INPUT=
*LeaveRoot* rivers in new york
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:5[19,128]5	0.0	null
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:4[18,129]4	0.0	null
		[
			child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:3[17,130]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' new york ' })	#children:1[15,112]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:10[20,1000]7	Infinity	info:[4, 4, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:9[19,135]6	Infinity	info:[4, 4, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ intersection ( *n:State , *n:State ) })	#children:8[18,178]5	Infinity	info:[4, 3, 0, 18, 178, 11, 0, 0]
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	Infinity	info:[3, 2, 0, 17, 126, 10, 0, 0]
			[
				child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[16,172]3	Infinity	info:[2, 1, 1, 16, 172, 10, 0, 0]
				[
					child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[15,147]2	Infinity	info:[2, 0, 1, 15, 147, 10, 0, 0]
					[
						child-0:*n:CityName -> ({ ' riverside ' })	#children:1[14,99]1	1.0	info:[2, 0, 1, 14, 99, 9, 0, 0]
					]
				]
			]
		]
		[
			child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[17,172]3	Infinity	info:[3, 0, 1, 17, 172, 10, 0, 0]
			[
				child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[16,147]2	Infinity	info:[3, 0, 1, 16, 147, 10, 0, 0]
				[
					child-0:*n:CityName -> ({ ' riverside ' })	#children:1[15,99]1	1.0	info:[3, 0, 1, 15, 99, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(river(loc_2(stateid('newyork'))))
predic:	answer(intersection(state(loc_1(cityid('riverside',_))),loc_1(cityid('riverside',_))))
191:	false
=INPUT=
*LeaveRoot* san antonio is in what state
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	null
		[
			child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[17,172]3	0.0	null
			[
				child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[16,147]2	0.0	null
				[
					child-0:*n:CityName -> ({ ' san antonio ' })	#children:1[15,70]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:28[20,1000]11	Infinity	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:27[19,135]10	Infinity	info:[6, 6, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ exclude ( *n:State , *n:State ) })	#children:26[18,185]9	Infinity	info:[6, 5, 0, 18, 185, 11, 0, 0]
		[
			child-0:*n:State -> ({ exclude ( *n:State , *n:State ) })	#children:19[17,185]8	Infinity	info:[5, 4, 0, 17, 185, 11, 0, 0]
			[
				child-0:*n:State -> ({ exclude ( *n:State , *n:State ) })	#children:13[16,185]7	Infinity	info:[4, 3, 0, 16, 185, 11, 0, 0]
				[
					child-0:*n:State -> ({ exclude ( *n:State , *n:State ) })	#children:7[15,185]6	Infinity	info:[3, 2, 0, 15, 185, 11, 0, 0]
					[
						child-0:*n:State -> ({ state ( all ) })	#children:1[14,141]1	0.0	info:[2, 0, 1, 14, 141, 9, 0, 0]
					]
					[
						child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:5[14,127]5	Infinity	info:[2, 1, 0, 14, 127, 10, 0, 0]
						[
							child-0:*n:State -> ({ state ( *n:State ) })	#children:4[13,126]4	Infinity	info:[1, 0, 1, 13, 126, 10, 0, 0]
							[
								child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[12,172]3	Infinity	info:[1, 0, 1, 12, 172, 10, 0, 0]
								[
									child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[11,147]2	Infinity	info:[1, 0, 1, 11, 147, 10, 0, 0]
									[
										child-0:*n:CityName -> ({ ' san diego ' })	#children:1[10,24]1	1.0	info:[1, 0, 1, 10, 24, 9, 0, 0]
									]
								]
							]
						]
					]
				]
				[
					child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:5[15,127]5	Infinity	info:[3, 0, 1, 15, 127, 10, 0, 0]
					[
						child-0:*n:State -> ({ state ( *n:State ) })	#children:4[14,126]4	Infinity	info:[3, 0, 1, 14, 126, 10, 0, 0]
						[
							child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[13,172]3	Infinity	info:[3, 0, 1, 13, 172, 10, 0, 0]
							[
								child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[12,147]2	Infinity	info:[3, 0, 1, 12, 147, 10, 0, 0]
								[
									child-0:*n:CityName -> ({ ' san diego ' })	#children:1[11,24]1	1.0	info:[3, 0, 1, 11, 24, 9, 0, 0]
								]
							]
						]
					]
				]
			]
			[
				child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:5[16,127]5	Infinity	info:[4, 0, 1, 16, 127, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:4[15,126]4	Infinity	info:[4, 0, 1, 15, 126, 10, 0, 0]
					[
						child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[14,172]3	Infinity	info:[4, 0, 1, 14, 172, 10, 0, 0]
						[
							child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[13,147]2	Infinity	info:[4, 0, 1, 13, 147, 10, 0, 0]
							[
								child-0:*n:CityName -> ({ ' san diego ' })	#children:1[12,24]1	1.0	info:[4, 0, 1, 12, 24, 9, 0, 0]
							]
						]
					]
				]
			]
		]
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:6[17,127]6	Infinity	info:[5, 0, 1, 17, 127, 10, 0, 0]
			[
				child-0:*n:State -> ({ most ( *n:State ) })	#children:5[16,179]5	Infinity	info:[5, 0, 1, 16, 179, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:4[15,126]4	Infinity	info:[5, 0, 1, 15, 126, 10, 0, 0]
					[
						child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[14,172]3	Infinity	info:[5, 0, 1, 14, 172, 10, 0, 0]
						[
							child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[13,147]2	Infinity	info:[5, 0, 1, 13, 147, 10, 0, 0]
							[
								child-0:*n:CityName -> ({ ' san diego ' })	#children:1[12,24]1	1.0	info:[5, 0, 1, 12, 24, 9, 0, 0]
							]
						]
					]
				]
			]
		]
	]
]

output:	answer(state(loc_1(cityid('sanantonio',_))))
predic:	answer(exclude(exclude(exclude(exclude(state(all),next_to_2(state(loc_1(cityid('sandiego',_))))),next_to_2(state(loc_1(cityid('sandiego',_))))),next_to_2(state(loc_1(cityid('sandiego',_))))),next_to_2(most(state(loc_1(cityid('sandiego',_)))))))
196:	false
=INPUT=
*LeaveRoot* tell me what cities are in texas
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:5[19,120]5	0.0	null
	[
		child-0:*n:City -> ({ city ( *n:City ) })	#children:4[18,121]4	0.0	null
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[17,122]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' texas ' })	#children:1[15,92]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:7[19,144]7	0.0	info:[7, 7, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ count ( *n:City ) })	#children:6[18,155]6	0.0	info:[7, 6, 1, 18, 155, 10, 0, 0]
		[
			child-0:*n:City -> ({ major ( *n:City ) })	#children:5[17,156]5	0.0	info:[7, 6, 1, 17, 156, 10, 0, 0]
			[
				child-0:*n:City -> ({ city ( *n:City ) })	#children:4[16,121]4	0.0	info:[7, 5, 0, 16, 121, 10, 0, 0]
				[
					child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[15,122]3	0.0	info:[6, 2, 1, 15, 122, 10, 0, 0]
					[
						child-0:*n:State -> ({ largest ( *n:State ) })	#children:2[14,140]2	0.0	info:[6, 1, 0, 14, 140, 10, 0, 0]
						[
							child-0:*n:State -> ({ state ( all ) })	#children:1[13,141]1	0.0	info:[5, 0, 1, 13, 141, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(city(loc_2(stateid('texas'))))
predic:	answer(count(major(city(loc_2(largest(state(all)))))))
197:	false
=INPUT=
*LeaveRoot* through which states does the longest river in texas run
=OUTPUT=
ROOT	#children:9[20,1000]9	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:8[19,135]8	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:7[18,126]7	0.0	null
		[
			child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:6[17,181]6	0.0	null
			[
				child-0:*n:River -> ({ longest ( *n:River ) })	#children:5[16,142]5	0.0	null
				[
					child-0:*n:River -> ({ river ( *n:River ) })	#children:4[15,129]4	0.0	null
					[
						child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:3[14,130]3	0.0	null
						[
							child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[13,123]2	0.0	null
							[
								child-0:*n:StateName -> ({ ' texas ' })	#children:1[12,92]1	0.0	null
							]
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:9[20,1000]9	0.0	info:[10, 10, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:8[19,135]8	0.0	info:[10, 10, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:7[18,126]7	0.0	info:[10, 9, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:6[17,167]6	0.0	info:[9, 7, 1, 17, 167, 10, 0, 0]
			[
				child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:5[16,132]5	0.0	info:[9, 6, 1, 16, 132, 10, 0, 0]
				[
					child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[15,133]4	0.0	info:[9, 5, 0, 15, 133, 10, 0, 0]
					[
						child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:3[14,134]3	0.0	info:[8, 4, 0, 14, 134, 10, 0, 0]
						[
							child-0:*n:State -> ({ largest_one ( area_1 ( *n:State ) ) })	#children:2[13,187]2	0.0	info:[7, 3, 1, 13, 187, 10, 0, 0]
							[
								child-0:*n:State -> ({ state ( all ) })	#children:1[12,141]1	0.0	info:[7, 2, 0, 12, 141, 9, 0, 0]
							]
						]
					]
				]
			]
		]
	]
]

output:	answer(state(traverse_1(longest(river(loc_2(stateid('texas')))))))
predic:	answer(state(loc_1(highest(place(loc_2(largest_one(area_1(state(all)))))))))
200:	false
=INPUT=
*LeaveRoot* what are all the rivers in texas
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:5[19,128]5	0.0	null
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:4[18,129]4	0.0	null
		[
			child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:3[17,130]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' texas ' })	#children:1[15,92]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:5[19,128]5	0.0	info:[7, 7, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:4[18,129]4	0.0	info:[5, 4, 0, 18, 129, 10, 0, 0]
		[
			child-0:*n:River -> ({ loc_2 ( *n:Country ) })	#children:3[17,154]3	0.0	info:[4, 0, 1, 17, 154, 10, 0, 0]
			[
				child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[16,137]2	0.0	info:[4, 0, 1, 16, 137, 10, 0, 0]
				[
					child-0:*n:CountryName -> ({ ' usa ' })	#children:1[15,34]1	0.0	info:[4, 0, 1, 15, 34, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(river(loc_2(stateid('texas'))))
predic:	answer(river(loc_2(countryid('usa'))))
204:	false
=INPUT=
*LeaveRoot* what is the capital city in texas
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:6[19,120]6	0.0	null
	[
		child-0:*n:City -> ({ capital ( *n:City ) })	#children:5[18,131]5	0.0	null
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:4[17,121]4	0.0	null
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[16,122]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' texas ' })	#children:1[14,92]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	info:[7, 7, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ population_1 ( *n:City ) })	#children:5[18,159]5	0.0	info:[7, 6, 0, 18, 159, 10, 0, 0]
		[
			child-0:*n:City -> ({ capital ( *n:City ) })	#children:4[17,131]4	0.0	info:[6, 2, 1, 17, 131, 10, 0, 0]
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[16,122]3	0.0	info:[6, 1, 1, 16, 122, 10, 0, 0]
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	info:[6, 0, 1, 15, 123, 10, 0, 0]
					[
						child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[14,7]1	0.0	info:[6, 0, 1, 14, 7, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(capital(city(loc_2(stateid('texas')))))
predic:	answer(population_1(capital(loc_2(stateid('northcarolina')))))
205:	false
=INPUT=
*LeaveRoot* what are the capitals of states that border missouri
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:7[19,120]7	0.0	null
	[
		child-0:*n:City -> ({ capital ( *n:City ) })	#children:6[18,131]6	0.0	null
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:5[17,122]5	0.0	null
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:4[16,126]4	0.0	null
				[
					child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[15,127]3	0.0	null
					[
						child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[14,123]2	0.0	null
						[
							child-0:*n:StateName -> ({ ' missouri ' })	#children:1[13,116]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[9, 9, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	info:[9, 9, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	info:[9, 8, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	info:[8, 7, 0, 17, 127, 10, 0, 0]
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	info:[7, 6, 1, 16, 123, 10, 0, 0]
				[
					child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[15,7]1	0.0	info:[7, 6, 1, 15, 7, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(capital(loc_2(state(next_to_2(stateid('missouri'))))))
predic:	answer(state(next_to_2(stateid('northcarolina'))))
208:	false
=INPUT=
*LeaveRoot* what are the cities in states through which the mississippi runs
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:7[19,120]7	0.0	null
	[
		child-0:*n:City -> ({ city ( *n:City ) })	#children:6[18,121]6	0.0	null
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:5[17,122]5	0.0	null
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:4[16,126]4	0.0	null
				[
					child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:3[15,181]3	0.0	null
					[
						child-0:*n:River -> ({ riverid ( *n:RiverName ) })	#children:2[14,152]2	0.0	null
						[
							child-0:*n:RiverName -> ({ ' mississippi ' })	#children:1[13,84]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[11, 11, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:7[19,135]7	0.0	info:[11, 11, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:6[18,126]6	0.0	info:[11, 10, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:5[17,172]5	0.0	info:[10, 9, 0, 17, 172, 10, 0, 0]
			[
				child-0:*n:City -> ({ capital ( *n:City ) })	#children:4[16,131]4	0.0	info:[6, 5, 0, 16, 131, 10, 0, 0]
				[
					child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[15,122]3	0.0	info:[5, 1, 1, 15, 122, 10, 0, 0]
					[
						child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[14,123]2	0.0	info:[5, 0, 1, 14, 123, 10, 0, 0]
						[
							child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[13,7]1	0.0	info:[5, 0, 1, 13, 7, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(city(loc_2(state(traverse_1(riverid('mississippi'))))))
predic:	answer(state(loc_1(capital(loc_2(stateid('northcarolina'))))))
209:	false
=INPUT=
*LeaveRoot* what are the cities of the state with the highest point
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:7[19,120]7	0.0	null
	[
		child-0:*n:City -> ({ city ( *n:City ) })	#children:6[18,121]6	0.0	null
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:5[17,122]5	0.0	null
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:4[16,126]4	0.0	null
				[
					child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:3[15,167]3	0.0	null
					[
						child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:2[14,132]2	0.0	null
						[
							child-0:*n:Place -> ({ place ( all ) })	#children:1[13,168]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[11, 11, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:7[19,120]7	0.0	info:[11, 11, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ capital ( *n:City ) })	#children:6[18,131]6	0.0	info:[11, 10, 0, 18, 131, 10, 0, 0]
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:5[17,122]5	0.0	info:[10, 6, 1, 17, 122, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:4[16,126]4	0.0	info:[10, 5, 1, 16, 126, 10, 0, 0]
				[
					child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:3[15,167]3	0.0	info:[10, 4, 0, 15, 167, 10, 0, 0]
					[
						child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:2[14,132]2	0.0	info:[9, 2, 1, 14, 132, 10, 0, 0]
						[
							child-0:*n:Place -> ({ place ( all ) })	#children:1[13,168]1	0.0	info:[9, 1, 1, 13, 168, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(city(loc_2(state(loc_1(highest(place(all)))))))
predic:	answer(capital(loc_2(state(loc_1(highest(place(all)))))))
210:	false
=INPUT=
*LeaveRoot* what are the highest points of all the states
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:5[19,124]5	0.0	null
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:4[18,132]4	0.0	null
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:3[17,133]3	0.0	null
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:2[16,134]2	0.0	null
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[9, 9, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	info:[9, 9, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ population_1 ( *n:City ) })	#children:3[18,159]3	0.0	info:[6, 5, 0, 18, 159, 10, 0, 0]
		[
			child-0:*n:City -> ({ largest ( *n:City ) })	#children:2[17,150]2	0.0	info:[5, 1, 1, 17, 150, 10, 0, 0]
			[
				child-0:*n:City -> ({ capital ( all ) })	#children:1[16,189]1	0.0	info:[5, 0, 1, 16, 189, 9, 0, 0]
			]
		]
	]
]

output:	answer(highest(place(loc_2(state(all)))))
predic:	answer(population_1(largest(capital(all))))
214:	false
=INPUT=
*LeaveRoot* what are the major cities in alabama
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:6[19,120]6	0.0	null
	[
		child-0:*n:City -> ({ major ( *n:City ) })	#children:5[18,156]5	0.0	null
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:4[17,121]4	0.0	null
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[16,122]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' alabama ' })	#children:1[14,96]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:6[19,120]6	0.0	info:[7, 7, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ major ( *n:City ) })	#children:5[18,156]5	0.0	info:[7, 3, 1, 18, 156, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:4[17,121]4	0.0	info:[7, 2, 0, 17, 121, 10, 0, 0]
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[16,122]3	0.0	info:[6, 1, 1, 16, 122, 10, 0, 0]
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	info:[6, 0, 1, 15, 123, 10, 0, 0]
					[
						child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[14,7]1	0.0	info:[6, 0, 1, 14, 7, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(major(city(loc_2(stateid('alabama')))))
predic:	answer(major(city(loc_2(stateid('northcarolina')))))
215:	false
=INPUT=
*LeaveRoot* what are the major cities in alaska
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:6[19,120]6	0.0	null
	[
		child-0:*n:City -> ({ major ( *n:City ) })	#children:5[18,156]5	0.0	null
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:4[17,121]4	0.0	null
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[16,122]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' alaska ' })	#children:1[14,80]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:6[19,120]6	0.0	info:[7, 7, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ major ( *n:City ) })	#children:5[18,156]5	0.0	info:[7, 3, 1, 18, 156, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:4[17,121]4	0.0	info:[7, 2, 0, 17, 121, 10, 0, 0]
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[16,122]3	0.0	info:[6, 1, 1, 16, 122, 10, 0, 0]
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	info:[6, 0, 1, 15, 123, 10, 0, 0]
					[
						child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[14,7]1	0.0	info:[6, 0, 1, 14, 7, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(major(city(loc_2(stateid('alaska')))))
predic:	answer(major(city(loc_2(stateid('northcarolina')))))
221:	false
=INPUT=
*LeaveRoot* what are the major cities in new york
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:6[19,120]6	0.0	null
	[
		child-0:*n:City -> ({ major ( *n:City ) })	#children:5[18,156]5	0.0	null
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:4[17,121]4	0.0	null
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[16,122]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' new york ' })	#children:1[14,112]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:5[19,120]5	0.0	info:[8, 8, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ major ( *n:City ) })	#children:4[18,156]4	0.0	info:[8, 4, 1, 18, 156, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:3[17,121]3	0.0	info:[8, 3, 1, 17, 121, 10, 0, 0]
			[
				child-0:*n:City -> ({ capital_1 ( *n:State ) })	#children:2[16,201]2	0.0	info:[8, 1, 1, 16, 201, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	info:[8, 0, 1, 15, 141, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(major(city(loc_2(stateid('newyork')))))
predic:	answer(major(city(capital_1(state(all)))))
226:	false
=INPUT=
*LeaveRoot* what are the major cities in states through which the mississippi runs
=OUTPUT=
ROOT	#children:9[20,1000]9	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:8[19,120]8	0.0	null
	[
		child-0:*n:City -> ({ major ( *n:City ) })	#children:7[18,156]7	0.0	null
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:6[17,121]6	0.0	null
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:5[16,122]5	0.0	null
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:4[15,126]4	0.0	null
					[
						child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:3[14,181]3	0.0	null
						[
							child-0:*n:River -> ({ riverid ( *n:RiverName ) })	#children:2[13,152]2	0.0	null
							[
								child-0:*n:RiverName -> ({ ' mississippi ' })	#children:1[12,84]1	0.0	null
							]
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[12, 12, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:7[19,120]7	0.0	info:[12, 12, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ major ( *n:City ) })	#children:6[18,156]6	0.0	info:[12, 8, 1, 18, 156, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:5[17,121]5	0.0	info:[12, 7, 1, 17, 121, 10, 0, 0]
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:4[16,122]4	0.0	info:[12, 4, 1, 16, 122, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:3[15,126]3	0.0	info:[12, 2, 1, 15, 126, 10, 0, 0]
					[
						child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:2[14,181]2	0.0	info:[12, 1, 1, 14, 181, 10, 0, 0]
						[
							child-0:*n:River -> ({ river ( all ) })	#children:1[13,171]1	0.0	info:[12, 0, 1, 13, 171, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(major(city(loc_2(state(traverse_1(riverid('mississippi')))))))
predic:	answer(major(city(loc_2(state(traverse_1(river(all)))))))
230:	false
=INPUT=
*LeaveRoot* what are the major cities in the state of california
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:7[19,120]7	0.0	null
	[
		child-0:*n:City -> ({ major ( *n:City ) })	#children:6[18,156]6	0.0	null
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:5[17,121]5	0.0	null
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:4[16,122]4	0.0	null
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:3[15,126]3	0.0	null
					[
						child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[14,123]2	0.0	null
						[
							child-0:*n:StateName -> ({ ' california ' })	#children:1[13,19]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[10, 10, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:7[19,144]7	0.0	info:[10, 10, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ population_1 ( *n:City ) })	#children:6[18,159]6	0.0	info:[9, 8, 0, 18, 159, 10, 0, 0]
		[
			child-0:*n:City -> ({ major ( *n:City ) })	#children:5[17,156]5	0.0	info:[8, 4, 1, 17, 156, 10, 0, 0]
			[
				child-0:*n:City -> ({ city ( *n:City ) })	#children:4[16,121]4	0.0	info:[8, 3, 0, 16, 121, 10, 0, 0]
				[
					child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[15,122]3	0.0	info:[7, 2, 1, 15, 122, 10, 0, 0]
					[
						child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[14,123]2	0.0	info:[7, 1, 1, 14, 123, 10, 0, 0]
						[
							child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[13,7]1	0.0	info:[7, 1, 1, 13, 7, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(major(city(loc_2(state(stateid('california'))))))
predic:	answer(population_1(major(city(loc_2(stateid('northcarolina'))))))
232:	false
=INPUT=
*LeaveRoot* what are the major cities in the usa
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:6[19,120]6	0.0	null
	[
		child-0:*n:City -> ({ major ( *n:City ) })	#children:5[18,156]5	0.0	null
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:4[17,121]4	0.0	null
			[
				child-0:*n:City -> ({ loc_2 ( *n:Country ) })	#children:3[16,138]3	0.0	null
				[
					child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[15,137]2	0.0	null
					[
						child-0:*n:CountryName -> ({ ' usa ' })	#children:1[14,34]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:7[19,144]7	0.0	info:[8, 8, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ count ( *n:City ) })	#children:6[18,155]6	0.0	info:[8, 7, 0, 18, 155, 10, 0, 0]
		[
			child-0:*n:City -> ({ major ( *n:City ) })	#children:5[17,156]5	0.0	info:[7, 3, 1, 17, 156, 10, 0, 0]
			[
				child-0:*n:City -> ({ city ( *n:City ) })	#children:4[16,121]4	0.0	info:[7, 2, 1, 16, 121, 10, 0, 0]
				[
					child-0:*n:City -> ({ loc_2 ( *n:Country ) })	#children:3[15,138]3	0.0	info:[7, 0, 1, 15, 138, 10, 0, 0]
					[
						child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[14,137]2	0.0	info:[7, 0, 1, 14, 137, 10, 0, 0]
						[
							child-0:*n:CountryName -> ({ ' usa ' })	#children:1[13,34]1	0.0	info:[7, 0, 1, 13, 34, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(major(city(loc_2(countryid('usa')))))
predic:	answer(count(major(city(loc_2(countryid('usa'))))))
233:	false
=INPUT=
*LeaveRoot* what are the major cities in vermont
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:6[19,120]6	0.0	null
	[
		child-0:*n:City -> ({ major ( *n:City ) })	#children:5[18,156]5	0.0	null
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:4[17,121]4	0.0	null
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[16,122]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' vermont ' })	#children:1[14,66]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:6[19,120]6	0.0	info:[7, 7, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ major ( *n:City ) })	#children:5[18,156]5	0.0	info:[7, 3, 1, 18, 156, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:4[17,121]4	0.0	info:[7, 2, 0, 17, 121, 10, 0, 0]
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[16,122]3	0.0	info:[6, 1, 1, 16, 122, 10, 0, 0]
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	info:[6, 0, 1, 15, 123, 10, 0, 0]
					[
						child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[14,7]1	0.0	info:[6, 0, 1, 14, 7, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(major(city(loc_2(stateid('vermont')))))
predic:	answer(major(city(loc_2(stateid('northcarolina')))))
239:	false
=INPUT=
*LeaveRoot* what are the major rivers in ohio
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:6[19,128]6	0.0	null
	[
		child-0:*n:River -> ({ major ( *n:River ) })	#children:5[18,162]5	0.0	null
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:4[17,129]4	0.0	null
			[
				child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:3[16,130]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' ohio ' })	#children:1[14,43]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:3[19,128]3	0.0	info:[7, 7, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ major ( *n:River ) })	#children:2[18,162]2	0.0	info:[7, 3, 1, 18, 162, 10, 0, 0]
		[
			child-0:*n:River -> ({ river ( all ) })	#children:1[17,171]1	0.0	info:[7, 0, 1, 17, 171, 9, 0, 0]
		]
	]
]

output:	answer(major(river(loc_2(stateid('ohio')))))
predic:	answer(major(river(all)))
243:	false
=INPUT=
*LeaveRoot* what are the population densities of each us state
=OUTPUT=
ROOT	#children:4[20,1000]4	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:3[19,144]3	0.0	null
	[
		child-0:*n:Num -> ({ density_1 ( *n:State ) })	#children:2[18,196]2	0.0	null
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	null
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[9, 9, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:3[19,144]3	0.0	info:[9, 9, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ area_1 ( *n:State ) })	#children:2[18,191]2	0.0	info:[6, 5, 0, 18, 191, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	info:[5, 0, 1, 17, 141, 9, 0, 0]
		]
	]
]

output:	answer(density_1(state(all)))
predic:	answer(area_1(state(all)))
244:	false
=INPUT=
*LeaveRoot* what is the population of mississippi
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:3[18,158]3	0.0	null
		[
			child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[17,123]2	0.0	null
			[
				child-0:*n:StateName -> ({ ' mississippi ' })	#children:1[16,83]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:3[19,144]3	0.0	info:[6, 6, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ len ( *n:River ) })	#children:2[18,151]2	0.0	info:[6, 5, 0, 18, 151, 10, 0, 0]
		[
			child-0:*n:River -> ({ river ( all ) })	#children:1[17,171]1	0.0	info:[5, 1, 1, 17, 171, 9, 0, 0]
		]
	]
]

output:	answer(population_1(stateid('mississippi')))
predic:	answer(len(river(all)))
246:	false
=INPUT=
*LeaveRoot* what are the populations of states through which the mississippi river runs
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:7[19,144]7	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:6[18,158]6	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:5[17,126]5	0.0	null
			[
				child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:4[16,181]4	0.0	null
				[
					child-0:*n:River -> ({ river ( *n:River ) })	#children:3[15,129]3	0.0	null
					[
						child-0:*n:River -> ({ riverid ( *n:RiverName ) })	#children:2[14,152]2	0.0	null
						[
							child-0:*n:RiverName -> ({ ' mississippi ' })	#children:1[13,84]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[12, 12, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:5[19,144]5	0.0	info:[12, 12, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:4[18,158]4	0.0	info:[12, 11, 0, 18, 158, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:3[17,126]3	0.0	info:[11, 6, 1, 17, 126, 10, 0, 0]
			[
				child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:2[16,181]2	0.0	info:[11, 1, 1, 16, 181, 10, 0, 0]
				[
					child-0:*n:River -> ({ river ( all ) })	#children:1[15,171]1	0.0	info:[11, 0, 1, 15, 171, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(population_1(state(traverse_1(river(riverid('mississippi'))))))
predic:	answer(population_1(state(traverse_1(river(all)))))
248:	false
=INPUT=
*LeaveRoot* what are the populations of states through which the mississippi runs
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:5[18,158]5	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	null
			[
				child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:3[16,181]3	0.0	null
				[
					child-0:*n:River -> ({ riverid ( *n:RiverName ) })	#children:2[15,152]2	0.0	null
					[
						child-0:*n:RiverName -> ({ ' mississippi ' })	#children:1[14,84]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[11, 11, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:5[19,144]5	0.0	info:[11, 11, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:4[18,158]4	0.0	info:[11, 10, 0, 18, 158, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:3[17,126]3	0.0	info:[10, 5, 1, 17, 126, 10, 0, 0]
			[
				child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:2[16,181]2	0.0	info:[10, 4, 0, 16, 181, 10, 0, 0]
				[
					child-0:*n:River -> ({ river ( all ) })	#children:1[15,171]1	0.0	info:[9, 3, 1, 15, 171, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(population_1(state(traverse_1(riverid('mississippi')))))
predic:	answer(population_1(state(traverse_1(river(all)))))
250:	false
=INPUT=
*LeaveRoot* what are the populations of states which border texas
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:5[18,158]5	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	null
			[
				child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[16,127]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' texas ' })	#children:1[14,92]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:9[20,1000]9	0.0	info:[9, 9, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:8[19,144]8	0.0	info:[9, 9, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:7[18,158]7	0.0	info:[9, 8, 0, 18, 158, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:6[17,126]6	0.0	info:[8, 7, 1, 17, 126, 10, 0, 0]
			[
				child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:5[16,127]5	0.0	info:[8, 6, 0, 16, 127, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:4[15,126]4	0.0	info:[7, 5, 1, 15, 126, 10, 0, 0]
					[
						child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:3[14,167]3	0.0	info:[7, 4, 0, 14, 167, 10, 0, 0]
						[
							child-0:*n:Place -> ({ lowest ( *n:Place ) })	#children:2[13,186]2	0.0	info:[5, 2, 0, 13, 186, 10, 0, 0]
							[
								child-0:*n:Place -> ({ place ( all ) })	#children:1[12,168]1	0.0	info:[4, 1, 0, 12, 168, 9, 0, 0]
							]
						]
					]
				]
			]
		]
	]
]

output:	answer(population_1(state(next_to_2(stateid('texas')))))
predic:	answer(population_1(state(next_to_2(state(loc_1(lowest(place(all))))))))
251:	false
=INPUT=
*LeaveRoot* what are the populations of the major cities of texas
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:7[19,144]7	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:City ) })	#children:6[18,159]6	0.0	null
		[
			child-0:*n:City -> ({ major ( *n:City ) })	#children:5[17,156]5	0.0	null
			[
				child-0:*n:City -> ({ city ( *n:City ) })	#children:4[16,121]4	0.0	null
				[
					child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[15,122]3	0.0	null
					[
						child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[14,123]2	0.0	null
						[
							child-0:*n:StateName -> ({ ' texas ' })	#children:1[13,92]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[10, 10, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:7[19,144]7	0.0	info:[10, 10, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ population_1 ( *n:City ) })	#children:6[18,159]6	0.0	info:[9, 8, 0, 18, 159, 10, 0, 0]
		[
			child-0:*n:City -> ({ capital ( *n:City ) })	#children:5[17,131]5	0.0	info:[8, 3, 1, 17, 131, 10, 0, 0]
			[
				child-0:*n:City -> ({ city ( *n:City ) })	#children:4[16,121]4	0.0	info:[8, 2, 0, 16, 121, 10, 0, 0]
				[
					child-0:*n:City -> ({ loc_2 ( *n:Country ) })	#children:3[15,138]3	0.0	info:[7, 1, 1, 15, 138, 10, 0, 0]
					[
						child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[14,137]2	0.0	info:[7, 1, 1, 14, 137, 10, 0, 0]
						[
							child-0:*n:CountryName -> ({ ' usa ' })	#children:1[13,34]1	0.0	info:[7, 1, 1, 13, 34, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(population_1(major(city(loc_2(stateid('texas'))))))
predic:	answer(population_1(capital(city(loc_2(countryid('usa'))))))
256:	false
=INPUT=
*LeaveRoot* what are the rivers in alaska
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:5[19,128]5	0.0	null
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:4[18,129]4	0.0	null
		[
			child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:3[17,130]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' alaska ' })	#children:1[15,80]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	info:[6, 6, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	info:[6, 5, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ loc_2 ( *n:Country ) })	#children:3[17,136]3	0.0	info:[5, 4, 0, 17, 136, 10, 0, 0]
			[
				child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[16,137]2	0.0	info:[4, 1, 1, 16, 137, 10, 0, 0]
				[
					child-0:*n:CountryName -> ({ ' usa ' })	#children:1[15,34]1	0.0	info:[4, 1, 1, 15, 34, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(river(loc_2(stateid('alaska'))))
predic:	answer(state(loc_2(countryid('usa'))))
273:	false
=INPUT=
*LeaveRoot* what city has the most people
=OUTPUT=
ROOT	#children:4[20,1000]4	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:3[19,120]3	0.0	null
	[
		child-0:*n:City -> ({ largest_one ( population_1 ( *n:City ) ) })	#children:2[18,188]2	0.0	null
		[
			child-0:*n:City -> ({ city ( all ) })	#children:1[17,160]1	0.0	null
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:5[19,144]5	0.0	info:[6, 6, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ population_1 ( *n:City ) })	#children:4[18,159]4	0.0	info:[6, 5, 0, 18, 159, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:3[17,121]3	0.0	info:[5, 3, 1, 17, 121, 10, 0, 0]
			[
				child-0:*n:City -> ({ capital_1 ( *n:State ) })	#children:2[16,201]2	0.0	info:[5, 2, 1, 16, 201, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	info:[5, 1, 0, 15, 141, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(largest_one(population_1(city(all))))
predic:	answer(population_1(city(capital_1(state(all)))))
274:	false
=INPUT=
*LeaveRoot* what city in the united states has the highest population density
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:6[19,120]6	0.0	null
	[
		child-0:*n:City -> ({ largest_one ( density_1 ( *n:City ) ) })	#children:5[18,0]5	0.0	null
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:4[17,121]4	0.0	null
			[
				child-0:*n:City -> ({ loc_2 ( *n:Country ) })	#children:3[16,138]3	0.0	null
				[
					child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[15,137]2	0.0	null
					[
						child-0:*n:CountryName -> ({ ' usa ' })	#children:1[14,34]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[11, 11, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	info:[11, 11, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:5[18,126]5	0.0	info:[10, 9, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:4[17,172]4	0.0	info:[9, 8, 0, 17, 172, 10, 0, 0]
			[
				child-0:*n:City -> ({ city ( *n:City ) })	#children:3[16,121]3	0.0	info:[8, 6, 1, 16, 121, 10, 0, 0]
				[
					child-0:*n:City -> ({ capital_1 ( *n:State ) })	#children:2[15,201]2	0.0	info:[8, 3, 1, 15, 201, 10, 0, 0]
					[
						child-0:*n:State -> ({ state ( all ) })	#children:1[14,141]1	0.0	info:[7, 1, 0, 14, 141, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(largest_one(density_1(city(loc_2(countryid('usa'))))))
predic:	answer(state(loc_1(city(capital_1(state(all))))))
276:	false
=INPUT=
*LeaveRoot* what is capital of the state with the lowest point
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:7[19,120]7	0.0	null
	[
		child-0:*n:City -> ({ capital ( *n:City ) })	#children:6[18,131]6	0.0	null
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:5[17,122]5	0.0	null
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:4[16,126]4	0.0	null
				[
					child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:3[15,167]3	0.0	null
					[
						child-0:*n:Place -> ({ lowest ( *n:Place ) })	#children:2[14,186]2	0.0	null
						[
							child-0:*n:Place -> ({ place ( all ) })	#children:1[13,168]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[10, 10, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:7[19,120]7	0.0	info:[10, 10, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ capital ( *n:City ) })	#children:6[18,131]6	0.0	info:[10, 9, 0, 18, 131, 10, 0, 0]
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:5[17,122]5	0.0	info:[9, 6, 1, 17, 122, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:4[16,126]4	0.0	info:[9, 5, 1, 16, 126, 10, 0, 0]
				[
					child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:3[15,167]3	0.0	info:[9, 4, 0, 15, 167, 10, 0, 0]
					[
						child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:2[14,132]2	0.0	info:[8, 2, 1, 14, 132, 10, 0, 0]
						[
							child-0:*n:Place -> ({ place ( all ) })	#children:1[13,168]1	0.0	info:[8, 1, 1, 13, 168, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(capital(loc_2(state(loc_1(lowest(place(all)))))))
predic:	answer(capital(loc_2(state(loc_1(highest(place(all)))))))
282:	false
=INPUT=
*LeaveRoot* what is the area of florida
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ area_1 ( *n:State ) })	#children:3[18,191]3	0.0	null
		[
			child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[17,123]2	0.0	null
			[
				child-0:*n:StateName -> ({ ' florida ' })	#children:1[16,13]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	info:[6, 6, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ elevation_1 ( *n:Place ) })	#children:3[18,148]3	0.0	info:[5, 4, 0, 18, 148, 10, 0, 0]
		[
			child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:2[17,132]2	0.0	info:[4, 3, 1, 17, 132, 10, 0, 0]
			[
				child-0:*n:Place -> ({ place ( all ) })	#children:1[16,168]1	0.0	info:[4, 2, 0, 16, 168, 9, 0, 0]
			]
		]
	]
]

output:	answer(area_1(stateid('florida')))
predic:	answer(elevation_1(highest(place(all))))
287:	false
=INPUT=
*LeaveRoot* what is the area of ohio
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ area_1 ( *n:State ) })	#children:3[18,191]3	0.0	null
		[
			child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[17,123]2	0.0	null
			[
				child-0:*n:StateName -> ({ ' ohio ' })	#children:1[16,43]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:3[19,120]3	0.0	info:[6, 6, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ smallest_one ( population_1 ( *n:City ) ) })	#children:2[18,190]2	0.0	info:[6, 0, 1, 18, 190, 10, 0, 0]
		[
			child-0:*n:City -> ({ capital ( all ) })	#children:1[17,189]1	0.0	info:[6, 0, 1, 17, 189, 9, 0, 0]
		]
	]
]

output:	answer(area_1(stateid('ohio')))
predic:	answer(smallest_one(population_1(capital(all))))
296:	false
=INPUT=
*LeaveRoot* what is the area of the texas state
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:5[19,144]5	0.0	null
	[
		child-0:*n:Num -> ({ area_1 ( *n:State ) })	#children:4[18,191]4	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:3[17,126]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' texas ' })	#children:1[15,92]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	info:[8, 8, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ elevation_1 ( *n:Place ) })	#children:3[18,148]3	0.0	info:[5, 4, 0, 18, 148, 10, 0, 0]
		[
			child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:2[17,132]2	0.0	info:[4, 3, 1, 17, 132, 10, 0, 0]
			[
				child-0:*n:Place -> ({ place ( all ) })	#children:1[16,168]1	0.0	info:[4, 2, 0, 16, 168, 9, 0, 0]
			]
		]
	]
]

output:	answer(area_1(state(stateid('texas'))))
predic:	answer(elevation_1(highest(place(all))))
297:	false
=INPUT=
*LeaveRoot* what is the area of wisconsin
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ area_1 ( *n:State ) })	#children:3[18,191]3	0.0	null
		[
			child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[17,123]2	0.0	null
			[
				child-0:*n:StateName -> ({ ' wisconsin ' })	#children:1[16,33]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:3[19,120]3	0.0	info:[6, 6, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ smallest_one ( population_1 ( *n:City ) ) })	#children:2[18,190]2	0.0	info:[6, 0, 1, 18, 190, 10, 0, 0]
		[
			child-0:*n:City -> ({ capital ( all ) })	#children:1[17,189]1	0.0	info:[6, 0, 1, 17, 189, 9, 0, 0]
		]
	]
]

output:	answer(area_1(stateid('wisconsin')))
predic:	answer(smallest_one(population_1(capital(all))))
301:	false
=INPUT=
*LeaveRoot* what is the biggest american city in a state with a river
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:7[19,120]7	0.0	null
	[
		child-0:*n:City -> ({ largest ( *n:City ) })	#children:6[18,150]6	0.0	null
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:5[17,121]5	0.0	null
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:4[16,122]4	0.0	null
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:3[15,126]3	0.0	null
					[
						child-0:*n:State -> ({ loc_1 ( *n:River ) })	#children:2[14,182]2	0.0	null
						[
							child-0:*n:River -> ({ river ( all ) })	#children:1[13,171]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:10[20,1000]10	0.0	info:[12, 12, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:9[19,128]9	0.0	info:[12, 12, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:8[18,129]8	0.0	info:[12, 11, 0, 18, 129, 10, 0, 0]
		[
			child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:7[17,163]7	0.0	info:[11, 10, 1, 17, 163, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:6[16,126]6	0.0	info:[11, 9, 0, 16, 126, 10, 0, 0]
				[
					child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:5[15,172]5	0.0	info:[9, 7, 0, 15, 172, 10, 0, 0]
					[
						child-0:*n:City -> ({ city ( *n:City ) })	#children:4[14,121]4	0.0	info:[6, 4, 0, 14, 121, 10, 0, 0]
						[
							child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[13,122]3	0.0	info:[5, 3, 1, 13, 122, 10, 0, 0]
							[
								child-0:*n:State -> ({ largest ( *n:State ) })	#children:2[12,140]2	0.0	info:[5, 1, 1, 12, 140, 10, 0, 0]
								[
									child-0:*n:State -> ({ state ( all ) })	#children:1[11,141]1	0.0	info:[5, 0, 1, 11, 141, 9, 0, 0]
								]
							]
						]
					]
				]
			]
		]
	]
]

output:	answer(largest(city(loc_2(state(loc_1(river(all)))))))
predic:	answer(river(traverse_2(state(loc_1(city(loc_2(largest(state(all)))))))))
302:	false
=INPUT=
*LeaveRoot* what is the biggest capital city in the us
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:7[19,120]7	0.0	null
	[
		child-0:*n:City -> ({ largest ( *n:City ) })	#children:6[18,150]6	0.0	null
		[
			child-0:*n:City -> ({ capital ( *n:City ) })	#children:5[17,131]5	0.0	null
			[
				child-0:*n:City -> ({ city ( *n:City ) })	#children:4[16,121]4	0.0	null
				[
					child-0:*n:City -> ({ loc_2 ( *n:Country ) })	#children:3[15,138]3	0.0	null
					[
						child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[14,137]2	0.0	null
						[
							child-0:*n:CountryName -> ({ ' usa ' })	#children:1[13,34]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:9[20,1000]9	0.0	info:[9, 9, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:8[19,135]8	0.0	info:[9, 9, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:7[18,126]7	0.0	info:[9, 8, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:6[17,172]6	0.0	info:[8, 4, 1, 17, 172, 10, 0, 0]
			[
				child-0:*n:City -> ({ capital ( *n:City ) })	#children:5[16,131]5	0.0	info:[8, 3, 1, 16, 131, 10, 0, 0]
				[
					child-0:*n:City -> ({ city ( *n:City ) })	#children:4[15,121]4	0.0	info:[8, 2, 1, 15, 121, 10, 0, 0]
					[
						child-0:*n:City -> ({ loc_2 ( *n:Country ) })	#children:3[14,138]3	0.0	info:[8, 0, 1, 14, 138, 10, 0, 0]
						[
							child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[13,137]2	0.0	info:[8, 0, 1, 13, 137, 10, 0, 0]
							[
								child-0:*n:CountryName -> ({ ' usa ' })	#children:1[12,34]1	0.0	info:[8, 0, 1, 12, 34, 9, 0, 0]
							]
						]
					]
				]
			]
		]
	]
]

output:	answer(largest(capital(city(loc_2(countryid('usa'))))))
predic:	answer(state(loc_1(capital(city(loc_2(countryid('usa')))))))
305:	false
=INPUT=
*LeaveRoot* what is the biggest city in kansas
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:6[19,120]6	0.0	null
	[
		child-0:*n:City -> ({ largest ( *n:City ) })	#children:5[18,150]5	0.0	null
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:4[17,121]4	0.0	null
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[16,122]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' kansas ' })	#children:1[14,67]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:6[19,120]6	0.0	info:[7, 7, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ largest ( *n:City ) })	#children:5[18,150]5	0.0	info:[7, 6, 0, 18, 150, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:4[17,121]4	0.0	info:[5, 4, 0, 17, 121, 10, 0, 0]
			[
				child-0:*n:City -> ({ loc_2 ( *n:Country ) })	#children:3[16,138]3	0.0	info:[4, 1, 1, 16, 138, 10, 0, 0]
				[
					child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[15,137]2	0.0	info:[4, 1, 1, 15, 137, 10, 0, 0]
					[
						child-0:*n:CountryName -> ({ ' usa ' })	#children:1[14,34]1	0.0	info:[4, 1, 1, 14, 34, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(largest(city(loc_2(stateid('kansas')))))
predic:	answer(largest(city(loc_2(countryid('usa')))))
306:	false
=INPUT=
*LeaveRoot* what is the biggest city in louisiana
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:6[19,120]6	0.0	null
	[
		child-0:*n:City -> ({ largest ( *n:City ) })	#children:5[18,150]5	0.0	null
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:4[17,121]4	0.0	null
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[16,122]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' louisiana ' })	#children:1[14,56]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:3[19,120]3	0.0	info:[7, 7, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ largest ( *n:City ) })	#children:2[18,150]2	0.0	info:[7, 3, 1, 18, 150, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( all ) })	#children:1[17,160]1	0.0	info:[7, 2, 0, 17, 160, 9, 0, 0]
		]
	]
]

output:	answer(largest(city(loc_2(stateid('louisiana')))))
predic:	answer(largest(city(all)))
320:	false
=INPUT=
*LeaveRoot* what is the capital of california
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:5[19,120]5	0.0	null
	[
		child-0:*n:City -> ({ capital ( *n:City ) })	#children:4[18,131]4	0.0	null
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[17,122]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' california ' })	#children:1[15,19]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	info:[6, 6, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ elevation_1 ( *n:Place ) })	#children:3[18,148]3	0.0	info:[5, 4, 0, 18, 148, 10, 0, 0]
		[
			child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:2[17,132]2	0.0	info:[4, 3, 1, 17, 132, 10, 0, 0]
			[
				child-0:*n:Place -> ({ place ( all ) })	#children:1[16,168]1	0.0	info:[4, 2, 0, 16, 168, 9, 0, 0]
			]
		]
	]
]

output:	answer(capital(loc_2(stateid('california'))))
predic:	answer(elevation_1(highest(place(all))))
321:	false
=INPUT=
*LeaveRoot* what is the capital of colorado
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:5[19,120]5	0.0	null
	[
		child-0:*n:City -> ({ capital ( *n:City ) })	#children:4[18,131]4	0.0	null
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[17,122]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' colorado ' })	#children:1[15,109]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	info:[6, 6, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ elevation_1 ( *n:Place ) })	#children:3[18,148]3	0.0	info:[5, 4, 0, 18, 148, 10, 0, 0]
		[
			child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:2[17,132]2	0.0	info:[4, 3, 1, 17, 132, 10, 0, 0]
			[
				child-0:*n:Place -> ({ place ( all ) })	#children:1[16,168]1	0.0	info:[4, 2, 0, 16, 168, 9, 0, 0]
			]
		]
	]
]

output:	answer(capital(loc_2(stateid('colorado'))))
predic:	answer(elevation_1(highest(place(all))))
324:	false
=INPUT=
*LeaveRoot* what is the capital of illinois
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:5[19,120]5	0.0	null
	[
		child-0:*n:City -> ({ capital ( *n:City ) })	#children:4[18,131]4	0.0	null
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[17,122]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' illinois ' })	#children:1[15,90]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	info:[6, 6, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ elevation_1 ( *n:Place ) })	#children:3[18,148]3	0.0	info:[5, 4, 0, 18, 148, 10, 0, 0]
		[
			child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:2[17,132]2	0.0	info:[4, 3, 1, 17, 132, 10, 0, 0]
			[
				child-0:*n:Place -> ({ place ( all ) })	#children:1[16,168]1	0.0	info:[4, 2, 0, 16, 168, 9, 0, 0]
			]
		]
	]
]

output:	answer(capital(loc_2(stateid('illinois'))))
predic:	answer(elevation_1(highest(place(all))))
326:	false
=INPUT=
*LeaveRoot* what is the capital of iowa
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:5[19,120]5	0.0	null
	[
		child-0:*n:City -> ({ capital ( *n:City ) })	#children:4[18,131]4	0.0	null
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[17,122]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' iowa ' })	#children:1[15,17]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:3[19,128]3	0.0	info:[6, 6, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ shortest ( *n:River ) })	#children:2[18,153]2	0.0	info:[6, 5, 0, 18, 153, 10, 0, 0]
		[
			child-0:*n:River -> ({ river ( all ) })	#children:1[17,171]1	0.0	info:[4, 3, 0, 17, 171, 9, 0, 0]
		]
	]
]

output:	answer(capital(loc_2(stateid('iowa'))))
predic:	answer(shortest(river(all)))
329:	false
=INPUT=
*LeaveRoot* what is the capital of massachusetts
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:5[19,120]5	0.0	null
	[
		child-0:*n:City -> ({ capital ( *n:City ) })	#children:4[18,131]4	0.0	null
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[17,122]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' massachusetts ' })	#children:1[15,113]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	info:[6, 6, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ elevation_1 ( *n:Place ) })	#children:3[18,148]3	0.0	info:[5, 4, 0, 18, 148, 10, 0, 0]
		[
			child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:2[17,132]2	0.0	info:[4, 3, 1, 17, 132, 10, 0, 0]
			[
				child-0:*n:Place -> ({ place ( all ) })	#children:1[16,168]1	0.0	info:[4, 2, 0, 16, 168, 9, 0, 0]
			]
		]
	]
]

output:	answer(capital(loc_2(stateid('massachusetts'))))
predic:	answer(elevation_1(highest(place(all))))
332:	false
=INPUT=
*LeaveRoot* what is the capital of new jersey
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:5[19,120]5	0.0	null
	[
		child-0:*n:City -> ({ capital ( *n:City ) })	#children:4[18,131]4	0.0	null
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[17,122]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' new jersey ' })	#children:1[15,23]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:7[19,135]7	0.0	info:[7, 7, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:6[18,126]6	0.0	info:[7, 6, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:5[17,172]5	0.0	info:[6, 5, 0, 17, 172, 10, 0, 0]
			[
				child-0:*n:City -> ({ capital ( *n:City ) })	#children:4[16,131]4	0.0	info:[5, 4, 0, 16, 131, 10, 0, 0]
				[
					child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[15,122]3	0.0	info:[4, 3, 0, 15, 122, 10, 0, 0]
					[
						child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[14,123]2	0.0	info:[3, 2, 1, 14, 123, 10, 0, 0]
						[
							child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[13,7]1	0.0	info:[3, 2, 1, 13, 7, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(capital(loc_2(stateid('newjersey'))))
predic:	answer(state(loc_1(capital(loc_2(stateid('northcarolina'))))))
333:	false
=INPUT=
*LeaveRoot* what is the capital of new york
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:5[19,120]5	0.0	null
	[
		child-0:*n:City -> ({ capital ( *n:City ) })	#children:4[18,131]4	0.0	null
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[17,122]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' new york ' })	#children:1[15,112]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:7[19,135]7	0.0	info:[7, 7, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:6[18,126]6	0.0	info:[7, 6, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:5[17,172]5	0.0	info:[6, 5, 0, 17, 172, 10, 0, 0]
			[
				child-0:*n:City -> ({ capital ( *n:City ) })	#children:4[16,131]4	0.0	info:[5, 4, 0, 16, 131, 10, 0, 0]
				[
					child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[15,122]3	0.0	info:[4, 3, 0, 15, 122, 10, 0, 0]
					[
						child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[14,123]2	0.0	info:[3, 2, 1, 14, 123, 10, 0, 0]
						[
							child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[13,7]1	0.0	info:[3, 2, 1, 13, 7, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(capital(loc_2(stateid('newyork'))))
predic:	answer(state(loc_1(capital(loc_2(stateid('northcarolina'))))))
334:	false
=INPUT=
*LeaveRoot* what is the capital of north dakota
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:5[19,120]5	0.0	null
	[
		child-0:*n:City -> ({ capital ( *n:City ) })	#children:4[18,131]4	0.0	null
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[17,122]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' north dakota ' })	#children:1[15,104]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:7[19,135]7	0.0	info:[7, 7, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:6[18,126]6	0.0	info:[7, 6, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:5[17,172]5	0.0	info:[6, 5, 0, 17, 172, 10, 0, 0]
			[
				child-0:*n:City -> ({ capital ( *n:City ) })	#children:4[16,131]4	0.0	info:[5, 4, 0, 16, 131, 10, 0, 0]
				[
					child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[15,122]3	0.0	info:[4, 3, 0, 15, 122, 10, 0, 0]
					[
						child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[14,123]2	0.0	info:[3, 2, 1, 14, 123, 10, 0, 0]
						[
							child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[13,7]1	0.0	info:[3, 2, 1, 13, 7, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(capital(loc_2(stateid('northdakota'))))
predic:	answer(state(loc_1(capital(loc_2(stateid('northcarolina'))))))
335:	false
=INPUT=
*LeaveRoot* what is the capital of ohio
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:5[19,120]5	0.0	null
	[
		child-0:*n:City -> ({ capital ( *n:City ) })	#children:4[18,131]4	0.0	null
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[17,122]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' ohio ' })	#children:1[15,43]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	info:[6, 6, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ elevation_1 ( *n:Place ) })	#children:3[18,148]3	0.0	info:[5, 4, 0, 18, 148, 10, 0, 0]
		[
			child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:2[17,132]2	0.0	info:[4, 3, 1, 17, 132, 10, 0, 0]
			[
				child-0:*n:Place -> ({ place ( all ) })	#children:1[16,168]1	0.0	info:[4, 2, 0, 16, 168, 9, 0, 0]
			]
		]
	]
]

output:	answer(capital(loc_2(stateid('ohio'))))
predic:	answer(elevation_1(highest(place(all))))
337:	false
=INPUT=
*LeaveRoot* what is the capital of states that have cities named durham
=OUTPUT=
ROOT	#children:9[20,1000]9	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:8[19,120]8	0.0	null
	[
		child-0:*n:City -> ({ capital ( *n:City ) })	#children:7[18,131]7	0.0	null
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:6[17,122]6	0.0	null
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:5[16,126]5	0.0	null
				[
					child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:4[15,172]4	0.0	null
					[
						child-0:*n:City -> ({ city ( *n:City ) })	#children:3[14,121]3	0.0	null
						[
							child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[13,147]2	0.0	null
							[
								child-0:*n:CityName -> ({ ' durham ' })	#children:1[12,1]1	0.0	null
							]
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:9[20,1000]9	0.0	info:[11, 11, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:8[19,135]8	0.0	info:[11, 11, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:7[18,126]7	0.0	info:[11, 10, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:6[17,172]6	0.0	info:[10, 9, 0, 17, 172, 10, 0, 0]
			[
				child-0:*n:City -> ({ city ( *n:City ) })	#children:5[16,121]5	0.0	info:[9, 8, 0, 16, 121, 10, 0, 0]
				[
					child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:4[15,122]4	0.0	info:[8, 4, 1, 15, 122, 10, 0, 0]
					[
						child-0:*n:State -> ({ state ( *n:State ) })	#children:3[14,126]3	0.0	info:[8, 3, 1, 14, 126, 10, 0, 0]
						[
							child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:2[13,181]2	0.0	info:[8, 2, 1, 13, 181, 10, 0, 0]
							[
								child-0:*n:River -> ({ river ( all ) })	#children:1[12,171]1	0.0	info:[8, 0, 1, 12, 171, 9, 0, 0]
							]
						]
					]
				]
			]
		]
	]
]

output:	answer(capital(loc_2(state(loc_1(city(cityid('durham',_)))))))
predic:	answer(state(loc_1(city(loc_2(state(traverse_1(river(all))))))))
340:	false
=INPUT=
*LeaveRoot* what is the capital of the florida state
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:6[19,120]6	0.0	null
	[
		child-0:*n:City -> ({ capital ( *n:City ) })	#children:5[18,131]5	0.0	null
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:4[17,122]4	0.0	null
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:3[16,126]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' florida ' })	#children:1[14,13]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:7[19,135]7	0.0	info:[8, 8, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:6[18,126]6	0.0	info:[8, 7, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:5[17,172]5	0.0	info:[7, 6, 0, 17, 172, 10, 0, 0]
			[
				child-0:*n:City -> ({ capital ( *n:City ) })	#children:4[16,131]4	0.0	info:[5, 4, 0, 16, 131, 10, 0, 0]
				[
					child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[15,122]3	0.0	info:[4, 3, 0, 15, 122, 10, 0, 0]
					[
						child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[14,123]2	0.0	info:[3, 2, 1, 14, 123, 10, 0, 0]
						[
							child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[13,7]1	0.0	info:[3, 2, 1, 13, 7, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(capital(loc_2(state(stateid('florida')))))
predic:	answer(state(loc_1(capital(loc_2(stateid('northcarolina'))))))
342:	false
=INPUT=
*LeaveRoot* what is the capital of the smallest state
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:5[19,120]5	0.0	null
	[
		child-0:*n:City -> ({ capital ( *n:City ) })	#children:4[18,131]4	0.0	null
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[17,122]3	0.0	null
			[
				child-0:*n:State -> ({ smallest ( *n:State ) })	#children:2[16,165]2	0.0	null
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:6[19,124]6	0.0	info:[8, 8, 1, 19, 124, 10, 0, 0]
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:5[18,132]5	0.0	info:[8, 7, 0, 18, 132, 10, 0, 0]
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[17,133]4	0.0	info:[7, 6, 0, 17, 133, 10, 0, 0]
			[
				child-0:*n:Place -> ({ loc_2 ( *n:Country ) })	#children:3[16,183]3	0.0	info:[6, 5, 0, 16, 183, 10, 0, 0]
				[
					child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[15,137]2	0.0	info:[5, 2, 1, 15, 137, 10, 0, 0]
					[
						child-0:*n:CountryName -> ({ ' usa ' })	#children:1[14,34]1	0.0	info:[5, 2, 1, 14, 34, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(capital(loc_2(smallest(state(all)))))
predic:	answer(highest(place(loc_2(countryid('usa')))))
348:	false
=INPUT=
*LeaveRoot* what is the capital of the state with the largest population
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:5[19,120]5	0.0	null
	[
		child-0:*n:City -> ({ capital ( *n:City ) })	#children:4[18,131]4	0.0	null
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[17,122]3	0.0	null
			[
				child-0:*n:State -> ({ largest_one ( population_1 ( *n:State ) ) })	#children:2[16,169]2	0.0	null
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[11, 11, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:7[19,135]7	0.0	info:[11, 11, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:6[18,126]6	0.0	info:[11, 10, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:5[17,172]5	0.0	info:[7, 6, 0, 17, 172, 10, 0, 0]
			[
				child-0:*n:City -> ({ capital ( *n:City ) })	#children:4[16,131]4	0.0	info:[5, 4, 0, 16, 131, 10, 0, 0]
				[
					child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[15,122]3	0.0	info:[4, 3, 0, 15, 122, 10, 0, 0]
					[
						child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[14,123]2	0.0	info:[3, 2, 1, 14, 123, 10, 0, 0]
						[
							child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[13,7]1	0.0	info:[3, 2, 1, 13, 7, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(capital(loc_2(largest_one(population_1(state(all))))))
predic:	answer(state(loc_1(capital(loc_2(stateid('northcarolina'))))))
349:	false
=INPUT=
*LeaveRoot* what is the capital of the state with the largest population density
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:5[19,120]5	0.0	null
	[
		child-0:*n:City -> ({ capital ( *n:City ) })	#children:4[18,131]4	0.0	null
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[17,122]3	0.0	null
			[
				child-0:*n:State -> ({ largest_one ( density_1 ( *n:State ) ) })	#children:2[16,166]2	0.0	null
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[12, 12, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:7[19,135]7	0.0	info:[12, 12, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:6[18,126]6	0.0	info:[11, 10, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:5[17,172]5	0.0	info:[7, 6, 0, 17, 172, 10, 0, 0]
			[
				child-0:*n:City -> ({ capital ( *n:City ) })	#children:4[16,131]4	0.0	info:[5, 4, 0, 16, 131, 10, 0, 0]
				[
					child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[15,122]3	0.0	info:[4, 3, 0, 15, 122, 10, 0, 0]
					[
						child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[14,123]2	0.0	info:[3, 2, 1, 14, 123, 10, 0, 0]
						[
							child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[13,7]1	0.0	info:[3, 2, 1, 13, 7, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(capital(loc_2(largest_one(density_1(state(all))))))
predic:	answer(state(loc_1(capital(loc_2(stateid('northcarolina'))))))
350:	false
=INPUT=
*LeaveRoot* what is the capital of the state with the longest river
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:7[19,120]7	0.0	null
	[
		child-0:*n:City -> ({ capital ( *n:City ) })	#children:6[18,131]6	0.0	null
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:5[17,122]5	0.0	null
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:4[16,126]4	0.0	null
				[
					child-0:*n:State -> ({ loc_1 ( *n:River ) })	#children:3[15,182]3	0.0	null
					[
						child-0:*n:River -> ({ longest ( *n:River ) })	#children:2[14,142]2	0.0	null
						[
							child-0:*n:River -> ({ river ( all ) })	#children:1[13,171]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[11, 11, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:7[19,128]7	0.0	info:[11, 11, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:6[18,129]6	0.0	info:[11, 10, 0, 18, 129, 10, 0, 0]
		[
			child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:5[17,163]5	0.0	info:[10, 6, 1, 17, 163, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:4[16,126]4	0.0	info:[10, 5, 1, 16, 126, 10, 0, 0]
				[
					child-0:*n:State -> ({ next_to_2 ( *n:River ) })	#children:3[15,177]3	0.0	info:[10, 3, 1, 15, 177, 10, 0, 0]
					[
						child-0:*n:River -> ({ longest ( *n:River ) })	#children:2[14,142]2	0.0	info:[10, 2, 0, 14, 142, 10, 0, 0]
						[
							child-0:*n:River -> ({ river ( all ) })	#children:1[13,171]1	0.0	info:[9, 1, 1, 13, 171, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(capital(loc_2(state(loc_1(longest(river(all)))))))
predic:	answer(river(traverse_2(state(next_to_2(longest(river(all)))))))
351:	false
=INPUT=
*LeaveRoot* what is the capital of the state with the most inhabitants
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:5[19,120]5	0.0	null
	[
		child-0:*n:City -> ({ capital ( *n:City ) })	#children:4[18,131]4	0.0	null
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[17,122]3	0.0	null
			[
				child-0:*n:State -> ({ largest_one ( population_1 ( *n:State ) ) })	#children:2[16,169]2	0.0	null
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:9[20,1000]9	0.0	info:[11, 11, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:8[19,144]8	0.0	info:[11, 11, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ population_1 ( *n:City ) })	#children:7[18,159]7	0.0	info:[11, 10, 0, 18, 159, 10, 0, 0]
		[
			child-0:*n:City -> ({ capital ( *n:City ) })	#children:6[17,131]6	0.0	info:[10, 7, 1, 17, 131, 10, 0, 0]
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:5[16,122]5	0.0	info:[10, 6, 1, 16, 122, 10, 0, 0]
				[
					child-0:*n:State -> ({ most ( *n:State ) })	#children:4[15,179]4	0.0	info:[10, 5, 0, 15, 179, 10, 0, 0]
					[
						child-0:*n:State -> ({ state ( *n:State ) })	#children:3[14,126]3	0.0	info:[9, 4, 1, 14, 126, 10, 0, 0]
						[
							child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:2[13,172]2	0.0	info:[9, 2, 1, 13, 172, 10, 0, 0]
							[
								child-0:*n:City -> ({ city ( all ) })	#children:1[12,160]1	0.0	info:[9, 1, 1, 12, 160, 9, 0, 0]
							]
						]
					]
				]
			]
		]
	]
]

output:	answer(capital(loc_2(largest_one(population_1(state(all))))))
predic:	answer(population_1(capital(loc_2(most(state(loc_1(city(all))))))))
357:	true
=INPUT=
*LeaveRoot* what is the combined area of all 50 states
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ sum ( *n:Num ) })	#children:3[18,192]3	0.0	null
		[
			child-0:*n:Num -> ({ area_1 ( *n:State ) })	#children:2[17,191]2	0.0	null
			[
				child-0:*n:State -> ({ state ( all ) })	#children:1[16,141]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[9, 9, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	info:[9, 9, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ sum ( *n:Num ) })	#children:3[18,192]3	0.0	info:[8, 7, 0, 18, 192, 10, 0, 0]
		[
			child-0:*n:Num -> ({ area_1 ( *n:State ) })	#children:2[17,191]2	0.0	info:[6, 5, 0, 17, 191, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( all ) })	#children:1[16,141]1	0.0	info:[5, 1, 1, 16, 141, 9, 0, 0]
			]
		]
	]
]

output:	answer(sum(area_1(state(all))))
predic:	answer(sum(area_1(state(all))))
360:	false
=INPUT=
*LeaveRoot* what is the density of the new york
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ density_1 ( *n:State ) })	#children:3[18,196]3	0.0	null
		[
			child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[17,123]2	0.0	null
			[
				child-0:*n:StateName -> ({ ' new york ' })	#children:1[16,112]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	info:[8, 8, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ size ( *n:City ) })	#children:3[18,146]3	0.0	info:[8, 7, 0, 18, 146, 10, 0, 0]
		[
			child-0:*n:City -> ({ largest ( *n:City ) })	#children:2[17,150]2	0.0	info:[7, 3, 1, 17, 150, 10, 0, 0]
			[
				child-0:*n:City -> ({ capital ( all ) })	#children:1[16,189]1	0.0	info:[7, 2, 0, 16, 189, 9, 0, 0]
			]
		]
	]
]

output:	answer(density_1(stateid('newyork')))
predic:	answer(size(largest(capital(all))))
366:	false
=INPUT=
*LeaveRoot* what is the high point of wyoming
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:4[19,124]4	0.0	null
	[
		child-0:*n:Place -> ({ high_point_1 ( *n:State ) })	#children:3[18,125]3	0.0	null
		[
			child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[17,123]2	0.0	null
			[
				child-0:*n:StateName -> ({ ' wyoming ' })	#children:1[16,69]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:3[19,120]3	0.0	info:[7, 7, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ largest_one ( population_1 ( *n:City ) ) })	#children:2[18,188]2	0.0	info:[7, 6, 0, 18, 188, 10, 0, 0]
		[
			child-0:*n:City -> ({ capital ( all ) })	#children:1[17,189]1	0.0	info:[4, 3, 0, 17, 189, 9, 0, 0]
		]
	]
]

output:	answer(high_point_1(stateid('wyoming')))
predic:	answer(largest_one(population_1(capital(all))))
369:	false
=INPUT=
*LeaveRoot* what is the highest elevation in texas
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:6[19,124]6	0.0	null
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:5[18,132]5	0.0	null
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[17,133]4	0.0	null
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:3[16,134]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' texas ' })	#children:1[14,92]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:3[19,135]3	0.0	info:[7, 7, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ smallest_one ( area_1 ( *n:State ) ) })	#children:2[18,203]2	0.0	info:[7, 6, 0, 18, 203, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	info:[4, 3, 0, 17, 141, 9, 0, 0]
		]
	]
]

output:	answer(highest(place(loc_2(stateid('texas')))))
predic:	answer(smallest_one(area_1(state(all))))
370:	false
=INPUT=
*LeaveRoot* what is the highest elevation in the united states
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:6[19,124]6	0.0	null
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:5[18,132]5	0.0	null
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[17,133]4	0.0	null
			[
				child-0:*n:Place -> ({ loc_2 ( *n:Country ) })	#children:3[16,183]3	0.0	null
				[
					child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[15,137]2	0.0	null
					[
						child-0:*n:CountryName -> ({ ' usa ' })	#children:1[14,34]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[9, 9, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	info:[9, 9, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	info:[8, 7, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ loc_2 ( *n:Country ) })	#children:3[17,136]3	0.0	info:[6, 5, 0, 17, 136, 10, 0, 0]
			[
				child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[16,137]2	0.0	info:[5, 2, 1, 16, 137, 10, 0, 0]
				[
					child-0:*n:CountryName -> ({ ' usa ' })	#children:1[15,34]1	0.0	info:[5, 2, 1, 15, 34, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(highest(place(loc_2(countryid('usa')))))
predic:	answer(state(loc_2(countryid('usa'))))
373:	false
=INPUT=
*LeaveRoot* what is the highest mountain in the us
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:6[19,124]6	0.0	null
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:5[18,132]5	0.0	null
		[
			child-0:*n:Place -> ({ mountain ( *n:Place ) })	#children:4[17,197]4	0.0	null
			[
				child-0:*n:Place -> ({ loc_2 ( *n:Country ) })	#children:3[16,183]3	0.0	null
				[
					child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[15,137]2	0.0	null
					[
						child-0:*n:CountryName -> ({ ' usa ' })	#children:1[14,34]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:5[19,124]5	0.0	info:[8, 8, 1, 19, 124, 10, 0, 0]
	[
		child-0:*n:Place -> ({ mountain ( *n:Place ) })	#children:4[18,197]4	0.0	info:[5, 4, 0, 18, 197, 10, 0, 0]
		[
			child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:3[17,134]3	0.0	info:[4, 3, 0, 17, 134, 10, 0, 0]
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	info:[3, 2, 1, 16, 123, 10, 0, 0]
				[
					child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[15,7]1	0.0	info:[3, 2, 1, 15, 7, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(highest(mountain(loc_2(countryid('usa')))))
predic:	answer(mountain(loc_2(stateid('northcarolina'))))
374:	false
=INPUT=
*LeaveRoot* what is the highest mountain in us
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:6[19,124]6	0.0	null
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:5[18,132]5	0.0	null
		[
			child-0:*n:Place -> ({ mountain ( *n:Place ) })	#children:4[17,197]4	0.0	null
			[
				child-0:*n:Place -> ({ loc_2 ( *n:Country ) })	#children:3[16,183]3	0.0	null
				[
					child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[15,137]2	0.0	null
					[
						child-0:*n:CountryName -> ({ ' usa ' })	#children:1[14,34]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:5[19,124]5	0.0	info:[7, 7, 1, 19, 124, 10, 0, 0]
	[
		child-0:*n:Place -> ({ mountain ( *n:Place ) })	#children:4[18,197]4	0.0	info:[5, 4, 0, 18, 197, 10, 0, 0]
		[
			child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:3[17,134]3	0.0	info:[4, 3, 0, 17, 134, 10, 0, 0]
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	info:[3, 2, 1, 16, 123, 10, 0, 0]
				[
					child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[15,7]1	0.0	info:[3, 2, 1, 15, 7, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(highest(mountain(loc_2(countryid('usa')))))
predic:	answer(mountain(loc_2(stateid('northcarolina'))))
376:	false
=INPUT=
*LeaveRoot* what is the highest point in delaware
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:6[19,124]6	0.0	null
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:5[18,132]5	0.0	null
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[17,133]4	0.0	null
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:3[16,134]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' delaware ' })	#children:1[14,21]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:6[19,124]6	0.0	info:[7, 7, 1, 19, 124, 10, 0, 0]
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:5[18,132]5	0.0	info:[7, 6, 0, 18, 132, 10, 0, 0]
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[17,133]4	0.0	info:[5, 4, 0, 17, 133, 10, 0, 0]
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:3[16,134]3	0.0	info:[4, 3, 0, 16, 134, 10, 0, 0]
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	info:[3, 2, 1, 15, 123, 10, 0, 0]
					[
						child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[14,7]1	0.0	info:[3, 2, 1, 14, 7, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(highest(place(loc_2(stateid('delaware')))))
predic:	answer(highest(place(loc_2(stateid('northcarolina')))))
379:	false
=INPUT=
*LeaveRoot* what is the highest point in iowa
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:6[19,124]6	0.0	null
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:5[18,132]5	0.0	null
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[17,133]4	0.0	null
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:3[16,134]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' iowa ' })	#children:1[14,17]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	info:[7, 7, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	info:[7, 6, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ loc_2 ( *n:Country ) })	#children:3[17,136]3	0.0	info:[6, 5, 0, 17, 136, 10, 0, 0]
			[
				child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[16,137]2	0.0	info:[5, 2, 1, 16, 137, 10, 0, 0]
				[
					child-0:*n:CountryName -> ({ ' usa ' })	#children:1[15,34]1	0.0	info:[5, 2, 1, 15, 34, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(highest(place(loc_2(stateid('iowa')))))
predic:	answer(state(loc_2(countryid('usa'))))
381:	false
=INPUT=
*LeaveRoot* what is the highest point in maine
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:6[19,124]6	0.0	null
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:5[18,132]5	0.0	null
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[17,133]4	0.0	null
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:3[16,134]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' maine ' })	#children:1[14,105]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:6[19,124]6	0.0	info:[7, 7, 1, 19, 124, 10, 0, 0]
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:5[18,132]5	0.0	info:[7, 6, 0, 18, 132, 10, 0, 0]
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[17,133]4	0.0	info:[5, 4, 0, 17, 133, 10, 0, 0]
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:3[16,134]3	0.0	info:[4, 3, 0, 16, 134, 10, 0, 0]
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	info:[3, 2, 1, 15, 123, 10, 0, 0]
					[
						child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[14,7]1	0.0	info:[3, 2, 1, 14, 7, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(highest(place(loc_2(stateid('maine')))))
predic:	answer(highest(place(loc_2(stateid('northcarolina')))))
382:	false
=INPUT=
*LeaveRoot* what is the highest point in montana
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:6[19,124]6	0.0	null
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:5[18,132]5	0.0	null
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[17,133]4	0.0	null
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:3[16,134]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' montana ' })	#children:1[14,49]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:6[19,124]6	0.0	info:[7, 7, 1, 19, 124, 10, 0, 0]
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:5[18,132]5	0.0	info:[7, 6, 0, 18, 132, 10, 0, 0]
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[17,133]4	0.0	info:[5, 4, 0, 17, 133, 10, 0, 0]
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:3[16,134]3	0.0	info:[4, 3, 0, 16, 134, 10, 0, 0]
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	info:[3, 2, 1, 15, 123, 10, 0, 0]
					[
						child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[14,7]1	0.0	info:[3, 2, 1, 14, 7, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(highest(place(loc_2(stateid('montana')))))
predic:	answer(highest(place(loc_2(stateid('northcarolina')))))
383:	false
=INPUT=
*LeaveRoot* what is the highest point in nevada in meters
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:6[19,124]6	0.0	null
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:5[18,132]5	0.0	null
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[17,133]4	0.0	null
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:3[16,134]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' nevada ' })	#children:1[14,27]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[9, 9, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	info:[9, 9, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:5[18,126]5	0.0	info:[9, 8, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:4[17,167]4	0.0	info:[8, 4, 1, 17, 167, 10, 0, 0]
			[
				child-0:*n:Place -> ({ place ( *n:Place ) })	#children:3[16,133]3	0.0	info:[8, 3, 1, 16, 133, 10, 0, 0]
				[
					child-0:*n:Place -> ({ elevation_2 ( *n:Num ) })	#children:2[15,198]2	0.0	info:[8, 2, 0, 15, 198, 10, 0, 0]
					[
						child-0:*n:Num -> ({ 0 })	#children:1[14,199]1	1.6527134332649896E-213	info:[7, 0, 1, 14, 199, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(highest(place(loc_2(stateid('nevada')))))
predic:	answer(state(loc_1(place(elevation_2(0)))))
387:	false
=INPUT=
*LeaveRoot* what is the highest point in states bordering georgia
=OUTPUT=
ROOT	#children:9[20,1000]9	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:8[19,124]8	0.0	null
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:7[18,132]7	0.0	null
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:6[17,133]6	0.0	null
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:5[16,134]5	0.0	null
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:4[15,126]4	0.0	null
					[
						child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[14,127]3	0.0	null
						[
							child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[13,123]2	0.0	null
							[
								child-0:*n:StateName -> ({ ' georgia ' })	#children:1[12,81]1	0.0	null
							]
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[9, 9, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	info:[9, 9, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	info:[9, 8, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	info:[8, 7, 0, 17, 127, 10, 0, 0]
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	info:[7, 6, 1, 16, 123, 10, 0, 0]
				[
					child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[15,7]1	0.0	info:[7, 6, 1, 15, 7, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(highest(place(loc_2(state(next_to_2(stateid('georgia')))))))
predic:	answer(state(next_to_2(stateid('northcarolina'))))
391:	false
=INPUT=
*LeaveRoot* what is the highest point in the state with capital austin
=OUTPUT=
ROOT	#children:10[20,1000]10	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:9[19,124]9	0.0	null
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:8[18,132]8	0.0	null
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:7[17,133]7	0.0	null
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:6[16,134]6	0.0	null
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:5[15,126]5	0.0	null
					[
						child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:4[14,172]4	0.0	null
						[
							child-0:*n:City -> ({ capital ( *n:City ) })	#children:3[13,131]3	0.0	null
							[
								child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[12,147]2	0.0	null
								[
									child-0:*n:CityName -> ({ ' austin ' })	#children:1[11,30]1	0.0	null
								]
							]
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[11, 11, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:7[19,135]7	0.0	info:[11, 11, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:6[18,126]6	0.0	info:[11, 10, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:5[17,172]5	0.0	info:[10, 6, 1, 17, 172, 10, 0, 0]
			[
				child-0:*n:City -> ({ capital ( *n:City ) })	#children:4[16,131]4	0.0	info:[10, 5, 0, 16, 131, 10, 0, 0]
				[
					child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[15,122]3	0.0	info:[9, 4, 1, 15, 122, 10, 0, 0]
					[
						child-0:*n:State -> ({ largest ( *n:State ) })	#children:2[14,140]2	0.0	info:[9, 1, 1, 14, 140, 10, 0, 0]
						[
							child-0:*n:State -> ({ state ( all ) })	#children:1[13,141]1	0.0	info:[9, 0, 1, 13, 141, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(highest(place(loc_2(state(loc_1(capital(cityid('austin',_))))))))
predic:	answer(state(loc_1(capital(loc_2(largest(state(all)))))))
396:	false
=INPUT=
*LeaveRoot* what is the highest point in the states bordering colorado
=OUTPUT=
ROOT	#children:9[20,1000]9	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:8[19,124]8	0.0	null
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:7[18,132]7	0.0	null
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:6[17,133]6	0.0	null
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:5[16,134]5	0.0	null
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:4[15,126]4	0.0	null
					[
						child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[14,127]3	0.0	null
						[
							child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[13,123]2	0.0	null
							[
								child-0:*n:StateName -> ({ ' colorado ' })	#children:1[12,109]1	0.0	null
							]
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[10, 10, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	info:[10, 10, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	info:[10, 9, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	info:[9, 8, 0, 17, 127, 10, 0, 0]
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	info:[8, 7, 1, 16, 123, 10, 0, 0]
				[
					child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[15,7]1	0.0	info:[8, 7, 1, 15, 7, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(highest(place(loc_2(state(next_to_2(stateid('colorado')))))))
predic:	answer(state(next_to_2(stateid('northcarolina'))))
399:	false
=INPUT=
*LeaveRoot* what is the highest point in the usa
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:6[19,124]6	0.0	null
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:5[18,132]5	0.0	null
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[17,133]4	0.0	null
			[
				child-0:*n:Place -> ({ loc_2 ( *n:Country ) })	#children:3[16,183]3	0.0	null
				[
					child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[15,137]2	0.0	null
					[
						child-0:*n:CountryName -> ({ ' usa ' })	#children:1[14,34]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:3[19,135]3	0.0	info:[8, 8, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ largest_one ( density_1 ( *n:State ) ) })	#children:2[18,166]2	0.0	info:[8, 7, 0, 18, 166, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	info:[7, 3, 1, 17, 141, 9, 0, 0]
		]
	]
]

output:	answer(highest(place(loc_2(countryid('usa')))))
predic:	answer(largest_one(density_1(state(all))))
400:	false
=INPUT=
*LeaveRoot* what is the highest point in virginia
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:6[19,124]6	0.0	null
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:5[18,132]5	0.0	null
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[17,133]4	0.0	null
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:3[16,134]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' virginia ' })	#children:1[14,14]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:6[19,124]6	0.0	info:[7, 7, 1, 19, 124, 10, 0, 0]
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:5[18,132]5	0.0	info:[7, 6, 0, 18, 132, 10, 0, 0]
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[17,133]4	0.0	info:[5, 4, 0, 17, 133, 10, 0, 0]
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:3[16,134]3	0.0	info:[4, 3, 0, 16, 134, 10, 0, 0]
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	info:[3, 2, 1, 15, 123, 10, 0, 0]
					[
						child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[14,7]1	0.0	info:[3, 2, 1, 14, 7, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(highest(place(loc_2(stateid('virginia')))))
predic:	answer(highest(place(loc_2(stateid('northcarolina')))))
403:	false
=INPUT=
*LeaveRoot* what is the highest point of the state with the smallest population density
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:6[19,124]6	0.0	null
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:5[18,132]5	0.0	null
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[17,133]4	0.0	null
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:3[16,134]3	0.0	null
				[
					child-0:*n:State -> ({ smallest_one ( density_1 ( *n:State ) ) })	#children:2[15,194]2	0.0	null
					[
						child-0:*n:State -> ({ state ( all ) })	#children:1[14,141]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:9[20,1000]9	0.0	info:[13, 13, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:8[19,124]8	0.0	info:[13, 13, 1, 19, 124, 10, 0, 0]
	[
		child-0:*n:Place -> ({ major ( *n:Place ) })	#children:7[18,184]7	0.0	info:[13, 12, 0, 18, 184, 10, 0, 0]
		[
			child-0:*n:Place -> ({ lake ( *n:Place ) })	#children:6[17,139]6	0.0	info:[12, 11, 0, 17, 139, 10, 0, 0]
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:5[16,134]5	0.0	info:[11, 6, 1, 16, 134, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:4[15,126]4	0.0	info:[11, 5, 1, 15, 126, 10, 0, 0]
					[
						child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:3[14,167]3	0.0	info:[11, 4, 0, 14, 167, 10, 0, 0]
						[
							child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:2[13,132]2	0.0	info:[10, 2, 1, 13, 132, 10, 0, 0]
							[
								child-0:*n:Place -> ({ place ( all ) })	#children:1[12,168]1	0.0	info:[10, 1, 1, 12, 168, 9, 0, 0]
							]
						]
					]
				]
			]
		]
	]
]

output:	answer(highest(place(loc_2(smallest_one(density_1(state(all)))))))
predic:	answer(major(lake(loc_2(state(loc_1(highest(place(all))))))))
404:	false
=INPUT=
*LeaveRoot* what is the highest point of the usa
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:6[19,124]6	0.0	null
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:5[18,132]5	0.0	null
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[17,133]4	0.0	null
			[
				child-0:*n:Place -> ({ loc_2 ( *n:Country ) })	#children:3[16,183]3	0.0	null
				[
					child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[15,137]2	0.0	null
					[
						child-0:*n:CountryName -> ({ ' usa ' })	#children:1[14,34]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:3[19,144]3	0.0	info:[8, 8, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ area_1 ( *n:State ) })	#children:2[18,191]2	0.0	info:[6, 5, 0, 18, 191, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	info:[5, 1, 1, 17, 141, 9, 0, 0]
		]
	]
]

output:	answer(highest(place(loc_2(countryid('usa')))))
predic:	answer(area_1(state(all)))
406:	false
=INPUT=
*LeaveRoot* what is the largest capital city in the usa
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:7[19,120]7	0.0	null
	[
		child-0:*n:City -> ({ largest ( *n:City ) })	#children:6[18,150]6	0.0	null
		[
			child-0:*n:City -> ({ capital ( *n:City ) })	#children:5[17,131]5	0.0	null
			[
				child-0:*n:City -> ({ city ( *n:City ) })	#children:4[16,121]4	0.0	null
				[
					child-0:*n:City -> ({ loc_2 ( *n:Country ) })	#children:3[15,138]3	0.0	null
					[
						child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[14,137]2	0.0	null
						[
							child-0:*n:CountryName -> ({ ' usa ' })	#children:1[13,34]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[9, 9, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:7[19,144]7	0.0	info:[9, 9, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ population_1 ( *n:City ) })	#children:6[18,159]6	0.0	info:[9, 8, 0, 18, 159, 10, 0, 0]
		[
			child-0:*n:City -> ({ capital ( *n:City ) })	#children:5[17,131]5	0.0	info:[8, 3, 1, 17, 131, 10, 0, 0]
			[
				child-0:*n:City -> ({ city ( *n:City ) })	#children:4[16,121]4	0.0	info:[8, 2, 1, 16, 121, 10, 0, 0]
				[
					child-0:*n:City -> ({ loc_2 ( *n:Country ) })	#children:3[15,138]3	0.0	info:[8, 0, 1, 15, 138, 10, 0, 0]
					[
						child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[14,137]2	0.0	info:[8, 0, 1, 14, 137, 10, 0, 0]
						[
							child-0:*n:CountryName -> ({ ' usa ' })	#children:1[13,34]1	0.0	info:[8, 0, 1, 13, 34, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(largest(capital(city(loc_2(countryid('usa'))))))
predic:	answer(population_1(capital(city(loc_2(countryid('usa'))))))
409:	false
=INPUT=
*LeaveRoot* what is the largest city in california
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:6[19,120]6	0.0	null
	[
		child-0:*n:City -> ({ largest ( *n:City ) })	#children:5[18,150]5	0.0	null
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:4[17,121]4	0.0	null
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[16,122]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' california ' })	#children:1[14,19]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:6[19,120]6	0.0	info:[7, 7, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ largest ( *n:City ) })	#children:5[18,150]5	0.0	info:[7, 3, 1, 18, 150, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:4[17,121]4	0.0	info:[7, 2, 0, 17, 121, 10, 0, 0]
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[16,122]3	0.0	info:[6, 1, 1, 16, 122, 10, 0, 0]
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	info:[6, 0, 1, 15, 123, 10, 0, 0]
					[
						child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[14,7]1	0.0	info:[6, 0, 1, 14, 7, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(largest(city(loc_2(stateid('california')))))
predic:	answer(largest(city(loc_2(stateid('northcarolina')))))
413:	false
=INPUT=
*LeaveRoot* what is the largest city in rhode island
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:6[19,120]6	0.0	null
	[
		child-0:*n:City -> ({ largest ( *n:City ) })	#children:5[18,150]5	0.0	null
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:4[17,121]4	0.0	null
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[16,122]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' rhode island ' })	#children:1[14,25]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:7[19,135]7	0.0	info:[8, 8, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:6[18,126]6	0.0	info:[8, 7, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:5[17,172]5	0.0	info:[7, 6, 0, 17, 172, 10, 0, 0]
			[
				child-0:*n:City -> ({ city ( *n:City ) })	#children:4[16,121]4	0.0	info:[5, 4, 0, 16, 121, 10, 0, 0]
				[
					child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[15,122]3	0.0	info:[4, 3, 0, 15, 122, 10, 0, 0]
					[
						child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[14,123]2	0.0	info:[3, 2, 1, 14, 123, 10, 0, 0]
						[
							child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[13,7]1	0.0	info:[3, 2, 1, 13, 7, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(largest(city(loc_2(stateid('rhodeisland')))))
predic:	answer(state(loc_1(city(loc_2(stateid('northcarolina'))))))
414:	false
=INPUT=
*LeaveRoot* what is the largest city in smallest state through which the mississippi runs
=OUTPUT=
ROOT	#children:10[20,1000]10	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:9[19,120]9	0.0	null
	[
		child-0:*n:City -> ({ largest ( *n:City ) })	#children:8[18,150]8	0.0	null
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:7[17,121]7	0.0	null
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:6[16,122]6	0.0	null
				[
					child-0:*n:State -> ({ smallest ( *n:State ) })	#children:5[15,165]5	0.0	null
					[
						child-0:*n:State -> ({ state ( *n:State ) })	#children:4[14,126]4	0.0	null
						[
							child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:3[13,181]3	0.0	null
							[
								child-0:*n:River -> ({ riverid ( *n:RiverName ) })	#children:2[12,152]2	0.0	null
								[
									child-0:*n:RiverName -> ({ ' mississippi ' })	#children:1[11,84]1	0.0	null
								]
							]
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[13, 13, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:7[19,120]7	0.0	info:[13, 13, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ largest ( *n:City ) })	#children:6[18,150]6	0.0	info:[13, 9, 1, 18, 150, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:5[17,121]5	0.0	info:[13, 8, 1, 17, 121, 10, 0, 0]
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:4[16,122]4	0.0	info:[13, 6, 1, 16, 122, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:3[15,126]3	0.0	info:[13, 5, 0, 15, 126, 10, 0, 0]
					[
						child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:2[14,181]2	0.0	info:[12, 4, 0, 14, 181, 10, 0, 0]
						[
							child-0:*n:River -> ({ river ( all ) })	#children:1[13,171]1	0.0	info:[11, 3, 1, 13, 171, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(largest(city(loc_2(smallest(state(traverse_1(riverid('mississippi'))))))))
predic:	answer(largest(city(loc_2(state(traverse_1(river(all)))))))
417:	false
=INPUT=
*LeaveRoot* what is the largest city in the smallest state in the usa
=OUTPUT=
ROOT	#children:10[20,1000]10	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:9[19,120]9	0.0	null
	[
		child-0:*n:City -> ({ largest ( *n:City ) })	#children:8[18,150]8	0.0	null
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:7[17,121]7	0.0	null
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:6[16,122]6	0.0	null
				[
					child-0:*n:State -> ({ smallest ( *n:State ) })	#children:5[15,165]5	0.0	null
					[
						child-0:*n:State -> ({ state ( *n:State ) })	#children:4[14,126]4	0.0	null
						[
							child-0:*n:State -> ({ loc_2 ( *n:Country ) })	#children:3[13,136]3	0.0	null
							[
								child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[12,137]2	0.0	null
								[
									child-0:*n:CountryName -> ({ ' usa ' })	#children:1[11,34]1	0.0	null
								]
							]
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:10[20,1000]10	0.0	info:[12, 12, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:9[19,144]9	0.0	info:[12, 12, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ count ( *n:City ) })	#children:8[18,155]8	0.0	info:[12, 11, 0, 18, 155, 10, 0, 0]
		[
			child-0:*n:City -> ({ major ( *n:City ) })	#children:7[17,156]7	0.0	info:[11, 7, 1, 17, 156, 10, 0, 0]
			[
				child-0:*n:City -> ({ city ( *n:City ) })	#children:6[16,121]6	0.0	info:[11, 6, 1, 16, 121, 10, 0, 0]
				[
					child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:5[15,122]5	0.0	info:[11, 3, 1, 15, 122, 10, 0, 0]
					[
						child-0:*n:State -> ({ state ( *n:State ) })	#children:4[14,126]4	0.0	info:[11, 2, 1, 14, 126, 10, 0, 0]
						[
							child-0:*n:State -> ({ loc_2 ( *n:Country ) })	#children:3[13,136]3	0.0	info:[11, 1, 1, 13, 136, 10, 0, 0]
							[
								child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[12,137]2	0.0	info:[11, 0, 1, 12, 137, 10, 0, 0]
								[
									child-0:*n:CountryName -> ({ ' usa ' })	#children:1[11,34]1	0.0	info:[11, 0, 1, 11, 34, 9, 0, 0]
								]
							]
						]
					]
				]
			]
		]
	]
]

output:	answer(largest(city(loc_2(smallest(state(loc_2(countryid('usa'))))))))
predic:	answer(count(major(city(loc_2(state(loc_2(countryid('usa'))))))))
421:	false
=INPUT=
*LeaveRoot* what is the largest river in washington state
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:7[19,128]7	0.0	null
	[
		child-0:*n:River -> ({ longest ( *n:River ) })	#children:6[18,142]6	0.0	null
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:5[17,129]5	0.0	null
			[
				child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:4[16,130]4	0.0	null
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:3[15,126]3	0.0	null
					[
						child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[14,123]2	0.0	null
						[
							child-0:*n:StateName -> ({ ' washington ' })	#children:1[13,9]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:5[19,128]5	0.0	info:[8, 8, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:4[18,129]4	0.0	info:[8, 3, 1, 18, 129, 10, 0, 0]
		[
			child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:3[17,130]3	0.0	info:[8, 2, 1, 17, 130, 10, 0, 0]
			[
				child-0:*n:State -> ({ smallest ( *n:State ) })	#children:2[16,165]2	0.0	info:[8, 1, 0, 16, 165, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	info:[7, 0, 1, 15, 141, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(longest(river(loc_2(state(stateid('washington'))))))
predic:	answer(river(loc_2(smallest(state(all)))))
423:	false
=INPUT=
*LeaveRoot* what is the largest state bordering arkansas
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	null
	[
		child-0:*n:State -> ({ largest ( *n:State ) })	#children:5[18,140]5	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	null
			[
				child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[16,127]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' arkansas ' })	#children:1[14,16]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	info:[7, 7, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	info:[7, 6, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	info:[6, 5, 0, 17, 127, 10, 0, 0]
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	info:[5, 4, 1, 16, 123, 10, 0, 0]
				[
					child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[15,7]1	0.0	info:[5, 4, 1, 15, 7, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(largest(state(next_to_2(stateid('arkansas')))))
predic:	answer(state(next_to_2(stateid('northcarolina'))))
429:	false
=INPUT=
*LeaveRoot* what is the largest state that borders texas
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	null
	[
		child-0:*n:State -> ({ largest ( *n:State ) })	#children:5[18,140]5	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	null
			[
				child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[16,127]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' texas ' })	#children:1[14,92]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	info:[8, 8, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:3[18,158]3	0.0	info:[6, 5, 0, 18, 158, 10, 0, 0]
		[
			child-0:*n:State -> ({ largest_one ( area_1 ( *n:State ) ) })	#children:2[17,187]2	0.0	info:[5, 4, 1, 17, 187, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( all ) })	#children:1[16,141]1	0.0	info:[4, 2, 0, 16, 141, 9, 0, 0]
			]
		]
	]
]

output:	answer(largest(state(next_to_2(stateid('texas')))))
predic:	answer(population_1(largest_one(area_1(state(all)))))
433:	false
=INPUT=
*LeaveRoot* what is the least populous state
=OUTPUT=
ROOT	#children:4[20,1000]4	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:3[19,135]3	0.0	null
	[
		child-0:*n:State -> ({ smallest_one ( population_1 ( *n:State ) ) })	#children:2[18,200]2	0.0	null
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	null
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:3[19,135]3	0.0	info:[6, 6, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ largest ( *n:State ) })	#children:2[18,140]2	0.0	info:[6, 5, 0, 18, 140, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	info:[4, 3, 0, 17, 141, 9, 0, 0]
		]
	]
]

output:	answer(smallest_one(population_1(state(all))))
predic:	answer(largest(state(all)))
434:	false
=INPUT=
*LeaveRoot* what is the length of the colorado river
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:5[19,144]5	0.0	null
	[
		child-0:*n:Num -> ({ len ( *n:River ) })	#children:4[18,151]4	0.0	null
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:3[17,129]3	0.0	null
			[
				child-0:*n:River -> ({ riverid ( *n:RiverName ) })	#children:2[16,152]2	0.0	null
				[
					child-0:*n:RiverName -> ({ ' colorado ' })	#children:1[15,110]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:5[19,128]5	0.0	info:[8, 8, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:4[18,129]4	0.0	info:[8, 7, 0, 18, 129, 10, 0, 0]
		[
			child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:3[17,163]3	0.0	info:[7, 6, 1, 17, 163, 10, 0, 0]
			[
				child-0:*n:State -> ({ largest ( *n:State ) })	#children:2[16,140]2	0.0	info:[5, 3, 0, 16, 140, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	info:[4, 2, 0, 15, 141, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(len(river(riverid('colorado'))))
predic:	answer(river(traverse_2(largest(state(all)))))
437:	false
=INPUT=
*LeaveRoot* what is the length of the longest river that runs through texas
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:7[19,144]7	0.0	null
	[
		child-0:*n:Num -> ({ len ( *n:River ) })	#children:6[18,151]6	0.0	null
		[
			child-0:*n:River -> ({ longest ( *n:River ) })	#children:5[17,142]5	0.0	null
			[
				child-0:*n:River -> ({ river ( *n:River ) })	#children:4[16,129]4	0.0	null
				[
					child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:3[15,163]3	0.0	null
					[
						child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[14,123]2	0.0	null
						[
							child-0:*n:StateName -> ({ ' texas ' })	#children:1[13,92]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:9[20,1000]9	0.0	info:[12, 12, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:8[19,144]8	0.0	info:[12, 12, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:7[18,158]7	0.0	info:[10, 9, 0, 18, 158, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:6[17,126]6	0.0	info:[9, 4, 1, 17, 126, 10, 0, 0]
			[
				child-0:*n:State -> ({ next_to_2 ( *n:River ) })	#children:5[16,177]5	0.0	info:[9, 3, 0, 16, 177, 10, 0, 0]
				[
					child-0:*n:River -> ({ river ( *n:River ) })	#children:4[15,129]4	0.0	info:[8, 2, 0, 15, 129, 10, 0, 0]
					[
						child-0:*n:River -> ({ loc_2 ( *n:Country ) })	#children:3[14,154]3	0.0	info:[7, 1, 1, 14, 154, 10, 0, 0]
						[
							child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[13,137]2	0.0	info:[7, 1, 1, 13, 137, 10, 0, 0]
							[
								child-0:*n:CountryName -> ({ ' usa ' })	#children:1[12,34]1	0.0	info:[7, 1, 1, 12, 34, 9, 0, 0]
							]
						]
					]
				]
			]
		]
	]
]

output:	answer(len(longest(river(traverse_2(stateid('texas'))))))
predic:	answer(population_1(state(next_to_2(river(loc_2(countryid('usa')))))))
438:	false
=INPUT=
*LeaveRoot* what is the length of the mississippi river
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:5[19,144]5	0.0	null
	[
		child-0:*n:Num -> ({ len ( *n:River ) })	#children:4[18,151]4	0.0	null
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:3[17,129]3	0.0	null
			[
				child-0:*n:River -> ({ riverid ( *n:RiverName ) })	#children:2[16,152]2	0.0	null
				[
					child-0:*n:RiverName -> ({ ' mississippi ' })	#children:1[15,84]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:6[19,128]6	0.0	info:[8, 8, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:5[18,129]5	0.0	info:[8, 7, 0, 18, 129, 10, 0, 0]
		[
			child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:4[17,163]4	0.0	info:[7, 6, 1, 17, 163, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:3[16,126]3	0.0	info:[7, 6, 1, 16, 126, 10, 0, 0]
				[
					child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:2[15,181]2	0.0	info:[7, 5, 0, 15, 181, 10, 0, 0]
					[
						child-0:*n:River -> ({ river ( all ) })	#children:1[14,171]1	0.0	info:[6, 2, 1, 14, 171, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(len(river(riverid('mississippi'))))
predic:	answer(river(traverse_2(state(traverse_1(river(all))))))
439:	false
=INPUT=
*LeaveRoot* what is the length of the river that flows through the most states
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	null
	[
		child-0:*n:Num -> ({ len ( *n:River ) })	#children:5[18,151]5	0.0	null
		[
			child-0:*n:River -> ({ most ( *n:River ) })	#children:4[17,202]4	0.0	null
			[
				child-0:*n:River -> ({ river ( *n:River ) })	#children:3[16,129]3	0.0	null
				[
					child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:2[15,163]2	0.0	null
					[
						child-0:*n:State -> ({ state ( all ) })	#children:1[14,141]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:10[20,1000]10	0.0	info:[13, 13, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:9[19,135]9	0.0	info:[13, 13, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ most ( *n:State ) })	#children:8[18,179]8	0.0	info:[12, 11, 0, 18, 179, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:7[17,126]7	0.0	info:[11, 6, 1, 17, 126, 10, 0, 0]
			[
				child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:6[16,181]6	0.0	info:[10, 4, 0, 16, 181, 10, 0, 0]
				[
					child-0:*n:River -> ({ longest ( *n:River ) })	#children:5[15,142]5	0.0	info:[9, 3, 0, 15, 142, 10, 0, 0]
					[
						child-0:*n:River -> ({ river ( *n:River ) })	#children:4[14,129]4	0.0	info:[7, 1, 0, 14, 129, 10, 0, 0]
						[
							child-0:*n:River -> ({ loc_2 ( *n:Country ) })	#children:3[13,154]3	0.0	info:[6, 0, 1, 13, 154, 10, 0, 0]
							[
								child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[12,137]2	0.0	info:[6, 0, 1, 12, 137, 10, 0, 0]
								[
									child-0:*n:CountryName -> ({ ' usa ' })	#children:1[11,34]1	0.0	info:[6, 0, 1, 11, 34, 9, 0, 0]
								]
							]
						]
					]
				]
			]
		]
	]
]

output:	answer(len(most(river(traverse_2(state(all))))))
predic:	answer(most(state(traverse_1(longest(river(loc_2(countryid('usa'))))))))
441:	true
=INPUT=
*LeaveRoot* what is the length of the river that runs through the most states
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	null
	[
		child-0:*n:Num -> ({ len ( *n:River ) })	#children:5[18,151]5	0.0	null
		[
			child-0:*n:River -> ({ most ( *n:River ) })	#children:4[17,202]4	0.0	null
			[
				child-0:*n:River -> ({ river ( *n:River ) })	#children:3[16,129]3	0.0	null
				[
					child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:2[15,163]2	0.0	null
					[
						child-0:*n:State -> ({ state ( all ) })	#children:1[14,141]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[13, 13, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	info:[13, 13, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ len ( *n:River ) })	#children:5[18,151]5	0.0	info:[13, 12, 0, 18, 151, 10, 0, 0]
		[
			child-0:*n:River -> ({ most ( *n:River ) })	#children:4[17,202]4	0.0	info:[12, 7, 1, 17, 202, 10, 0, 0]
			[
				child-0:*n:River -> ({ river ( *n:River ) })	#children:3[16,129]3	0.0	info:[12, 5, 1, 16, 129, 10, 0, 0]
				[
					child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:2[15,163]2	0.0	info:[12, 2, 1, 15, 163, 10, 0, 0]
					[
						child-0:*n:State -> ({ state ( all ) })	#children:1[14,141]1	0.0	info:[12, 1, 0, 14, 141, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(len(most(river(traverse_2(state(all))))))
predic:	answer(len(most(river(traverse_2(state(all))))))
447:	false
=INPUT=
*LeaveRoot* what is the longest river in florida
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:6[19,128]6	0.0	null
	[
		child-0:*n:River -> ({ longest ( *n:River ) })	#children:5[18,142]5	0.0	null
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:4[17,129]4	0.0	null
			[
				child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:3[16,130]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' florida ' })	#children:1[14,13]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:5[19,128]5	0.0	info:[7, 7, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:4[18,129]4	0.0	info:[5, 4, 0, 18, 129, 10, 0, 0]
		[
			child-0:*n:River -> ({ loc_2 ( *n:Country ) })	#children:3[17,154]3	0.0	info:[4, 1, 1, 17, 154, 10, 0, 0]
			[
				child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[16,137]2	0.0	info:[4, 1, 1, 16, 137, 10, 0, 0]
				[
					child-0:*n:CountryName -> ({ ' usa ' })	#children:1[15,34]1	0.0	info:[4, 1, 1, 15, 34, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(longest(river(loc_2(stateid('florida')))))
predic:	answer(river(loc_2(countryid('usa'))))
452:	false
=INPUT=
*LeaveRoot* what is the longest river in the largest state
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:6[19,128]6	0.0	null
	[
		child-0:*n:River -> ({ longest ( *n:River ) })	#children:5[18,142]5	0.0	null
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:4[17,129]4	0.0	null
			[
				child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:3[16,130]3	0.0	null
				[
					child-0:*n:State -> ({ largest ( *n:State ) })	#children:2[15,140]2	0.0	null
					[
						child-0:*n:State -> ({ state ( all ) })	#children:1[14,141]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[9, 9, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:6[19,128]6	0.0	info:[9, 9, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ longest ( *n:River ) })	#children:5[18,142]5	0.0	info:[9, 5, 1, 18, 142, 10, 0, 0]
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:4[17,129]4	0.0	info:[9, 4, 1, 17, 129, 10, 0, 0]
			[
				child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:3[16,130]3	0.0	info:[9, 3, 1, 16, 130, 10, 0, 0]
				[
					child-0:*n:State -> ({ smallest ( *n:State ) })	#children:2[15,165]2	0.0	info:[9, 2, 0, 15, 165, 10, 0, 0]
					[
						child-0:*n:State -> ({ state ( all ) })	#children:1[14,141]1	0.0	info:[8, 1, 0, 14, 141, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(longest(river(loc_2(largest(state(all))))))
predic:	answer(longest(river(loc_2(smallest(state(all))))))
455:	false
=INPUT=
*LeaveRoot* what is the longest river in the state with the most major cities
=OUTPUT=
ROOT	#children:10[20,1000]10	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:9[19,128]9	0.0	null
	[
		child-0:*n:River -> ({ longest ( *n:River ) })	#children:8[18,142]8	0.0	null
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:7[17,129]7	0.0	null
			[
				child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:6[16,130]6	0.0	null
				[
					child-0:*n:State -> ({ most ( *n:State ) })	#children:5[15,179]5	0.0	null
					[
						child-0:*n:State -> ({ state ( *n:State ) })	#children:4[14,126]4	0.0	null
						[
							child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[13,172]3	0.0	null
							[
								child-0:*n:City -> ({ major ( *n:City ) })	#children:2[12,156]2	0.0	null
								[
									child-0:*n:City -> ({ city ( all ) })	#children:1[11,160]1	0.0	null
								]
							]
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:11[20,1000]11	0.0	info:[13, 13, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:10[19,120]10	0.0	info:[13, 13, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ city ( *n:City ) })	#children:9[18,121]9	0.0	info:[13, 12, 0, 18, 121, 10, 0, 0]
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:8[17,122]8	0.0	info:[12, 11, 0, 17, 122, 10, 0, 0]
			[
				child-0:*n:State -> ({ most ( *n:State ) })	#children:7[16,179]7	0.0	info:[11, 10, 0, 16, 179, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:6[15,126]6	0.0	info:[10, 9, 1, 15, 126, 10, 0, 0]
					[
						child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:5[14,181]5	0.0	info:[10, 6, 1, 14, 181, 10, 0, 0]
						[
							child-0:*n:River -> ({ river ( *n:River ) })	#children:4[13,129]4	0.0	info:[10, 5, 1, 13, 129, 10, 0, 0]
							[
								child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:3[12,130]3	0.0	info:[10, 4, 1, 12, 130, 10, 0, 0]
								[
									child-0:*n:State -> ({ smallest ( *n:State ) })	#children:2[11,165]2	0.0	info:[10, 3, 0, 11, 165, 10, 0, 0]
									[
										child-0:*n:State -> ({ state ( all ) })	#children:1[10,141]1	0.0	info:[9, 2, 0, 10, 141, 9, 0, 0]
									]
								]
							]
						]
					]
				]
			]
		]
	]
]

output:	answer(longest(river(loc_2(most(state(loc_1(major(city(all)))))))))
predic:	answer(city(loc_2(most(state(traverse_1(river(loc_2(smallest(state(all))))))))))
456:	false
=INPUT=
*LeaveRoot* what is the longest river in the states that border nebraska
=OUTPUT=
ROOT	#children:9[20,1000]9	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:8[19,128]8	0.0	null
	[
		child-0:*n:River -> ({ longest ( *n:River ) })	#children:7[18,142]7	0.0	null
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:6[17,129]6	0.0	null
			[
				child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:5[16,130]5	0.0	null
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:4[15,126]4	0.0	null
					[
						child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[14,127]3	0.0	null
						[
							child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[13,123]2	0.0	null
							[
								child-0:*n:StateName -> ({ ' nebraska ' })	#children:1[12,29]1	0.0	null
							]
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:11[20,1000]11	0.0	info:[11, 11, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:10[19,135]10	0.0	info:[11, 11, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:9[18,126]9	0.0	info:[11, 10, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:8[17,127]8	0.0	info:[10, 9, 0, 17, 127, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:7[16,126]7	0.0	info:[9, 8, 1, 16, 126, 10, 0, 0]
				[
					child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:6[15,181]6	0.0	info:[8, 6, 0, 15, 181, 10, 0, 0]
					[
						child-0:*n:River -> ({ longest ( *n:River ) })	#children:5[14,142]5	0.0	info:[7, 3, 1, 14, 142, 10, 0, 0]
						[
							child-0:*n:River -> ({ river ( *n:River ) })	#children:4[13,129]4	0.0	info:[7, 2, 1, 13, 129, 10, 0, 0]
							[
								child-0:*n:River -> ({ loc_2 ( *n:Country ) })	#children:3[12,154]3	0.0	info:[7, 0, 1, 12, 154, 10, 0, 0]
								[
									child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[11,137]2	0.0	info:[7, 0, 1, 11, 137, 10, 0, 0]
									[
										child-0:*n:CountryName -> ({ ' usa ' })	#children:1[10,34]1	0.0	info:[7, 0, 1, 10, 34, 9, 0, 0]
									]
								]
							]
						]
					]
				]
			]
		]
	]
]

output:	answer(longest(river(loc_2(state(next_to_2(stateid('nebraska')))))))
predic:	answer(state(next_to_2(state(traverse_1(longest(river(loc_2(countryid('usa')))))))))
460:	false
=INPUT=
*LeaveRoot* what is the longest river that flows through a state that borders indiana
=OUTPUT=
ROOT	#children:9[20,1000]9	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:8[19,128]8	0.0	null
	[
		child-0:*n:River -> ({ longest ( *n:River ) })	#children:7[18,142]7	0.0	null
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:6[17,129]6	0.0	null
			[
				child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:5[16,163]5	0.0	null
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:4[15,126]4	0.0	null
					[
						child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[14,127]3	0.0	null
						[
							child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[13,123]2	0.0	null
							[
								child-0:*n:StateName -> ({ ' indiana ' })	#children:1[12,32]1	0.0	null
							]
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[13, 13, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:7[19,128]7	0.0	info:[13, 13, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ longest ( *n:River ) })	#children:6[18,142]6	0.0	info:[13, 9, 1, 18, 142, 10, 0, 0]
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:5[17,129]5	0.0	info:[13, 8, 1, 17, 129, 10, 0, 0]
			[
				child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:4[16,163]4	0.0	info:[13, 5, 1, 16, 163, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:3[15,126]3	0.0	info:[13, 4, 0, 15, 126, 10, 0, 0]
					[
						child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:2[14,127]2	0.0	info:[12, 3, 0, 14, 127, 10, 0, 0]
						[
							child-0:*n:State -> ({ state ( all ) })	#children:1[13,141]1	0.0	info:[11, 0, 1, 13, 141, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(longest(river(traverse_2(state(next_to_2(stateid('indiana')))))))
predic:	answer(longest(river(traverse_2(state(next_to_2(state(all)))))))
465:	false
=INPUT=
*LeaveRoot* what is the lowest point in arkansas
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:6[19,124]6	0.0	null
	[
		child-0:*n:Place -> ({ lowest ( *n:Place ) })	#children:5[18,186]5	0.0	null
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[17,133]4	0.0	null
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:3[16,134]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' arkansas ' })	#children:1[14,16]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:3[19,120]3	0.0	info:[7, 7, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ smallest ( *n:City ) })	#children:2[18,204]2	0.0	info:[7, 6, 0, 18, 204, 10, 0, 0]
		[
			child-0:*n:City -> ({ capital ( all ) })	#children:1[17,189]1	0.0	info:[4, 3, 0, 17, 189, 9, 0, 0]
		]
	]
]

output:	answer(lowest(place(loc_2(stateid('arkansas')))))
predic:	answer(smallest(capital(all)))
468:	false
=INPUT=
*LeaveRoot* what is the lowest point in massachusetts
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:6[19,124]6	0.0	null
	[
		child-0:*n:Place -> ({ lowest ( *n:Place ) })	#children:5[18,186]5	0.0	null
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[17,133]4	0.0	null
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:3[16,134]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' massachusetts ' })	#children:1[14,113]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:3[19,120]3	0.0	info:[7, 7, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ largest_one ( population_1 ( *n:City ) ) })	#children:2[18,188]2	0.0	info:[5, 4, 0, 18, 188, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( all ) })	#children:1[17,160]1	0.0	info:[4, 3, 0, 17, 160, 9, 0, 0]
		]
	]
]

output:	answer(lowest(place(loc_2(stateid('massachusetts')))))
predic:	answer(largest_one(population_1(city(all))))
469:	false
=INPUT=
*LeaveRoot* what is the lowest point in mississippi
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:6[19,124]6	0.0	null
	[
		child-0:*n:Place -> ({ lowest ( *n:Place ) })	#children:5[18,186]5	0.0	null
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[17,133]4	0.0	null
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:3[16,134]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' mississippi ' })	#children:1[14,83]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:6[19,124]6	0.0	info:[7, 7, 1, 19, 124, 10, 0, 0]
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:5[18,132]5	0.0	info:[7, 6, 0, 18, 132, 10, 0, 0]
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[17,133]4	0.0	info:[5, 4, 0, 17, 133, 10, 0, 0]
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:3[16,134]3	0.0	info:[4, 3, 0, 16, 134, 10, 0, 0]
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	info:[3, 2, 1, 15, 123, 10, 0, 0]
					[
						child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[14,7]1	0.0	info:[3, 2, 1, 14, 7, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(lowest(place(loc_2(stateid('mississippi')))))
predic:	answer(highest(place(loc_2(stateid('northcarolina')))))
470:	false
=INPUT=
*LeaveRoot* what is the lowest point in nebraska in meters
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:6[19,124]6	0.0	null
	[
		child-0:*n:Place -> ({ lowest ( *n:Place ) })	#children:5[18,186]5	0.0	null
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[17,133]4	0.0	null
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:3[16,134]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' nebraska ' })	#children:1[14,29]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[9, 9, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	info:[9, 9, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:5[18,126]5	0.0	info:[9, 8, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:4[17,167]4	0.0	info:[8, 4, 1, 17, 167, 10, 0, 0]
			[
				child-0:*n:Place -> ({ place ( *n:Place ) })	#children:3[16,133]3	0.0	info:[8, 3, 1, 16, 133, 10, 0, 0]
				[
					child-0:*n:Place -> ({ elevation_2 ( *n:Num ) })	#children:2[15,198]2	0.0	info:[8, 2, 0, 15, 198, 10, 0, 0]
					[
						child-0:*n:Num -> ({ 0 })	#children:1[14,199]1	1.652484043642136E-213	info:[7, 0, 1, 14, 199, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(lowest(place(loc_2(stateid('nebraska')))))
predic:	answer(state(loc_1(place(elevation_2(0)))))
473:	false
=INPUT=
*LeaveRoot* what is the lowest point in the state of california
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:7[19,124]7	0.0	null
	[
		child-0:*n:Place -> ({ lowest ( *n:Place ) })	#children:6[18,186]6	0.0	null
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:5[17,133]5	0.0	null
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:4[16,134]4	0.0	null
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:3[15,126]3	0.0	null
					[
						child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[14,123]2	0.0	null
						[
							child-0:*n:StateName -> ({ ' california ' })	#children:1[13,19]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[10, 10, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:7[19,124]7	0.0	info:[10, 10, 1, 19, 124, 10, 0, 0]
	[
		child-0:*n:Place -> ({ lake ( *n:Place ) })	#children:6[18,139]6	0.0	info:[10, 9, 0, 18, 139, 10, 0, 0]
		[
			child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:5[17,134]5	0.0	info:[9, 4, 1, 17, 134, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:4[16,126]4	0.0	info:[9, 3, 0, 16, 126, 10, 0, 0]
				[
					child-0:*n:State -> ({ loc_2 ( *n:Country ) })	#children:3[15,136]3	0.0	info:[8, 2, 1, 15, 136, 10, 0, 0]
					[
						child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[14,137]2	0.0	info:[8, 1, 1, 14, 137, 10, 0, 0]
						[
							child-0:*n:CountryName -> ({ ' usa ' })	#children:1[13,34]1	0.0	info:[8, 1, 1, 13, 34, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(lowest(place(loc_2(state(stateid('california'))))))
predic:	answer(lake(loc_2(state(loc_2(countryid('usa'))))))
476:	false
=INPUT=
*LeaveRoot* what is the lowest point in usa
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:6[19,124]6	0.0	null
	[
		child-0:*n:Place -> ({ lowest ( *n:Place ) })	#children:5[18,186]5	0.0	null
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[17,133]4	0.0	null
			[
				child-0:*n:Place -> ({ loc_2 ( *n:Country ) })	#children:3[16,183]3	0.0	null
				[
					child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[15,137]2	0.0	null
					[
						child-0:*n:CountryName -> ({ ' usa ' })	#children:1[14,34]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:3[19,120]3	0.0	info:[7, 7, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ largest_one ( population_1 ( *n:City ) ) })	#children:2[18,188]2	0.0	info:[7, 6, 0, 18, 188, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( all ) })	#children:1[17,160]1	0.0	info:[4, 3, 0, 17, 160, 9, 0, 0]
		]
	]
]

output:	answer(lowest(place(loc_2(countryid('usa')))))
predic:	answer(largest_one(population_1(city(all))))
478:	false
=INPUT=
*LeaveRoot* what is the lowest point of all states through which the colorado river runs through
=OUTPUT=
ROOT	#children:10[20,1000]10	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:9[19,124]9	0.0	null
	[
		child-0:*n:Place -> ({ lowest ( *n:Place ) })	#children:8[18,186]8	0.0	null
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:7[17,133]7	0.0	null
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:6[16,134]6	0.0	null
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:5[15,126]5	0.0	null
					[
						child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:4[14,181]4	0.0	null
						[
							child-0:*n:River -> ({ river ( *n:River ) })	#children:3[13,129]3	0.0	null
							[
								child-0:*n:River -> ({ riverid ( *n:RiverName ) })	#children:2[12,152]2	0.0	null
								[
									child-0:*n:RiverName -> ({ ' colorado ' })	#children:1[11,110]1	0.0	null
								]
							]
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:11[20,1000]11	0.0	info:[15, 15, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:10[19,135]10	0.0	info:[15, 15, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:9[18,126]9	0.0	info:[14, 13, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:8[17,181]8	0.0	info:[13, 12, 1, 17, 181, 10, 0, 0]
			[
				child-0:*n:River -> ({ river ( *n:River ) })	#children:7[16,129]7	0.0	info:[13, 11, 0, 16, 129, 10, 0, 0]
				[
					child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:6[15,163]6	0.0	info:[12, 8, 1, 15, 163, 10, 0, 0]
					[
						child-0:*n:State -> ({ state ( *n:State ) })	#children:5[14,126]5	0.0	info:[12, 7, 0, 14, 126, 10, 0, 0]
						[
							child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:4[13,167]4	0.0	info:[10, 5, 0, 13, 167, 10, 0, 0]
							[
								child-0:*n:Place -> ({ place ( *n:Place ) })	#children:3[12,133]3	0.0	info:[9, 4, 1, 12, 133, 10, 0, 0]
								[
									child-0:*n:Place -> ({ elevation_2 ( *n:Num ) })	#children:2[11,198]2	0.0	info:[9, 3, 0, 11, 198, 10, 0, 0]
									[
										child-0:*n:Num -> ({ 0 })	#children:1[10,199]1	1.4658732715591137E-213	info:[8, 1, 1, 10, 199, 9, 0, 0]
									]
								]
							]
						]
					]
				]
			]
		]
	]
]

output:	answer(lowest(place(loc_2(state(traverse_1(river(riverid('colorado'))))))))
predic:	answer(state(traverse_1(river(traverse_2(state(loc_1(place(elevation_2(0)))))))))
483:	false
=INPUT=
*LeaveRoot* what is the maximum elevation of san francisco
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:6[19,124]6	0.0	null
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:5[18,132]5	0.0	null
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[17,133]4	0.0	null
			[
				child-0:*n:Place -> ({ loc_2 ( *n:City ) })	#children:3[16,0]3	0.0	null
				[
					child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[15,147]2	0.0	null
					[
						child-0:*n:CityName -> ({ ' san francisco ' })	#children:1[14,100]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	info:[8, 8, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ elevation_1 ( *n:Place ) })	#children:5[18,148]5	0.0	info:[6, 5, 0, 18, 148, 10, 0, 0]
		[
			child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:4[17,132]4	0.0	info:[5, 4, 1, 17, 132, 10, 0, 0]
			[
				child-0:*n:Place -> ({ place ( *n:Place ) })	#children:3[16,133]3	0.0	info:[5, 3, 0, 16, 133, 10, 0, 0]
				[
					child-0:*n:Place -> ({ elevation_2 ( *n:Num ) })	#children:2[15,198]2	0.0	info:[4, 0, 1, 15, 198, 10, 0, 0]
					[
						child-0:*n:Num -> ({ 0 })	#children:1[14,199]1	1.6604833591444867E-213	info:[4, 0, 1, 14, 199, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(highest(place(loc_2(cityid('sanfrancisco',_)))))
predic:	answer(elevation_1(highest(place(elevation_2(0)))))
484:	false
=INPUT=
*LeaveRoot* what is the most dense state in the usa
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	null
	[
		child-0:*n:State -> ({ largest_one ( density_1 ( *n:State ) ) })	#children:5[18,166]5	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	null
			[
				child-0:*n:State -> ({ loc_2 ( *n:Country ) })	#children:3[16,136]3	0.0	null
				[
					child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[15,137]2	0.0	null
					[
						child-0:*n:CountryName -> ({ ' usa ' })	#children:1[14,34]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[9, 9, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:3[19,120]3	0.0	info:[9, 9, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ largest_one ( population_1 ( *n:City ) ) })	#children:2[18,188]2	0.0	info:[9, 8, 0, 18, 188, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( all ) })	#children:1[17,160]1	0.0	info:[5, 4, 0, 17, 160, 9, 0, 0]
		]
	]
]

output:	answer(largest_one(density_1(state(loc_2(countryid('usa'))))))
predic:	answer(largest_one(population_1(city(all))))
487:	false
=INPUT=
*LeaveRoot* what is the most populous city
=OUTPUT=
ROOT	#children:4[20,1000]4	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:3[19,120]3	0.0	null
	[
		child-0:*n:City -> ({ largest_one ( population_1 ( *n:City ) ) })	#children:2[18,188]2	0.0	null
		[
			child-0:*n:City -> ({ city ( all ) })	#children:1[17,160]1	0.0	null
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:5[19,120]5	0.0	info:[6, 6, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ city ( *n:City ) })	#children:4[18,121]4	0.0	info:[6, 5, 0, 18, 121, 10, 0, 0]
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[17,122]3	0.0	info:[5, 3, 1, 17, 122, 10, 0, 0]
			[
				child-0:*n:State -> ({ largest ( *n:State ) })	#children:2[16,140]2	0.0	info:[5, 2, 0, 16, 140, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	info:[4, 1, 0, 15, 141, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(largest_one(population_1(city(all))))
predic:	answer(city(loc_2(largest(state(all)))))
490:	false
=INPUT=
*LeaveRoot* what is the most populous state
=OUTPUT=
ROOT	#children:4[20,1000]4	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:3[19,135]3	0.0	null
	[
		child-0:*n:State -> ({ largest_one ( population_1 ( *n:State ) ) })	#children:2[18,169]2	0.0	null
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	null
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	info:[6, 6, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ elevation_1 ( *n:Place ) })	#children:3[18,148]3	0.0	info:[6, 5, 0, 18, 148, 10, 0, 0]
		[
			child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:2[17,132]2	0.0	info:[5, 1, 1, 17, 132, 10, 0, 0]
			[
				child-0:*n:Place -> ({ place ( all ) })	#children:1[16,168]1	0.0	info:[5, 0, 1, 16, 168, 9, 0, 0]
			]
		]
	]
]

output:	answer(largest_one(population_1(state(all))))
predic:	answer(elevation_1(highest(place(all))))
492:	false
=INPUT=
*LeaveRoot* what is the most populous state through which the mississippi runs
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	null
	[
		child-0:*n:State -> ({ largest_one ( population_1 ( *n:State ) ) })	#children:5[18,169]5	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	null
			[
				child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:3[16,181]3	0.0	null
				[
					child-0:*n:River -> ({ riverid ( *n:RiverName ) })	#children:2[15,152]2	0.0	null
					[
						child-0:*n:RiverName -> ({ ' mississippi ' })	#children:1[14,84]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[11, 11, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	info:[11, 11, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	info:[11, 10, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:3[17,181]3	0.0	info:[10, 9, 0, 17, 181, 10, 0, 0]
			[
				child-0:*n:River -> ({ longest ( *n:River ) })	#children:2[16,142]2	0.0	info:[5, 4, 0, 16, 142, 10, 0, 0]
				[
					child-0:*n:River -> ({ river ( all ) })	#children:1[15,171]1	0.0	info:[4, 3, 0, 15, 171, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(largest_one(population_1(state(traverse_1(riverid('mississippi'))))))
predic:	answer(state(traverse_1(longest(river(all)))))
496:	false
=INPUT=
*LeaveRoot* what is the population density of maine
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ density_1 ( *n:State ) })	#children:3[18,196]3	0.0	null
		[
			child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[17,123]2	0.0	null
			[
				child-0:*n:StateName -> ({ ' maine ' })	#children:1[16,105]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	info:[7, 7, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ elevation_1 ( *n:Place ) })	#children:3[18,148]3	0.0	info:[6, 5, 0, 18, 148, 10, 0, 0]
		[
			child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:2[17,132]2	0.0	info:[5, 4, 1, 17, 132, 10, 0, 0]
			[
				child-0:*n:Place -> ({ place ( all ) })	#children:1[16,168]1	0.0	info:[5, 3, 0, 16, 168, 9, 0, 0]
			]
		]
	]
]

output:	answer(density_1(stateid('maine')))
predic:	answer(elevation_1(highest(place(all))))
499:	false
=INPUT=
*LeaveRoot* what is the population density of the largest state
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ density_1 ( *n:State ) })	#children:3[18,196]3	0.0	null
		[
			child-0:*n:State -> ({ largest ( *n:State ) })	#children:2[17,140]2	0.0	null
			[
				child-0:*n:State -> ({ state ( all ) })	#children:1[16,141]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[9, 9, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	info:[9, 9, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:3[18,158]3	0.0	info:[9, 8, 0, 18, 158, 10, 0, 0]
		[
			child-0:*n:State -> ({ largest_one ( density_1 ( *n:State ) ) })	#children:2[17,166]2	0.0	info:[8, 3, 1, 17, 166, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( all ) })	#children:1[16,141]1	0.0	info:[8, 2, 0, 16, 141, 9, 0, 0]
			]
		]
	]
]

output:	answer(density_1(largest(state(all))))
predic:	answer(population_1(largest_one(density_1(state(all)))))
505:	false
=INPUT=
*LeaveRoot* what is the population of alaska
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:3[18,158]3	0.0	null
		[
			child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[17,123]2	0.0	null
			[
				child-0:*n:StateName -> ({ ' alaska ' })	#children:1[16,80]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:3[19,120]3	0.0	info:[6, 6, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ smallest ( *n:City ) })	#children:2[18,204]2	0.0	info:[6, 5, 0, 18, 204, 10, 0, 0]
		[
			child-0:*n:City -> ({ capital ( all ) })	#children:1[17,189]1	0.0	info:[4, 3, 0, 17, 189, 9, 0, 0]
		]
	]
]

output:	answer(population_1(stateid('alaska')))
predic:	answer(smallest(capital(all)))
512:	false
=INPUT=
*LeaveRoot* what is the population of boulder
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:City ) })	#children:3[18,159]3	0.0	null
		[
			child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[17,147]2	0.0	null
			[
				child-0:*n:CityName -> ({ ' boulder ' })	#children:1[16,37]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	info:[6, 6, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ elevation_1 ( *n:Place ) })	#children:3[18,148]3	0.0	info:[5, 4, 0, 18, 148, 10, 0, 0]
		[
			child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:2[17,132]2	0.0	info:[4, 3, 1, 17, 132, 10, 0, 0]
			[
				child-0:*n:Place -> ({ place ( all ) })	#children:1[16,168]1	0.0	info:[4, 2, 0, 16, 168, 9, 0, 0]
			]
		]
	]
]

output:	answer(population_1(cityid('boulder',_)))
predic:	answer(elevation_1(highest(place(all))))
516:	false
=INPUT=
*LeaveRoot* what is the population of erie pennsylvania
=OUTPUT=
ROOT	#children:6[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:5[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:City ) })	#children:4[18,159]3	0.0	null
		[
			child-0:*n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) })	#children:3[17,164]2	0.0	null
			[
				child-0:*n:CityName -> ({ ' erie ' })	#children:1[16,28]1	0.0	null
			]
			[
				child-0:*n:StateAbbrev -> ({ ' pa ' })	#children:1[16,59]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	info:[7, 7, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ sum ( *n:Num ) })	#children:3[18,192]3	0.0	info:[7, 6, 0, 18, 192, 10, 0, 0]
		[
			child-0:*n:Num -> ({ area_1 ( *n:State ) })	#children:2[17,191]2	0.0	info:[6, 1, 1, 17, 191, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( all ) })	#children:1[16,141]1	0.0	info:[6, 0, 1, 16, 141, 9, 0, 0]
			]
		]
	]
]

output:	answer(population_1(cityid('erie','pa')))
predic:	answer(sum(area_1(state(all))))
517:	false
=INPUT=
*LeaveRoot* what is the population of hawaii
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:3[18,158]3	0.0	null
		[
			child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[17,123]2	0.0	null
			[
				child-0:*n:StateName -> ({ ' hawaii ' })	#children:1[16,101]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:3[19,120]3	0.0	info:[6, 6, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ smallest ( *n:City ) })	#children:2[18,204]2	0.0	info:[6, 5, 0, 18, 204, 10, 0, 0]
		[
			child-0:*n:City -> ({ capital ( all ) })	#children:1[17,189]1	0.0	info:[4, 3, 0, 17, 189, 9, 0, 0]
		]
	]
]

output:	answer(population_1(stateid('hawaii')))
predic:	answer(smallest(capital(all)))
518:	false
=INPUT=
*LeaveRoot* what is the population of houston
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:City ) })	#children:3[18,159]3	0.0	null
		[
			child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[17,147]2	0.0	null
			[
				child-0:*n:CityName -> ({ ' houston ' })	#children:1[16,108]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:3[19,120]3	0.0	info:[6, 6, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ largest_one ( population_1 ( *n:City ) ) })	#children:2[18,188]2	0.0	info:[6, 2, 1, 18, 188, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( all ) })	#children:1[17,160]1	0.0	info:[6, 1, 0, 17, 160, 9, 0, 0]
		]
	]
]

output:	answer(population_1(cityid('houston',_)))
predic:	answer(largest_one(population_1(city(all))))
522:	false
=INPUT=
*LeaveRoot* what is the population of maryland
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:3[18,158]3	0.0	null
		[
			child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[17,123]2	0.0	null
			[
				child-0:*n:StateName -> ({ ' maryland ' })	#children:1[16,75]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	info:[6, 6, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ elevation_1 ( *n:Place ) })	#children:3[18,148]3	0.0	info:[5, 4, 0, 18, 148, 10, 0, 0]
		[
			child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:2[17,132]2	0.0	info:[4, 3, 1, 17, 132, 10, 0, 0]
			[
				child-0:*n:Place -> ({ place ( all ) })	#children:1[16,168]1	0.0	info:[4, 2, 0, 16, 168, 9, 0, 0]
			]
		]
	]
]

output:	answer(population_1(stateid('maryland')))
predic:	answer(elevation_1(highest(place(all))))
525:	false
=INPUT=
*LeaveRoot* what is the population of new mexico
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:3[18,158]3	0.0	null
		[
			child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[17,123]2	0.0	null
			[
				child-0:*n:StateName -> ({ ' new mexico ' })	#children:1[16,40]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:3[19,120]3	0.0	info:[7, 7, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ largest_one ( population_1 ( *n:City ) ) })	#children:2[18,188]2	0.0	info:[7, 3, 1, 18, 188, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( all ) })	#children:1[17,160]1	0.0	info:[7, 2, 0, 17, 160, 9, 0, 0]
		]
	]
]

output:	answer(population_1(stateid('newmexico')))
predic:	answer(largest_one(population_1(city(all))))
527:	false
=INPUT=
*LeaveRoot* what is the population of new york city
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:5[19,144]5	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:City ) })	#children:4[18,159]4	0.0	null
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:3[17,121]3	0.0	null
			[
				child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[16,147]2	0.0	null
				[
					child-0:*n:CityName -> ({ ' new york ' })	#children:1[15,111]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:6[19,120]6	0.0	info:[8, 8, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ city ( *n:City ) })	#children:5[18,121]5	0.0	info:[8, 7, 0, 18, 121, 10, 0, 0]
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:4[17,122]4	0.0	info:[7, 3, 1, 17, 122, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:3[16,126]3	0.0	info:[7, 2, 1, 16, 126, 10, 0, 0]
				[
					child-0:*n:State -> ({ loc_1 ( *n:River ) })	#children:2[15,182]2	0.0	info:[7, 1, 1, 15, 182, 10, 0, 0]
					[
						child-0:*n:River -> ({ river ( all ) })	#children:1[14,171]1	0.0	info:[7, 0, 1, 14, 171, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(population_1(city(cityid('newyork',_))))
predic:	answer(city(loc_2(state(loc_1(river(all))))))
532:	false
=INPUT=
*LeaveRoot* what is the population of san antonio
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:City ) })	#children:3[18,159]3	0.0	null
		[
			child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[17,147]2	0.0	null
			[
				child-0:*n:CityName -> ({ ' san antonio ' })	#children:1[16,70]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:3[19,120]3	0.0	info:[7, 7, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ largest_one ( population_1 ( *n:City ) ) })	#children:2[18,188]2	0.0	info:[7, 3, 1, 18, 188, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( all ) })	#children:1[17,160]1	0.0	info:[7, 2, 0, 17, 160, 9, 0, 0]
		]
	]
]

output:	answer(population_1(cityid('sanantonio',_)))
predic:	answer(largest_one(population_1(city(all))))
538:	false
=INPUT=
*LeaveRoot* what is the population of tempe arizona
=OUTPUT=
ROOT	#children:6[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:5[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:City ) })	#children:4[18,159]3	0.0	null
		[
			child-0:*n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) })	#children:3[17,164]2	0.0	null
			[
				child-0:*n:CityName -> ({ ' tempe ' })	#children:1[16,2]1	0.0	null
			]
			[
				child-0:*n:StateAbbrev -> ({ ' az ' })	#children:1[16,51]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:3[19,120]3	0.0	info:[7, 7, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ largest ( *n:City ) })	#children:2[18,150]2	0.0	info:[7, 6, 0, 18, 150, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( all ) })	#children:1[17,160]1	0.0	info:[6, 5, 0, 17, 160, 9, 0, 0]
		]
	]
]

output:	answer(population_1(cityid('tempe','az')))
predic:	answer(largest(city(all)))
543:	false
=INPUT=
*LeaveRoot* what is the population of the largest city in the state with the largest area
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:7[19,144]7	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:City ) })	#children:6[18,159]6	0.0	null
		[
			child-0:*n:City -> ({ largest ( *n:City ) })	#children:5[17,150]5	0.0	null
			[
				child-0:*n:City -> ({ city ( *n:City ) })	#children:4[16,121]4	0.0	null
				[
					child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[15,122]3	0.0	null
					[
						child-0:*n:State -> ({ largest_one ( area_1 ( *n:State ) ) })	#children:2[14,187]2	0.0	null
						[
							child-0:*n:State -> ({ state ( all ) })	#children:1[13,141]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:10[20,1000]10	0.0	info:[15, 15, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:9[19,135]9	0.0	info:[15, 15, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ largest ( *n:State ) })	#children:8[18,140]8	0.0	info:[14, 13, 0, 18, 140, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:7[17,126]7	0.0	info:[13, 12, 1, 17, 126, 10, 0, 0]
			[
				child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:6[16,172]6	0.0	info:[11, 9, 0, 16, 172, 10, 0, 0]
				[
					child-0:*n:City -> ({ capital ( *n:City ) })	#children:5[15,131]5	0.0	info:[10, 5, 1, 15, 131, 10, 0, 0]
					[
						child-0:*n:City -> ({ city ( *n:City ) })	#children:4[14,121]4	0.0	info:[10, 2, 1, 14, 121, 10, 0, 0]
						[
							child-0:*n:City -> ({ loc_2 ( *n:Country ) })	#children:3[13,138]3	0.0	info:[10, 0, 1, 13, 138, 10, 0, 0]
							[
								child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[12,137]2	0.0	info:[10, 0, 1, 12, 137, 10, 0, 0]
								[
									child-0:*n:CountryName -> ({ ' usa ' })	#children:1[11,34]1	0.0	info:[10, 0, 1, 11, 34, 9, 0, 0]
								]
							]
						]
					]
				]
			]
		]
	]
]

output:	answer(population_1(largest(city(loc_2(largest_one(area_1(state(all))))))))
predic:	answer(largest(state(loc_1(capital(city(loc_2(countryid('usa'))))))))
547:	false
=INPUT=
*LeaveRoot* what is the population of the smallest state
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ smallest ( *n:Num ) })	#children:3[18,0]3	0.0	null
		[
			child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:2[17,158]2	0.0	null
			[
				child-0:*n:State -> ({ state ( all ) })	#children:1[16,141]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:6[19,124]6	0.0	info:[8, 8, 1, 19, 124, 10, 0, 0]
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:5[18,132]5	0.0	info:[8, 7, 0, 18, 132, 10, 0, 0]
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[17,133]4	0.0	info:[7, 6, 0, 17, 133, 10, 0, 0]
			[
				child-0:*n:Place -> ({ loc_2 ( *n:Country ) })	#children:3[16,183]3	0.0	info:[6, 5, 0, 16, 183, 10, 0, 0]
				[
					child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[15,137]2	0.0	info:[5, 2, 1, 15, 137, 10, 0, 0]
					[
						child-0:*n:CountryName -> ({ ' usa ' })	#children:1[14,34]1	0.0	info:[5, 2, 1, 14, 34, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(smallest(population_1(state(all))))
predic:	answer(highest(place(loc_2(countryid('usa')))))
548:	false
=INPUT=
*LeaveRoot* what is the population of the state that borders the most states
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:5[18,158]5	0.0	null
		[
			child-0:*n:State -> ({ most ( *n:State ) })	#children:4[17,179]4	0.0	null
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:3[16,126]3	0.0	null
				[
					child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:2[15,127]2	0.0	null
					[
						child-0:*n:State -> ({ state ( all ) })	#children:1[14,141]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[12, 12, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:7[19,135]7	0.0	info:[12, 12, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ most ( *n:State ) })	#children:6[18,179]6	0.0	info:[11, 10, 0, 18, 179, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:5[17,126]5	0.0	info:[10, 9, 1, 17, 126, 10, 0, 0]
			[
				child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:4[16,127]4	0.0	info:[9, 7, 0, 16, 127, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:3[15,126]3	0.0	info:[8, 3, 1, 15, 126, 10, 0, 0]
					[
						child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:2[14,172]2	0.0	info:[8, 1, 1, 14, 172, 10, 0, 0]
						[
							child-0:*n:City -> ({ city ( all ) })	#children:1[13,160]1	0.0	info:[8, 0, 1, 13, 160, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(population_1(most(state(next_to_2(state(all))))))
predic:	answer(most(state(next_to_2(state(loc_1(city(all)))))))
549:	false
=INPUT=
*LeaveRoot* what is the population of the state with the highest population density
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:3[18,158]3	0.0	null
		[
			child-0:*n:State -> ({ largest_one ( density_1 ( *n:State ) ) })	#children:2[17,166]2	0.0	null
			[
				child-0:*n:State -> ({ state ( all ) })	#children:1[16,141]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[12, 12, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:7[19,144]7	0.0	info:[12, 12, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ area_1 ( *n:State ) })	#children:6[18,191]6	0.0	info:[12, 11, 0, 18, 191, 10, 0, 0]
		[
			child-0:*n:State -> ({ smallest ( *n:State ) })	#children:5[17,165]5	0.0	info:[11, 9, 1, 17, 165, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:4[16,126]4	0.0	info:[11, 6, 1, 16, 126, 10, 0, 0]
				[
					child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:3[15,167]3	0.0	info:[10, 4, 0, 15, 167, 10, 0, 0]
					[
						child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:2[14,132]2	0.0	info:[9, 2, 1, 14, 132, 10, 0, 0]
						[
							child-0:*n:Place -> ({ place ( all ) })	#children:1[13,168]1	0.0	info:[9, 1, 1, 13, 168, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(population_1(largest_one(density_1(state(all)))))
predic:	answer(area_1(smallest(state(loc_1(highest(place(all)))))))
551:	false
=INPUT=
*LeaveRoot* what is the population of tucson
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:City ) })	#children:3[18,159]3	0.0	null
		[
			child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[17,147]2	0.0	null
			[
				child-0:*n:CityName -> ({ ' tucson ' })	#children:1[16,53]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:3[19,120]3	0.0	info:[6, 6, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ largest_one ( population_1 ( *n:City ) ) })	#children:2[18,188]2	0.0	info:[6, 2, 1, 18, 188, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( all ) })	#children:1[17,160]1	0.0	info:[6, 1, 0, 17, 160, 9, 0, 0]
		]
	]
]

output:	answer(population_1(cityid('tucson',_)))
predic:	answer(largest_one(population_1(city(all))))
552:	false
=INPUT=
*LeaveRoot* what is the population of utah
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:3[18,158]3	0.0	null
		[
			child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[17,123]2	0.0	null
			[
				child-0:*n:StateName -> ({ ' utah ' })	#children:1[16,65]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:3[19,120]3	0.0	info:[6, 6, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ largest_one ( population_1 ( *n:City ) ) })	#children:2[18,188]2	0.0	info:[6, 2, 1, 18, 188, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( all ) })	#children:1[17,160]1	0.0	info:[6, 1, 0, 17, 160, 9, 0, 0]
		]
	]
]

output:	answer(population_1(stateid('utah')))
predic:	answer(largest_one(population_1(city(all))))
553:	false
=INPUT=
*LeaveRoot* what is the population of washington
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:3[18,158]3	0.0	null
		[
			child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[17,123]2	0.0	null
			[
				child-0:*n:StateName -> ({ ' washington ' })	#children:1[16,9]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:3[19,120]3	0.0	info:[6, 6, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ smallest ( *n:City ) })	#children:2[18,204]2	0.0	info:[6, 5, 0, 18, 204, 10, 0, 0]
		[
			child-0:*n:City -> ({ capital ( all ) })	#children:1[17,189]1	0.0	info:[4, 3, 0, 17, 189, 9, 0, 0]
		]
	]
]

output:	answer(population_1(stateid('washington')))
predic:	answer(smallest(capital(all)))
573:	false
=INPUT=
*LeaveRoot* what is the smallest city in the us
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:6[19,120]6	0.0	null
	[
		child-0:*n:City -> ({ smallest ( *n:City ) })	#children:5[18,204]5	0.0	null
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:4[17,121]4	0.0	null
			[
				child-0:*n:City -> ({ loc_2 ( *n:Country ) })	#children:3[16,138]3	0.0	null
				[
					child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[15,137]2	0.0	null
					[
						child-0:*n:CountryName -> ({ ' usa ' })	#children:1[14,34]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:6[19,120]6	0.0	info:[8, 8, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ largest ( *n:City ) })	#children:5[18,150]5	0.0	info:[8, 7, 0, 18, 150, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:4[17,121]4	0.0	info:[5, 4, 0, 17, 121, 10, 0, 0]
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[16,122]3	0.0	info:[4, 3, 0, 16, 122, 10, 0, 0]
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	info:[3, 2, 1, 15, 123, 10, 0, 0]
					[
						child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[14,7]1	0.0	info:[3, 2, 1, 14, 7, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(smallest(city(loc_2(countryid('usa')))))
predic:	answer(largest(city(loc_2(stateid('northcarolina')))))
574:	false
=INPUT=
*LeaveRoot* what is the smallest city in the usa
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:6[19,120]6	0.0	null
	[
		child-0:*n:City -> ({ smallest ( *n:City ) })	#children:5[18,204]5	0.0	null
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:4[17,121]4	0.0	null
			[
				child-0:*n:City -> ({ loc_2 ( *n:Country ) })	#children:3[16,138]3	0.0	null
				[
					child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[15,137]2	0.0	null
					[
						child-0:*n:CountryName -> ({ ' usa ' })	#children:1[14,34]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:6[19,120]6	0.0	info:[8, 8, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ largest ( *n:City ) })	#children:5[18,150]5	0.0	info:[8, 7, 0, 18, 150, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:4[17,121]4	0.0	info:[5, 4, 0, 17, 121, 10, 0, 0]
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[16,122]3	0.0	info:[4, 3, 0, 16, 122, 10, 0, 0]
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	info:[3, 2, 1, 15, 123, 10, 0, 0]
					[
						child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[14,7]1	0.0	info:[3, 2, 1, 14, 7, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(smallest(city(loc_2(countryid('usa')))))
predic:	answer(largest(city(loc_2(stateid('northcarolina')))))
578:	false
=INPUT=
*LeaveRoot* what is the smallest state bordering wyoming
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	null
	[
		child-0:*n:State -> ({ smallest ( *n:State ) })	#children:5[18,165]5	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	null
			[
				child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[16,127]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' wyoming ' })	#children:1[14,69]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	info:[7, 7, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	info:[7, 6, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	info:[6, 5, 0, 17, 127, 10, 0, 0]
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	info:[5, 4, 1, 16, 123, 10, 0, 0]
				[
					child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[15,7]1	0.0	info:[5, 4, 1, 15, 7, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(smallest(state(next_to_2(stateid('wyoming')))))
predic:	answer(state(next_to_2(stateid('northcarolina'))))
582:	false
=INPUT=
*LeaveRoot* what is the smallest state that borders the most states
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	null
	[
		child-0:*n:State -> ({ smallest ( *n:State ) })	#children:5[18,165]5	0.0	null
		[
			child-0:*n:State -> ({ most ( *n:State ) })	#children:4[17,179]4	0.0	null
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:3[16,126]3	0.0	null
				[
					child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:2[15,127]2	0.0	null
					[
						child-0:*n:State -> ({ state ( all ) })	#children:1[14,141]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[10, 10, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	info:[10, 10, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ most ( *n:State ) })	#children:5[18,179]5	0.0	info:[9, 8, 0, 18, 179, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	info:[8, 7, 1, 17, 126, 10, 0, 0]
			[
				child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[16,127]3	0.0	info:[7, 5, 0, 16, 127, 10, 0, 0]
				[
					child-0:*n:State -> ({ smallest_one ( population_1 ( *n:State ) ) })	#children:2[15,200]2	0.0	info:[6, 2, 1, 15, 200, 10, 0, 0]
					[
						child-0:*n:State -> ({ state ( all ) })	#children:1[14,141]1	0.0	info:[6, 1, 0, 14, 141, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(smallest(most(state(next_to_2(state(all))))))
predic:	answer(most(state(next_to_2(smallest_one(population_1(state(all)))))))
583:	false
=INPUT=
*LeaveRoot* what is the smallest state that the mississippi river runs through
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:7[19,135]7	0.0	null
	[
		child-0:*n:State -> ({ smallest ( *n:State ) })	#children:6[18,165]6	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:5[17,126]5	0.0	null
			[
				child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:4[16,181]4	0.0	null
				[
					child-0:*n:River -> ({ river ( *n:River ) })	#children:3[15,129]3	0.0	null
					[
						child-0:*n:River -> ({ riverid ( *n:RiverName ) })	#children:2[14,152]2	0.0	null
						[
							child-0:*n:RiverName -> ({ ' mississippi ' })	#children:1[13,84]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[11, 11, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:6[19,144]6	0.0	info:[11, 11, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ population_1 ( *n:State ) })	#children:5[18,158]5	0.0	info:[10, 9, 0, 18, 158, 10, 0, 0]
		[
			child-0:*n:State -> ({ smallest ( *n:State ) })	#children:4[17,165]4	0.0	info:[9, 7, 1, 17, 165, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:3[16,126]3	0.0	info:[9, 6, 0, 16, 126, 10, 0, 0]
				[
					child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:2[15,181]2	0.0	info:[8, 5, 0, 15, 181, 10, 0, 0]
					[
						child-0:*n:River -> ({ river ( all ) })	#children:1[14,171]1	0.0	info:[7, 3, 1, 14, 171, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(smallest(state(traverse_1(river(riverid('mississippi'))))))
predic:	answer(population_1(smallest(state(traverse_1(river(all))))))
587:	false
=INPUT=
*LeaveRoot* what is the state with the largest area
=OUTPUT=
ROOT	#children:4[20,1000]4	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:3[19,135]3	0.0	null
	[
		child-0:*n:State -> ({ largest_one ( area_1 ( *n:State ) ) })	#children:2[18,187]2	0.0	null
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	null
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:3[19,120]3	0.0	info:[8, 8, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ largest ( *n:City ) })	#children:2[18,150]2	0.0	info:[7, 6, 0, 18, 150, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( all ) })	#children:1[17,160]1	0.0	info:[5, 4, 0, 17, 160, 9, 0, 0]
		]
	]
]

output:	answer(largest_one(area_1(state(all))))
predic:	answer(largest(city(all)))
593:	false
=INPUT=
*LeaveRoot* what is the state with the smallest area
=OUTPUT=
ROOT	#children:4[20,1000]4	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:3[19,135]3	0.0	null
	[
		child-0:*n:State -> ({ smallest_one ( area_1 ( *n:State ) ) })	#children:2[18,203]2	0.0	null
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	null
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:3[19,120]3	0.0	info:[8, 8, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ smallest ( *n:City ) })	#children:2[18,204]2	0.0	info:[7, 6, 0, 18, 204, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( all ) })	#children:1[17,160]1	0.0	info:[5, 4, 0, 17, 160, 9, 0, 0]
		]
	]
]

output:	answer(smallest_one(area_1(state(all))))
predic:	answer(smallest(city(all)))
597:	false
=INPUT=
*LeaveRoot* what is the total length of all rivers in the usa
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ sum ( *n:Num ) })	#children:3[18,192]3	0.0	null
		[
			child-0:*n:Num -> ({ len ( *n:River ) })	#children:2[17,151]2	0.0	null
			[
				child-0:*n:River -> ({ river ( all ) })	#children:1[16,171]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[11, 11, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	info:[11, 11, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ population_1 ( *n:City ) })	#children:3[18,159]3	0.0	info:[6, 5, 0, 18, 159, 10, 0, 0]
		[
			child-0:*n:City -> ({ largest ( *n:City ) })	#children:2[17,150]2	0.0	info:[5, 1, 1, 17, 150, 10, 0, 0]
			[
				child-0:*n:City -> ({ capital ( all ) })	#children:1[16,189]1	0.0	info:[5, 0, 1, 16, 189, 9, 0, 0]
			]
		]
	]
]

output:	answer(sum(len(river(all))))
predic:	answer(population_1(largest(capital(all))))
599:	false
=INPUT=
*LeaveRoot* what length is the mississippi
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	null
	[
		child-0:*n:Num -> ({ len ( *n:River ) })	#children:3[18,151]3	0.0	null
		[
			child-0:*n:River -> ({ riverid ( *n:RiverName ) })	#children:2[17,152]2	0.0	null
			[
				child-0:*n:RiverName -> ({ ' mississippi ' })	#children:1[16,84]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[5, 5, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:3[19,124]3	0.0	info:[5, 5, 1, 19, 124, 10, 0, 0]
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:2[18,132]2	0.0	info:[5, 4, 0, 18, 132, 10, 0, 0]
		[
			child-0:*n:Place -> ({ place ( all ) })	#children:1[17,168]1	0.0	info:[2, 1, 0, 17, 168, 9, 0, 0]
		]
	]
]

output:	answer(len(riverid('mississippi')))
predic:	answer(highest(place(all)))
600:	false
=INPUT=
*LeaveRoot* what major cities are located in pennsylvania
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:6[19,120]6	0.0	null
	[
		child-0:*n:City -> ({ major ( *n:City ) })	#children:5[18,156]5	0.0	null
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:4[17,121]4	0.0	null
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[16,122]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' pennsylvania ' })	#children:1[14,58]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:7[19,144]7	0.0	info:[7, 7, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ count ( *n:City ) })	#children:6[18,155]6	0.0	info:[7, 6, 0, 18, 155, 10, 0, 0]
		[
			child-0:*n:City -> ({ major ( *n:City ) })	#children:5[17,156]5	0.0	info:[6, 4, 1, 17, 156, 10, 0, 0]
			[
				child-0:*n:City -> ({ city ( *n:City ) })	#children:4[16,121]4	0.0	info:[6, 3, 1, 16, 121, 10, 0, 0]
				[
					child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[15,122]3	0.0	info:[6, 1, 1, 15, 122, 10, 0, 0]
					[
						child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[14,123]2	0.0	info:[6, 0, 1, 14, 123, 10, 0, 0]
						[
							child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[13,7]1	0.0	info:[6, 0, 1, 13, 7, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(major(city(loc_2(stateid('pennsylvania')))))
predic:	answer(count(major(city(loc_2(stateid('northcarolina'))))))
605:	true
=INPUT=
*LeaveRoot* what river flows through the most states
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:5[19,128]5	0.0	null
	[
		child-0:*n:River -> ({ most ( *n:River ) })	#children:4[18,202]4	0.0	null
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:3[17,129]3	0.0	null
			[
				child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:2[16,163]2	0.0	null
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:5[19,128]5	0.0	info:[7, 7, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ most ( *n:River ) })	#children:4[18,202]4	0.0	info:[7, 6, 0, 18, 202, 10, 0, 0]
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:3[17,129]3	0.0	info:[6, 4, 1, 17, 129, 10, 0, 0]
			[
				child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:2[16,163]2	0.0	info:[6, 2, 1, 16, 163, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	info:[6, 1, 0, 15, 141, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(most(river(traverse_2(state(all)))))
predic:	answer(most(river(traverse_2(state(all)))))
609:	false
=INPUT=
*LeaveRoot* what river runs through the state with the most cities
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:7[19,128]7	0.0	null
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:6[18,129]6	0.0	null
		[
			child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:5[17,163]5	0.0	null
			[
				child-0:*n:State -> ({ most ( *n:State ) })	#children:4[16,179]4	0.0	null
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:3[15,126]3	0.0	null
					[
						child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:2[14,172]2	0.0	null
						[
							child-0:*n:City -> ({ city ( all ) })	#children:1[13,160]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[10, 10, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:7[19,120]7	0.0	info:[10, 10, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ city ( *n:City ) })	#children:6[18,121]6	0.0	info:[10, 9, 0, 18, 121, 10, 0, 0]
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:5[17,122]5	0.0	info:[9, 7, 1, 17, 122, 10, 0, 0]
			[
				child-0:*n:State -> ({ most ( *n:State ) })	#children:4[16,179]4	0.0	info:[9, 6, 0, 16, 179, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:3[15,126]3	0.0	info:[8, 5, 1, 15, 126, 10, 0, 0]
					[
						child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:2[14,181]2	0.0	info:[8, 4, 1, 14, 181, 10, 0, 0]
						[
							child-0:*n:River -> ({ river ( all ) })	#children:1[13,171]1	0.0	info:[8, 1, 1, 13, 171, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(river(traverse_2(most(state(loc_1(city(all)))))))
predic:	answer(city(loc_2(most(state(traverse_1(river(all)))))))
612:	false
=INPUT=
*LeaveRoot* what river traverses the state which borders the most states
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:7[19,128]7	0.0	null
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:6[18,129]6	0.0	null
		[
			child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:5[17,163]5	0.0	null
			[
				child-0:*n:State -> ({ most ( *n:State ) })	#children:4[16,179]4	0.0	null
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:3[15,126]3	0.0	null
					[
						child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:2[14,127]2	0.0	null
						[
							child-0:*n:State -> ({ state ( all ) })	#children:1[13,141]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[10, 10, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:7[19,135]7	0.0	info:[10, 10, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ most ( *n:State ) })	#children:6[18,179]6	0.0	info:[9, 8, 0, 18, 179, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:5[17,126]5	0.0	info:[8, 7, 1, 17, 126, 10, 0, 0]
			[
				child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:4[16,181]4	0.0	info:[6, 4, 0, 16, 181, 10, 0, 0]
				[
					child-0:*n:River -> ({ river ( *n:River ) })	#children:3[15,129]3	0.0	info:[5, 3, 1, 15, 129, 10, 0, 0]
					[
						child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:2[14,163]2	0.0	info:[5, 2, 1, 14, 163, 10, 0, 0]
						[
							child-0:*n:State -> ({ state ( all ) })	#children:1[13,141]1	0.0	info:[5, 2, 1, 13, 141, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(river(traverse_2(most(state(next_to_2(state(all)))))))
predic:	answer(most(state(traverse_1(river(traverse_2(state(all)))))))
616:	false
=INPUT=
*LeaveRoot* what rivers are in states that border texas
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:7[19,128]7	0.0	null
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:6[18,129]6	0.0	null
		[
			child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:5[17,130]5	0.0	null
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:4[16,126]4	0.0	null
				[
					child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[15,127]3	0.0	null
					[
						child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[14,123]2	0.0	null
						[
							child-0:*n:StateName -> ({ ' texas ' })	#children:1[13,92]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:5[19,128]5	0.0	info:[8, 8, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:4[18,129]4	0.0	info:[8, 6, 1, 18, 129, 10, 0, 0]
		[
			child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:3[17,130]3	0.0	info:[8, 4, 1, 17, 130, 10, 0, 0]
			[
				child-0:*n:State -> ({ smallest ( *n:State ) })	#children:2[16,165]2	0.0	info:[8, 3, 0, 16, 165, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	info:[7, 2, 0, 15, 141, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(river(loc_2(state(next_to_2(stateid('texas'))))))
predic:	answer(river(loc_2(smallest(state(all)))))
617:	false
=INPUT=
*LeaveRoot* what rivers are in texas
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:5[19,128]5	0.0	null
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:4[18,129]4	0.0	null
		[
			child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:3[17,130]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' texas ' })	#children:1[15,92]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[5, 5, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:5[19,128]5	0.0	info:[5, 5, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:4[18,129]4	0.0	info:[2, 1, 0, 18, 129, 10, 0, 0]
		[
			child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:3[17,130]3	0.0	info:[1, 0, 1, 17, 130, 10, 0, 0]
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	info:[1, 0, 1, 16, 123, 10, 0, 0]
				[
					child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[15,7]1	0.0	info:[1, 0, 1, 15, 7, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(river(loc_2(stateid('texas'))))
predic:	answer(river(loc_2(stateid('northcarolina'))))
619:	false
=INPUT=
*LeaveRoot* what rivers are there in texas
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:5[19,128]5	0.0	null
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:4[18,129]4	0.0	null
		[
			child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:3[17,130]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' texas ' })	#children:1[15,92]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:5[19,128]5	0.0	info:[6, 6, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:4[18,129]4	0.0	info:[2, 1, 0, 18, 129, 10, 0, 0]
		[
			child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:3[17,130]3	0.0	info:[1, 0, 1, 17, 130, 10, 0, 0]
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	info:[1, 0, 1, 16, 123, 10, 0, 0]
				[
					child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[15,7]1	0.0	info:[1, 0, 1, 15, 7, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(river(loc_2(stateid('texas'))))
predic:	answer(river(loc_2(stateid('northcarolina'))))
632:	false
=INPUT=
*LeaveRoot* what rivers run through new york
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:5[19,128]5	0.0	null
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:4[18,129]4	0.0	null
		[
			child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:3[17,163]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' new york ' })	#children:1[15,112]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:4[19,128]4	0.0	info:[6, 6, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:3[18,129]3	0.0	info:[6, 4, 1, 18, 129, 10, 0, 0]
		[
			child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:2[17,163]2	0.0	info:[6, 2, 1, 17, 163, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( all ) })	#children:1[16,141]1	0.0	info:[6, 1, 0, 16, 141, 9, 0, 0]
			]
		]
	]
]

output:	answer(river(traverse_2(stateid('newyork'))))
predic:	answer(river(traverse_2(state(all))))
636:	false
=INPUT=
*LeaveRoot* what rivers traverses the state which borders the most states
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:7[19,128]7	0.0	null
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:6[18,129]6	0.0	null
		[
			child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:5[17,163]5	0.0	null
			[
				child-0:*n:State -> ({ most ( *n:State ) })	#children:4[16,179]4	0.0	null
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:3[15,126]3	0.0	null
					[
						child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:2[14,127]2	0.0	null
						[
							child-0:*n:State -> ({ state ( all ) })	#children:1[13,141]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[10, 10, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:7[19,135]7	0.0	info:[10, 10, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ most ( *n:State ) })	#children:6[18,179]6	0.0	info:[9, 8, 0, 18, 179, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:5[17,126]5	0.0	info:[8, 7, 1, 17, 126, 10, 0, 0]
			[
				child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:4[16,181]4	0.0	info:[6, 4, 0, 16, 181, 10, 0, 0]
				[
					child-0:*n:River -> ({ river ( *n:River ) })	#children:3[15,129]3	0.0	info:[5, 3, 1, 15, 129, 10, 0, 0]
					[
						child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:2[14,163]2	0.0	info:[5, 2, 1, 14, 163, 10, 0, 0]
						[
							child-0:*n:State -> ({ state ( all ) })	#children:1[13,141]1	0.0	info:[5, 2, 1, 13, 141, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(river(traverse_2(most(state(next_to_2(state(all)))))))
predic:	answer(most(state(traverse_1(river(traverse_2(state(all)))))))
637:	false
=INPUT=
*LeaveRoot* what state bordering nevada has the largest population
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	null
	[
		child-0:*n:State -> ({ largest_one ( population_1 ( *n:State ) ) })	#children:5[18,169]5	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	null
			[
				child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[16,127]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' nevada ' })	#children:1[14,27]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	info:[8, 8, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ largest ( *n:State ) })	#children:5[18,140]5	0.0	info:[7, 6, 0, 18, 140, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	info:[5, 4, 0, 17, 126, 10, 0, 0]
			[
				child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[16,127]3	0.0	info:[3, 2, 0, 16, 127, 10, 0, 0]
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	info:[2, 1, 1, 15, 123, 10, 0, 0]
					[
						child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[14,7]1	0.0	info:[2, 1, 1, 14, 7, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(largest_one(population_1(state(next_to_2(stateid('nevada'))))))
predic:	answer(largest(state(next_to_2(stateid('northcarolina')))))
640:	false
=INPUT=
*LeaveRoot* what state borders new york
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	null
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' new york ' })	#children:1[15,112]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[5, 5, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	info:[5, 5, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	info:[5, 4, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	info:[3, 2, 0, 17, 127, 10, 0, 0]
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	info:[2, 1, 1, 16, 123, 10, 0, 0]
				[
					child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[15,7]1	0.0	info:[2, 1, 1, 15, 7, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(state(next_to_2(stateid('newyork'))))
predic:	answer(state(next_to_2(stateid('northcarolina'))))
643:	false
=INPUT=
*LeaveRoot* what state borders the most states
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ most ( *n:State ) })	#children:4[18,179]4	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:3[17,126]3	0.0	null
			[
				child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:2[16,127]2	0.0	null
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:3[19,120]3	0.0	info:[6, 6, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ largest_one ( population_1 ( *n:City ) ) })	#children:2[18,188]2	0.0	info:[5, 4, 0, 18, 188, 10, 0, 0]
		[
			child-0:*n:City -> ({ capital ( all ) })	#children:1[17,189]1	0.0	info:[3, 2, 0, 17, 189, 9, 0, 0]
		]
	]
]

output:	answer(most(state(next_to_2(state(all)))))
predic:	answer(largest_one(population_1(capital(all))))
646:	false
=INPUT=
*LeaveRoot* what state contains the highest point of those the colorado river traverses
=OUTPUT=
ROOT	#children:12[20,1000]12	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:11[19,135]11	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:10[18,126]10	0.0	null
		[
			child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:9[17,167]9	0.0	null
			[
				child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:8[16,132]8	0.0	null
				[
					child-0:*n:Place -> ({ place ( *n:Place ) })	#children:7[15,133]7	0.0	null
					[
						child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:6[14,134]6	0.0	null
						[
							child-0:*n:State -> ({ state ( *n:State ) })	#children:5[13,126]5	0.0	null
							[
								child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:4[12,181]4	0.0	null
								[
									child-0:*n:River -> ({ river ( *n:River ) })	#children:3[11,129]3	0.0	null
									[
										child-0:*n:River -> ({ riverid ( *n:RiverName ) })	#children:2[10,152]2	0.0	null
										[
											child-0:*n:RiverName -> ({ ' colorado ' })	#children:1[9,110]1	0.0	null
										]
									]
								]
							]
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:9[20,1000]9	0.0	info:[12, 12, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:8[19,128]8	0.0	info:[12, 12, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:7[18,129]7	0.0	info:[11, 10, 0, 18, 129, 10, 0, 0]
		[
			child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:6[17,163]6	0.0	info:[10, 9, 1, 17, 163, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:5[16,126]5	0.0	info:[10, 7, 1, 16, 126, 10, 0, 0]
				[
					child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:4[15,167]4	0.0	info:[10, 5, 1, 15, 167, 10, 0, 0]
					[
						child-0:*n:Place -> ({ place ( *n:Place ) })	#children:3[14,133]3	0.0	info:[10, 4, 1, 14, 133, 10, 0, 0]
						[
							child-0:*n:Place -> ({ elevation_2 ( *n:Num ) })	#children:2[13,198]2	0.0	info:[10, 3, 0, 13, 198, 10, 0, 0]
							[
								child-0:*n:Num -> ({ 0 })	#children:1[12,199]1	1.6604833591444867E-213	info:[9, 1, 1, 12, 199, 9, 0, 0]
							]
						]
					]
				]
			]
		]
	]
]

output:	answer(state(loc_1(highest(place(loc_2(state(traverse_1(river(riverid('colorado'))))))))))
predic:	answer(river(traverse_2(state(loc_1(place(elevation_2(0)))))))
657:	false
=INPUT=
*LeaveRoot* what state has the largest area
=OUTPUT=
ROOT	#children:4[20,1000]4	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:3[19,135]3	0.0	null
	[
		child-0:*n:State -> ({ largest_one ( area_1 ( *n:State ) ) })	#children:2[18,187]2	0.0	null
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	null
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:3[19,135]3	0.0	info:[6, 6, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ largest_one ( population_1 ( *n:State ) ) })	#children:2[18,169]2	0.0	info:[5, 4, 0, 18, 169, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	info:[3, 2, 0, 17, 141, 9, 0, 0]
		]
	]
]

output:	answer(largest_one(area_1(state(all))))
predic:	answer(largest_one(population_1(state(all))))
658:	false
=INPUT=
*LeaveRoot* what state has the largest capital
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	null
		[
			child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[17,172]3	0.0	null
			[
				child-0:*n:City -> ({ largest ( *n:City ) })	#children:2[16,150]2	0.0	null
				[
					child-0:*n:City -> ({ capital ( all ) })	#children:1[15,189]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:3[19,135]3	0.0	info:[6, 6, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ largest_one ( population_1 ( *n:State ) ) })	#children:2[18,169]2	0.0	info:[5, 4, 0, 18, 169, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	info:[3, 2, 0, 17, 141, 9, 0, 0]
		]
	]
]

output:	answer(state(loc_1(largest(capital(all)))))
predic:	answer(largest_one(population_1(state(all))))
664:	false
=INPUT=
*LeaveRoot* what state has the longest river
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	null
		[
			child-0:*n:State -> ({ loc_1 ( *n:River ) })	#children:3[17,182]3	0.0	null
			[
				child-0:*n:River -> ({ longest ( *n:River ) })	#children:2[16,142]2	0.0	null
				[
					child-0:*n:River -> ({ river ( all ) })	#children:1[15,171]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:4[19,144]4	0.0	info:[6, 6, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ len ( *n:River ) })	#children:3[18,151]3	0.0	info:[6, 5, 0, 18, 151, 10, 0, 0]
		[
			child-0:*n:River -> ({ longest ( *n:River ) })	#children:2[17,142]2	0.0	info:[5, 4, 0, 17, 142, 10, 0, 0]
			[
				child-0:*n:River -> ({ river ( all ) })	#children:1[16,171]1	0.0	info:[3, 2, 0, 16, 171, 9, 0, 0]
			]
		]
	]
]

output:	answer(state(loc_1(longest(river(all)))))
predic:	answer(len(longest(river(all))))
665:	true
=INPUT=
*LeaveRoot* what state has the lowest population density
=OUTPUT=
ROOT	#children:4[20,1000]4	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:3[19,135]3	0.0	null
	[
		child-0:*n:State -> ({ smallest_one ( density_1 ( *n:State ) ) })	#children:2[18,194]2	0.0	null
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	null
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:3[19,135]3	0.0	info:[7, 7, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ smallest_one ( density_1 ( *n:State ) ) })	#children:2[18,194]2	0.0	info:[7, 6, 0, 18, 194, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	info:[6, 3, 1, 17, 141, 9, 0, 0]
		]
	]
]

output:	answer(smallest_one(density_1(state(all))))
predic:	answer(smallest_one(density_1(state(all))))
667:	false
=INPUT=
*LeaveRoot* what state has the most major cities
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	null
	[
		child-0:*n:State -> ({ most ( *n:State ) })	#children:5[18,179]5	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	null
			[
				child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[16,172]3	0.0	null
				[
					child-0:*n:City -> ({ major ( *n:City ) })	#children:2[15,156]2	0.0	null
					[
						child-0:*n:City -> ({ city ( all ) })	#children:1[14,160]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:9[20,1000]9	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:8[19,120]8	0.0	info:[7, 7, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ city ( *n:City ) })	#children:7[18,121]7	0.0	info:[7, 6, 0, 18, 121, 10, 0, 0]
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:6[17,122]6	0.0	info:[6, 5, 0, 17, 122, 10, 0, 0]
			[
				child-0:*n:State -> ({ most ( *n:State ) })	#children:5[16,179]5	0.0	info:[5, 4, 0, 16, 179, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:4[15,126]4	0.0	info:[4, 3, 1, 15, 126, 10, 0, 0]
					[
						child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[14,172]3	0.0	info:[4, 2, 1, 14, 172, 10, 0, 0]
						[
							child-0:*n:City -> ({ largest_one ( population_1 ( *n:City ) ) })	#children:2[13,188]2	0.0	info:[4, 1, 1, 13, 188, 10, 0, 0]
							[
								child-0:*n:City -> ({ city ( all ) })	#children:1[12,160]1	0.0	info:[4, 1, 1, 12, 160, 9, 0, 0]
							]
						]
					]
				]
			]
		]
	]
]

output:	answer(most(state(loc_1(major(city(all))))))
predic:	answer(city(loc_2(most(state(loc_1(largest_one(population_1(city(all)))))))))
670:	false
=INPUT=
*LeaveRoot* what state has the most rivers
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ most ( *n:State ) })	#children:4[18,179]4	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:3[17,126]3	0.0	null
			[
				child-0:*n:State -> ({ loc_1 ( *n:River ) })	#children:2[16,182]2	0.0	null
				[
					child-0:*n:River -> ({ river ( all ) })	#children:1[15,171]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:5[19,128]5	0.0	info:[6, 6, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:4[18,129]4	0.0	info:[6, 5, 0, 18, 129, 10, 0, 0]
		[
			child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:3[17,163]3	0.0	info:[5, 4, 1, 17, 163, 10, 0, 0]
			[
				child-0:*n:State -> ({ largest_one ( population_1 ( *n:State ) ) })	#children:2[16,169]2	0.0	info:[5, 3, 0, 16, 169, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	info:[3, 1, 0, 15, 141, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(most(state(loc_1(river(all)))))
predic:	answer(river(traverse_2(largest_one(population_1(state(all))))))
677:	false
=INPUT=
*LeaveRoot* what state has the smallest urban population
=OUTPUT=
ROOT	#children:4[20,1000]4	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:3[19,135]3	0.0	null
	[
		child-0:*n:State -> ({ smallest_one ( population_1 ( *n:State ) ) })	#children:2[18,200]2	0.0	null
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	null
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:3[19,135]3	0.0	info:[7, 7, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ largest_one ( population_1 ( *n:State ) ) })	#children:2[18,169]2	0.0	info:[7, 6, 0, 18, 169, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	info:[6, 5, 0, 17, 141, 9, 0, 0]
		]
	]
]

output:	answer(smallest_one(population_1(state(all))))
predic:	answer(largest_one(population_1(state(all))))
679:	false
=INPUT=
*LeaveRoot* what state is austin in
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	null
		[
			child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[17,172]3	0.0	null
			[
				child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[16,147]2	0.0	null
				[
					child-0:*n:CityName -> ({ ' austin ' })	#children:1[15,30]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[5, 5, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:3[19,128]3	0.0	info:[5, 5, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ shortest ( *n:River ) })	#children:2[18,153]2	0.0	info:[5, 4, 0, 18, 153, 10, 0, 0]
		[
			child-0:*n:River -> ({ river ( all ) })	#children:1[17,171]1	0.0	info:[4, 3, 0, 17, 171, 9, 0, 0]
		]
	]
]

output:	answer(state(loc_1(cityid('austin',_))))
predic:	answer(shortest(river(all)))
685:	false
=INPUT=
*LeaveRoot* what state is miami in
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	null
		[
			child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[17,172]3	0.0	null
			[
				child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[16,147]2	0.0	null
				[
					child-0:*n:CityName -> ({ ' miami ' })	#children:1[15,20]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[5, 5, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:3[19,128]3	0.0	info:[5, 5, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ shortest ( *n:River ) })	#children:2[18,153]2	0.0	info:[5, 4, 0, 18, 153, 10, 0, 0]
		[
			child-0:*n:River -> ({ river ( all ) })	#children:1[17,171]1	0.0	info:[4, 3, 0, 17, 171, 9, 0, 0]
		]
	]
]

output:	answer(state(loc_1(cityid('miami',_))))
predic:	answer(shortest(river(all)))
688:	false
=INPUT=
*LeaveRoot* what state is the largest in population
=OUTPUT=
ROOT	#children:4[20,1000]4	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:3[19,135]3	0.0	null
	[
		child-0:*n:State -> ({ largest_one ( population_1 ( *n:State ) ) })	#children:2[18,169]2	0.0	null
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	null
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:3[19,120]3	0.0	info:[7, 7, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ largest_one ( population_1 ( *n:City ) ) })	#children:2[18,188]2	0.0	info:[7, 6, 0, 18, 188, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( all ) })	#children:1[17,160]1	0.0	info:[5, 4, 0, 17, 160, 9, 0, 0]
		]
	]
]

output:	answer(largest_one(population_1(state(all))))
predic:	answer(largest_one(population_1(city(all))))
693:	false
=INPUT=
*LeaveRoot* what states are next to arizona
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	null
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' arizona ' })	#children:1[15,50]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	info:[6, 6, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	info:[5, 4, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	info:[4, 3, 0, 17, 127, 10, 0, 0]
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	info:[3, 2, 1, 16, 123, 10, 0, 0]
				[
					child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[15,7]1	0.0	info:[3, 2, 1, 15, 7, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(state(next_to_2(stateid('arizona'))))
predic:	answer(state(next_to_2(stateid('northcarolina'))))
699:	false
=INPUT=
*LeaveRoot* what states border florida
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	null
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' florida ' })	#children:1[15,13]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[4, 4, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	info:[4, 4, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	info:[4, 3, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	info:[3, 2, 0, 17, 127, 10, 0, 0]
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	info:[2, 1, 1, 16, 123, 10, 0, 0]
				[
					child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[15,7]1	0.0	info:[2, 1, 1, 15, 7, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(state(next_to_2(stateid('florida'))))
predic:	answer(state(next_to_2(stateid('northcarolina'))))
702:	false
=INPUT=
*LeaveRoot* what states border indiana
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	null
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' indiana ' })	#children:1[15,32]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[4, 4, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	info:[4, 4, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	info:[4, 3, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	info:[3, 2, 0, 17, 127, 10, 0, 0]
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	info:[2, 1, 1, 16, 123, 10, 0, 0]
				[
					child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[15,7]1	0.0	info:[2, 1, 1, 15, 7, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(state(next_to_2(stateid('indiana'))))
predic:	answer(state(next_to_2(stateid('northcarolina'))))
704:	false
=INPUT=
*LeaveRoot* what states border michigan
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	null
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' michigan ' })	#children:1[15,62]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[4, 4, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	info:[4, 4, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	info:[4, 3, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	info:[3, 2, 0, 17, 127, 10, 0, 0]
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	info:[2, 1, 1, 16, 123, 10, 0, 0]
				[
					child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[15,7]1	0.0	info:[2, 1, 1, 15, 7, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(state(next_to_2(stateid('michigan'))))
predic:	answer(state(next_to_2(stateid('northcarolina'))))
706:	false
=INPUT=
*LeaveRoot* what states border montana
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	null
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' montana ' })	#children:1[15,49]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[4, 4, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	info:[4, 4, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	info:[4, 3, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	info:[3, 2, 0, 17, 127, 10, 0, 0]
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	info:[2, 1, 1, 16, 123, 10, 0, 0]
				[
					child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[15,7]1	0.0	info:[2, 1, 1, 15, 7, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(state(next_to_2(stateid('montana'))))
predic:	answer(state(next_to_2(stateid('northcarolina'))))
708:	false
=INPUT=
*LeaveRoot* what states border new jersey
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	null
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' new jersey ' })	#children:1[15,23]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[5, 5, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	info:[5, 5, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	info:[5, 4, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	info:[3, 2, 0, 17, 127, 10, 0, 0]
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	info:[2, 1, 1, 16, 123, 10, 0, 0]
				[
					child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[15,7]1	0.0	info:[2, 1, 1, 15, 7, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(state(next_to_2(stateid('newjersey'))))
predic:	answer(state(next_to_2(stateid('northcarolina'))))
712:	false
=INPUT=
*LeaveRoot* what states border states that border mississippi
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:7[19,135]7	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:6[18,126]6	0.0	null
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:5[17,127]5	0.0	null
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:4[16,126]4	0.0	null
				[
					child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[15,127]3	0.0	null
					[
						child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[14,123]2	0.0	null
						[
							child-0:*n:StateName -> ({ ' mississippi ' })	#children:1[13,83]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:7[19,135]7	0.0	info:[7, 7, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:6[18,126]6	0.0	info:[7, 6, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:5[17,127]5	0.0	info:[6, 5, 0, 17, 127, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:4[16,126]4	0.0	info:[5, 4, 0, 16, 126, 10, 0, 0]
				[
					child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[15,127]3	0.0	info:[3, 2, 0, 15, 127, 10, 0, 0]
					[
						child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[14,123]2	0.0	info:[2, 1, 1, 14, 123, 10, 0, 0]
						[
							child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[13,7]1	0.0	info:[2, 1, 1, 13, 7, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(state(next_to_2(state(next_to_2(stateid('mississippi'))))))
predic:	answer(state(next_to_2(state(next_to_2(stateid('northcarolina'))))))
717:	false
=INPUT=
*LeaveRoot* what states border states that the ohio runs through
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:7[19,135]7	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:6[18,126]6	0.0	null
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:5[17,127]5	0.0	null
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:4[16,126]4	0.0	null
				[
					child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:3[15,181]3	0.0	null
					[
						child-0:*n:River -> ({ riverid ( *n:RiverName ) })	#children:2[14,152]2	0.0	null
						[
							child-0:*n:RiverName -> ({ ' ohio ' })	#children:1[13,42]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[9, 9, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	info:[9, 9, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	info:[8, 7, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	info:[3, 2, 0, 17, 127, 10, 0, 0]
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	info:[2, 1, 1, 16, 123, 10, 0, 0]
				[
					child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[15,7]1	0.0	info:[2, 1, 1, 15, 7, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(state(next_to_2(state(traverse_1(riverid('ohio'))))))
predic:	answer(state(next_to_2(stateid('northcarolina'))))
720:	false
=INPUT=
*LeaveRoot* what states border texas and have a major river
=OUTPUT=
ROOT	#children:10[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:9[19,135]6	0.0	null
	[
		child-0:*n:State -> ({ intersection ( *n:State , *n:State ) })	#children:8[18,178]5	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	null
			[
				child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[16,127]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' texas ' })	#children:1[14,92]1	0.0	null
					]
				]
			]
		]
		[
			child-0:*n:State -> ({ loc_1 ( *n:River ) })	#children:3[17,182]3	0.0	null
			[
				child-0:*n:River -> ({ major ( *n:River ) })	#children:2[16,162]2	0.0	null
				[
					child-0:*n:River -> ({ river ( all ) })	#children:1[15,171]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[9, 9, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:7[19,128]7	0.0	info:[9, 9, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:6[18,129]6	0.0	info:[9, 8, 0, 18, 129, 10, 0, 0]
		[
			child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:5[17,163]5	0.0	info:[8, 7, 1, 17, 163, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:4[16,126]4	0.0	info:[8, 6, 0, 16, 126, 10, 0, 0]
				[
					child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[15,127]3	0.0	info:[7, 4, 1, 15, 127, 10, 0, 0]
					[
						child-0:*n:State -> ({ smallest_one ( area_1 ( *n:State ) ) })	#children:2[14,203]2	0.0	info:[7, 3, 1, 14, 203, 10, 0, 0]
						[
							child-0:*n:State -> ({ state ( all ) })	#children:1[13,141]1	0.0	info:[7, 2, 1, 13, 141, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(intersection(state(next_to_2(stateid('texas'))),loc_1(major(river(all)))))
predic:	answer(river(traverse_2(state(next_to_2(smallest_one(area_1(state(all))))))))
722:	false
=INPUT=
*LeaveRoot* what states border the most populous state
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	null
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	null
			[
				child-0:*n:State -> ({ largest_one ( population_1 ( *n:State ) ) })	#children:2[16,169]2	0.0	null
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	info:[7, 7, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ largest ( *n:State ) })	#children:5[18,140]5	0.0	info:[7, 6, 0, 18, 140, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	info:[6, 5, 0, 17, 126, 10, 0, 0]
			[
				child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[16,127]3	0.0	info:[3, 2, 0, 16, 127, 10, 0, 0]
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	info:[2, 1, 1, 15, 123, 10, 0, 0]
					[
						child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[14,7]1	0.0	info:[2, 1, 1, 14, 7, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(state(next_to_2(largest_one(population_1(state(all))))))
predic:	answer(largest(state(next_to_2(stateid('northcarolina')))))
723:	false
=INPUT=
*LeaveRoot* what states border the state that borders the most states
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:7[19,135]7	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:6[18,126]6	0.0	null
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:5[17,127]5	0.0	null
			[
				child-0:*n:State -> ({ most ( *n:State ) })	#children:4[16,179]4	0.0	null
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:3[15,126]3	0.0	null
					[
						child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:2[14,127]2	0.0	null
						[
							child-0:*n:State -> ({ state ( all ) })	#children:1[13,141]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[10, 10, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	info:[10, 10, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	info:[7, 6, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	info:[3, 2, 0, 17, 127, 10, 0, 0]
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	info:[2, 1, 1, 16, 123, 10, 0, 0]
				[
					child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[15,7]1	0.0	info:[2, 1, 1, 15, 7, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(state(next_to_2(most(state(next_to_2(state(all)))))))
predic:	answer(state(next_to_2(stateid('northcarolina'))))
724:	false
=INPUT=
*LeaveRoot* what states border the state with the most cities
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:7[19,135]7	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:6[18,126]6	0.0	null
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:5[17,127]5	0.0	null
			[
				child-0:*n:State -> ({ most ( *n:State ) })	#children:4[16,179]4	0.0	null
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:3[15,126]3	0.0	null
					[
						child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:2[14,172]2	0.0	null
						[
							child-0:*n:City -> ({ city ( all ) })	#children:1[13,160]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[9, 9, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	info:[9, 9, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ most ( *n:State ) })	#children:4[18,179]4	0.0	info:[8, 7, 0, 18, 179, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:3[17,126]3	0.0	info:[7, 6, 1, 17, 126, 10, 0, 0]
			[
				child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:2[16,127]2	0.0	info:[7, 4, 1, 16, 127, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	info:[7, 1, 1, 15, 141, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(state(next_to_2(most(state(loc_1(city(all)))))))
predic:	answer(most(state(next_to_2(state(all)))))
725:	false
=INPUT=
*LeaveRoot* what states border the state with the most major cities
=OUTPUT=
ROOT	#children:9[20,1000]9	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:8[19,135]8	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:7[18,126]7	0.0	null
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:6[17,127]6	0.0	null
			[
				child-0:*n:State -> ({ most ( *n:State ) })	#children:5[16,179]5	0.0	null
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:4[15,126]4	0.0	null
					[
						child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[14,172]3	0.0	null
						[
							child-0:*n:City -> ({ major ( *n:City ) })	#children:2[13,156]2	0.0	null
							[
								child-0:*n:City -> ({ city ( all ) })	#children:1[12,160]1	0.0	null
							]
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[10, 10, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:7[19,120]7	0.0	info:[10, 10, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ city ( *n:City ) })	#children:6[18,121]6	0.0	info:[10, 9, 0, 18, 121, 10, 0, 0]
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:5[17,122]5	0.0	info:[9, 8, 0, 17, 122, 10, 0, 0]
			[
				child-0:*n:State -> ({ most ( *n:State ) })	#children:4[16,179]4	0.0	info:[8, 7, 0, 16, 179, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:3[15,126]3	0.0	info:[7, 6, 1, 15, 126, 10, 0, 0]
					[
						child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:2[14,127]2	0.0	info:[7, 4, 1, 14, 127, 10, 0, 0]
						[
							child-0:*n:State -> ({ state ( all ) })	#children:1[13,141]1	0.0	info:[7, 1, 1, 13, 141, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(state(next_to_2(most(state(loc_1(major(city(all))))))))
predic:	answer(city(loc_2(most(state(next_to_2(state(all)))))))
726:	false
=INPUT=
*LeaveRoot* what states border the state with the smallest area
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	null
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	null
			[
				child-0:*n:State -> ({ smallest_one ( area_1 ( *n:State ) ) })	#children:2[16,203]2	0.0	null
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[9, 9, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	info:[9, 9, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	info:[9, 8, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	info:[8, 5, 1, 17, 127, 10, 0, 0]
			[
				child-0:*n:State -> ({ smallest_one ( population_1 ( *n:State ) ) })	#children:2[16,200]2	0.0	info:[8, 4, 0, 16, 200, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	info:[6, 2, 0, 15, 141, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(state(next_to_2(smallest_one(area_1(state(all))))))
predic:	answer(state(next_to_2(smallest_one(population_1(state(all))))))
730:	false
=INPUT=
*LeaveRoot* what states contain at least one major rivers
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	null
		[
			child-0:*n:State -> ({ loc_1 ( *n:River ) })	#children:3[17,182]3	0.0	null
			[
				child-0:*n:River -> ({ major ( *n:River ) })	#children:2[16,162]2	0.0	null
				[
					child-0:*n:River -> ({ river ( all ) })	#children:1[15,171]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:5[19,128]5	0.0	info:[8, 8, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:4[18,129]4	0.0	info:[8, 7, 0, 18, 129, 10, 0, 0]
		[
			child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:3[17,130]3	0.0	info:[7, 4, 1, 17, 130, 10, 0, 0]
			[
				child-0:*n:State -> ({ smallest ( *n:State ) })	#children:2[16,165]2	0.0	info:[6, 2, 0, 16, 165, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	info:[5, 1, 0, 15, 141, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(state(loc_1(major(river(all)))))
predic:	answer(river(loc_2(smallest(state(all)))))
732:	false
=INPUT=
*LeaveRoot* what states does the delaware river run through
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:5[18,126]5	0.0	null
		[
			child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:4[17,181]4	0.0	null
			[
				child-0:*n:River -> ({ river ( *n:River ) })	#children:3[16,129]3	0.0	null
				[
					child-0:*n:River -> ({ riverid ( *n:RiverName ) })	#children:2[15,152]2	0.0	null
					[
						child-0:*n:RiverName -> ({ ' delaware ' })	#children:1[14,22]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:5[19,128]5	0.0	info:[8, 8, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:4[18,129]4	0.0	info:[6, 5, 0, 18, 129, 10, 0, 0]
		[
			child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:3[17,163]3	0.0	info:[5, 4, 1, 17, 163, 10, 0, 0]
			[
				child-0:*n:State -> ({ largest ( *n:State ) })	#children:2[16,140]2	0.0	info:[5, 2, 1, 16, 140, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	info:[5, 1, 0, 15, 141, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(state(traverse_1(river(riverid('delaware')))))
predic:	answer(river(traverse_2(largest(state(all)))))
733:	false
=INPUT=
*LeaveRoot* what states does the mississippi river run through
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:5[18,126]5	0.0	null
		[
			child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:4[17,181]4	0.0	null
			[
				child-0:*n:River -> ({ river ( *n:River ) })	#children:3[16,129]3	0.0	null
				[
					child-0:*n:River -> ({ riverid ( *n:RiverName ) })	#children:2[15,152]2	0.0	null
					[
						child-0:*n:RiverName -> ({ ' mississippi ' })	#children:1[14,84]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:4[19,135]4	0.0	info:[8, 8, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:3[18,126]3	0.0	info:[7, 6, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:2[17,181]2	0.0	info:[6, 1, 1, 17, 181, 10, 0, 0]
			[
				child-0:*n:River -> ({ river ( all ) })	#children:1[16,171]1	0.0	info:[6, 0, 1, 16, 171, 9, 0, 0]
			]
		]
	]
]

output:	answer(state(traverse_1(river(riverid('mississippi')))))
predic:	answer(state(traverse_1(river(all))))
736:	false
=INPUT=
*LeaveRoot* what states does the missouri run through
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	null
		[
			child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:3[17,181]3	0.0	null
			[
				child-0:*n:River -> ({ riverid ( *n:RiverName ) })	#children:2[16,152]2	0.0	null
				[
					child-0:*n:RiverName -> ({ ' missouri ' })	#children:1[15,115]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	info:[7, 7, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	info:[6, 5, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ next_to_1 ( *n:State ) })	#children:3[17,180]3	0.0	info:[3, 2, 0, 17, 180, 10, 0, 0]
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	info:[2, 1, 1, 16, 123, 10, 0, 0]
				[
					child-0:*n:StateName -> ({ ' north carolina ' })	#children:1[15,7]1	0.0	info:[2, 1, 1, 15, 7, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(state(traverse_1(riverid('missouri'))))
predic:	answer(state(next_to_1(stateid('northcarolina'))))
738:	false
=INPUT=
*LeaveRoot* what states does the ohio river run through
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:5[18,126]5	0.0	null
		[
			child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:4[17,181]4	0.0	null
			[
				child-0:*n:River -> ({ river ( *n:River ) })	#children:3[16,129]3	0.0	null
				[
					child-0:*n:River -> ({ riverid ( *n:RiverName ) })	#children:2[15,152]2	0.0	null
					[
						child-0:*n:RiverName -> ({ ' ohio ' })	#children:1[14,42]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:7[19,135]7	0.0	info:[8, 8, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:6[18,126]6	0.0	info:[7, 6, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:5[17,181]5	0.0	info:[6, 4, 1, 17, 181, 10, 0, 0]
			[
				child-0:*n:River -> ({ river ( *n:River ) })	#children:4[16,129]4	0.0	info:[6, 3, 0, 16, 129, 10, 0, 0]
				[
					child-0:*n:River -> ({ loc_2 ( *n:Country ) })	#children:3[15,154]3	0.0	info:[5, 1, 1, 15, 154, 10, 0, 0]
					[
						child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[14,137]2	0.0	info:[5, 1, 1, 14, 137, 10, 0, 0]
						[
							child-0:*n:CountryName -> ({ ' usa ' })	#children:1[13,34]1	0.0	info:[5, 1, 1, 13, 34, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(state(traverse_1(river(riverid('ohio')))))
predic:	answer(state(traverse_1(river(loc_2(countryid('usa'))))))
743:	false
=INPUT=
*LeaveRoot* what states have cities named dallas
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:5[18,126]5	0.0	null
		[
			child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:4[17,172]4	0.0	null
			[
				child-0:*n:City -> ({ city ( *n:City ) })	#children:3[16,121]3	0.0	null
				[
					child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[15,147]2	0.0	null
					[
						child-0:*n:CityName -> ({ ' dallas ' })	#children:1[14,36]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	info:[6, 6, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:5[18,126]5	0.0	info:[6, 5, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:4[17,172]4	0.0	info:[5, 4, 0, 17, 172, 10, 0, 0]
			[
				child-0:*n:City -> ({ city ( *n:City ) })	#children:3[16,121]3	0.0	info:[4, 3, 0, 16, 121, 10, 0, 0]
				[
					child-0:*n:City -> ({ capital_1 ( *n:State ) })	#children:2[15,201]2	0.0	info:[3, 2, 1, 15, 201, 10, 0, 0]
					[
						child-0:*n:State -> ({ state ( all ) })	#children:1[14,141]1	0.0	info:[3, 1, 0, 14, 141, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(state(loc_1(city(cityid('dallas',_)))))
predic:	answer(state(loc_1(city(capital_1(state(all))))))
744:	false
=INPUT=
*LeaveRoot* what states have cities named plano
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:5[18,126]5	0.0	null
		[
			child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:4[17,172]4	0.0	null
			[
				child-0:*n:City -> ({ city ( *n:City ) })	#children:3[16,121]3	0.0	null
				[
					child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[15,147]2	0.0	null
					[
						child-0:*n:CityName -> ({ ' plano ' })	#children:1[14,38]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	info:[6, 6, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:5[18,126]5	0.0	info:[6, 5, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:4[17,172]4	0.0	info:[5, 4, 0, 17, 172, 10, 0, 0]
			[
				child-0:*n:City -> ({ city ( *n:City ) })	#children:3[16,121]3	0.0	info:[4, 3, 0, 16, 121, 10, 0, 0]
				[
					child-0:*n:City -> ({ capital_1 ( *n:State ) })	#children:2[15,201]2	0.0	info:[3, 2, 1, 15, 201, 10, 0, 0]
					[
						child-0:*n:State -> ({ state ( all ) })	#children:1[14,141]1	0.0	info:[3, 1, 0, 14, 141, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(state(loc_1(city(cityid('plano',_)))))
predic:	answer(state(loc_1(city(capital_1(state(all))))))
745:	false
=INPUT=
*LeaveRoot* what states have cities named portland
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:5[18,126]5	0.0	null
		[
			child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:4[17,172]4	0.0	null
			[
				child-0:*n:City -> ({ city ( *n:City ) })	#children:3[16,121]3	0.0	null
				[
					child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[15,147]2	0.0	null
					[
						child-0:*n:CityName -> ({ ' portland ' })	#children:1[14,18]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	info:[6, 6, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:5[18,126]5	0.0	info:[6, 5, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:4[17,172]4	0.0	info:[5, 4, 0, 17, 172, 10, 0, 0]
			[
				child-0:*n:City -> ({ city ( *n:City ) })	#children:3[16,121]3	0.0	info:[4, 3, 0, 16, 121, 10, 0, 0]
				[
					child-0:*n:City -> ({ capital_1 ( *n:State ) })	#children:2[15,201]2	0.0	info:[3, 2, 1, 15, 201, 10, 0, 0]
					[
						child-0:*n:State -> ({ state ( all ) })	#children:1[14,141]1	0.0	info:[3, 1, 0, 14, 141, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(state(loc_1(city(cityid('portland',_)))))
predic:	answer(state(loc_1(city(capital_1(state(all))))))
746:	false
=INPUT=
*LeaveRoot* what states have cities named rochester
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:5[18,126]5	0.0	null
		[
			child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:4[17,172]4	0.0	null
			[
				child-0:*n:City -> ({ city ( *n:City ) })	#children:3[16,121]3	0.0	null
				[
					child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[15,147]2	0.0	null
					[
						child-0:*n:CityName -> ({ ' rochester ' })	#children:1[14,5]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	info:[6, 6, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:5[18,126]5	0.0	info:[6, 5, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:4[17,172]4	0.0	info:[5, 4, 0, 17, 172, 10, 0, 0]
			[
				child-0:*n:City -> ({ city ( *n:City ) })	#children:3[16,121]3	0.0	info:[4, 3, 0, 16, 121, 10, 0, 0]
				[
					child-0:*n:City -> ({ capital_1 ( *n:State ) })	#children:2[15,201]2	0.0	info:[3, 2, 1, 15, 201, 10, 0, 0]
					[
						child-0:*n:State -> ({ state ( all ) })	#children:1[14,141]1	0.0	info:[3, 1, 0, 14, 141, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(state(loc_1(city(cityid('rochester',_)))))
predic:	answer(state(loc_1(city(capital_1(state(all))))))
747:	false
=INPUT=
*LeaveRoot* what states have cities named salt lake city
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:5[18,126]5	0.0	null
		[
			child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:4[17,172]4	0.0	null
			[
				child-0:*n:City -> ({ city ( *n:City ) })	#children:3[16,121]3	0.0	null
				[
					child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[15,147]2	0.0	null
					[
						child-0:*n:CityName -> ({ ' salt lake city ' })	#children:1[14,72]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:6[19,120]6	0.0	info:[8, 8, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ city ( *n:City ) })	#children:5[18,121]5	0.0	info:[8, 7, 0, 18, 121, 10, 0, 0]
		[
			child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:4[17,122]4	0.0	info:[7, 3, 1, 17, 122, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:3[16,126]3	0.0	info:[7, 2, 0, 16, 126, 10, 0, 0]
				[
					child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:2[15,172]2	0.0	info:[6, 1, 1, 15, 172, 10, 0, 0]
					[
						child-0:*n:City -> ({ city ( all ) })	#children:1[14,160]1	0.0	info:[6, 0, 1, 14, 160, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(state(loc_1(city(cityid('saltlakecity',_)))))
predic:	answer(city(loc_2(state(loc_1(city(all))))))
755:	false
=INPUT=
*LeaveRoot* what states surround kentucky
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	null
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' kentucky ' })	#children:1[15,97]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[4, 4, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:3[19,120]3	0.0	info:[4, 4, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ largest_one ( population_1 ( *n:City ) ) })	#children:2[18,188]2	0.0	info:[4, 3, 0, 18, 188, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( all ) })	#children:1[17,160]1	0.0	info:[3, 2, 0, 17, 160, 9, 0, 0]
		]
	]
]

output:	answer(state(next_to_2(stateid('kentucky'))))
predic:	answer(largest_one(population_1(city(all))))
758:	false
=INPUT=
*LeaveRoot* where are mountains
=OUTPUT=
ROOT	#children:4[20,1000]4	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:3[19,135]3	0.0	null
	[
		child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:2[18,167]2	0.0	null
		[
			child-0:*n:Place -> ({ mountain ( all ) })	#children:1[17,0]1	0.0	null
		]
	]
]

=PREDICTION=
ROOT	#children:3[20,1000]3	0.0	info:[3, 3, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:2[19,135]2	0.0	info:[3, 3, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( all ) })	#children:1[18,141]1	0.0	info:[3, 2, 0, 18, 141, 9, 0, 0]
	]
]

output:	answer(loc_1(mountain(all)))
predic:	answer(state(all))
761:	false
=INPUT=
*LeaveRoot* where is dallas
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:4[19,135]4	0.0	null
	[
		child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[18,172]3	0.0	null
		[
			child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[17,147]2	0.0	null
			[
				child-0:*n:CityName -> ({ ' dallas ' })	#children:1[16,36]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[3, 3, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:4[19,135]4	0.0	info:[3, 3, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[18,172]3	0.0	info:[3, 2, 0, 18, 172, 10, 0, 0]
		[
			child-0:*n:City -> ({ major ( *n:City ) })	#children:2[17,156]2	0.0	info:[2, 1, 1, 17, 156, 10, 0, 0]
			[
				child-0:*n:City -> ({ city ( all ) })	#children:1[16,160]1	0.0	info:[2, 0, 1, 16, 160, 9, 0, 0]
			]
		]
	]
]

output:	answer(loc_1(cityid('dallas',_)))
predic:	answer(loc_1(major(city(all))))
770:	false
=INPUT=
*LeaveRoot* where is portland
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:4[19,135]4	0.0	null
	[
		child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[18,172]3	0.0	null
		[
			child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[17,147]2	0.0	null
			[
				child-0:*n:CityName -> ({ ' portland ' })	#children:1[16,18]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:3[20,1000]3	0.0	info:[3, 3, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:2[19,135]2	0.0	info:[3, 3, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( all ) })	#children:1[18,141]1	0.0	info:[3, 2, 0, 18, 141, 9, 0, 0]
	]
]

output:	answer(loc_1(cityid('portland',_)))
predic:	answer(state(all))
775:	false
=INPUT=
*LeaveRoot* where is the chattahoochee river
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ loc_1 ( *n:River ) })	#children:4[18,182]4	0.0	null
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:3[17,129]3	0.0	null
			[
				child-0:*n:River -> ({ riverid ( *n:RiverName ) })	#children:2[16,152]2	0.0	null
				[
					child-0:*n:RiverName -> ({ ' chattahoochee ' })	#children:1[15,82]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[5, 5, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:3[19,135]3	0.0	info:[5, 5, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ largest ( *n:State ) })	#children:2[18,140]2	0.0	info:[5, 4, 0, 18, 140, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	info:[4, 3, 0, 17, 141, 9, 0, 0]
		]
	]
]

output:	answer(loc_1(river(riverid('chattahoochee'))))
predic:	answer(largest(state(all)))
776:	false
=INPUT=
*LeaveRoot* where is the highest mountain of the united states
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:6[19,124]6	0.0	null
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:5[18,132]5	0.0	null
		[
			child-0:*n:Place -> ({ mountain ( *n:Place ) })	#children:4[17,197]4	0.0	null
			[
				child-0:*n:Place -> ({ loc_2 ( *n:Country ) })	#children:3[16,183]3	0.0	null
				[
					child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[15,137]2	0.0	null
					[
						child-0:*n:CountryName -> ({ ' usa ' })	#children:1[14,34]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[9, 9, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	info:[9, 9, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:5[18,172]5	0.0	info:[8, 7, 0, 18, 172, 10, 0, 0]
		[
			child-0:*n:City -> ({ capital ( *n:City ) })	#children:4[17,131]4	0.0	info:[6, 5, 0, 17, 131, 10, 0, 0]
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[16,122]3	0.0	info:[5, 4, 1, 16, 122, 10, 0, 0]
				[
					child-0:*n:State -> ({ largest_one ( density_1 ( *n:State ) ) })	#children:2[15,166]2	0.0	info:[5, 1, 1, 15, 166, 10, 0, 0]
					[
						child-0:*n:State -> ({ state ( all ) })	#children:1[14,141]1	0.0	info:[5, 0, 1, 14, 141, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(highest(mountain(loc_2(countryid('usa')))))
predic:	answer(loc_1(capital(loc_2(largest_one(density_1(state(all)))))))
777:	false
=INPUT=
*LeaveRoot* where is the highest point in hawaii
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:6[19,124]6	0.0	null
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:5[18,132]5	0.0	null
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[17,133]4	0.0	null
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:3[16,134]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' hawaii ' })	#children:1[14,101]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:5[19,124]5	0.0	info:[7, 7, 1, 19, 124, 10, 0, 0]
	[
		child-0:*n:Place -> ({ lowest ( *n:Place ) })	#children:4[18,186]4	0.0	info:[7, 6, 0, 18, 186, 10, 0, 0]
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:3[17,133]3	0.0	info:[5, 4, 0, 17, 133, 10, 0, 0]
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:2[16,134]2	0.0	info:[4, 3, 0, 16, 134, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	info:[3, 2, 1, 15, 141, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(highest(place(loc_2(stateid('hawaii')))))
predic:	answer(lowest(place(loc_2(state(all)))))
779:	false
=INPUT=
*LeaveRoot* where is the lowest point in maryland
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:6[19,124]6	0.0	null
	[
		child-0:*n:Place -> ({ lowest ( *n:Place ) })	#children:5[18,186]5	0.0	null
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:4[17,133]4	0.0	null
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:3[16,134]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' maryland ' })	#children:1[14,75]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:5[19,124]5	0.0	info:[7, 7, 1, 19, 124, 10, 0, 0]
	[
		child-0:*n:Place -> ({ lowest ( *n:Place ) })	#children:4[18,186]4	0.0	info:[7, 6, 0, 18, 186, 10, 0, 0]
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:3[17,133]3	0.0	info:[5, 4, 0, 17, 133, 10, 0, 0]
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:2[16,134]2	0.0	info:[4, 3, 0, 16, 134, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	info:[3, 2, 1, 15, 141, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(lowest(place(loc_2(stateid('maryland')))))
predic:	answer(lowest(place(loc_2(state(all)))))
782:	false
=INPUT=
*LeaveRoot* where is the most populated area of new mexico
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:6[19,120]6	0.0	null
	[
		child-0:*n:City -> ({ largest_one ( population_1 ( *n:City ) ) })	#children:5[18,188]5	0.0	null
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:4[17,121]4	0.0	null
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[16,122]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' new mexico ' })	#children:1[14,40]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:9[20,1000]9	0.0	info:[9, 9, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:8[19,135]8	0.0	info:[9, 9, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:7[18,172]7	0.0	info:[9, 8, 0, 18, 172, 10, 0, 0]
		[
			child-0:*n:City -> ({ capital ( *n:City ) })	#children:6[17,131]6	0.0	info:[7, 6, 0, 17, 131, 10, 0, 0]
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:5[16,122]5	0.0	info:[6, 5, 1, 16, 122, 10, 0, 0]
				[
					child-0:*n:State -> ({ most ( *n:State ) })	#children:4[15,179]4	0.0	info:[6, 2, 1, 15, 179, 10, 0, 0]
					[
						child-0:*n:State -> ({ state ( *n:State ) })	#children:3[14,126]3	0.0	info:[6, 2, 1, 14, 126, 10, 0, 0]
						[
							child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:2[13,181]2	0.0	info:[6, 1, 0, 13, 181, 10, 0, 0]
							[
								child-0:*n:River -> ({ river ( all ) })	#children:1[12,171]1	0.0	info:[5, 0, 1, 12, 171, 9, 0, 0]
							]
						]
					]
				]
			]
		]
	]
]

output:	answer(largest_one(population_1(city(loc_2(stateid('newmexico'))))))
predic:	answer(loc_1(capital(loc_2(most(state(traverse_1(river(all))))))))
783:	false
=INPUT=
*LeaveRoot* where is the smallest city
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:4[19,135]4	0.0	null
	[
		child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[18,172]3	0.0	null
		[
			child-0:*n:City -> ({ smallest ( *n:City ) })	#children:2[17,204]2	0.0	null
			[
				child-0:*n:City -> ({ city ( all ) })	#children:1[16,160]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[5, 5, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	info:[5, 5, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:5[18,172]5	0.0	info:[5, 4, 1, 18, 172, 10, 0, 0]
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:4[17,121]4	0.0	info:[5, 3, 0, 17, 121, 10, 0, 0]
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[16,122]3	0.0	info:[4, 2, 1, 16, 122, 10, 0, 0]
				[
					child-0:*n:State -> ({ largest_one ( density_1 ( *n:State ) ) })	#children:2[15,166]2	0.0	info:[4, 1, 1, 15, 166, 10, 0, 0]
					[
						child-0:*n:State -> ({ state ( all ) })	#children:1[14,141]1	0.0	info:[4, 0, 1, 14, 141, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(loc_1(smallest(city(all))))
predic:	answer(loc_1(city(loc_2(largest_one(density_1(state(all)))))))
786:	false
=INPUT=
*LeaveRoot* which city in california has the largest population
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:6[19,120]6	0.0	null
	[
		child-0:*n:City -> ({ largest_one ( population_1 ( *n:City ) ) })	#children:5[18,188]5	0.0	null
		[
			child-0:*n:City -> ({ city ( *n:City ) })	#children:4[17,121]4	0.0	null
			[
				child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[16,122]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' california ' })	#children:1[14,19]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	info:[8, 8, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:5[18,126]5	0.0	info:[8, 7, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:4[17,127]4	0.0	info:[7, 6, 0, 17, 127, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:3[16,126]3	0.0	info:[6, 4, 1, 16, 126, 10, 0, 0]
				[
					child-0:*n:State -> ({ loc_1 ( *n:River ) })	#children:2[15,182]2	0.0	info:[5, 2, 0, 15, 182, 10, 0, 0]
					[
						child-0:*n:River -> ({ river ( all ) })	#children:1[14,171]1	0.0	info:[4, 1, 0, 14, 171, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(largest_one(population_1(city(loc_2(stateid('california'))))))
predic:	answer(state(next_to_2(state(loc_1(river(all))))))
787:	false
=INPUT=
*LeaveRoot* which is the density of the state that the largest river in the united states runs through
=OUTPUT=
ROOT	#children:10[20,1000]10	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:9[19,144]9	0.0	null
	[
		child-0:*n:Num -> ({ density_1 ( *n:State ) })	#children:8[18,196]8	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:7[17,126]7	0.0	null
			[
				child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:6[16,181]6	0.0	null
				[
					child-0:*n:River -> ({ longest ( *n:River ) })	#children:5[15,142]5	0.0	null
					[
						child-0:*n:River -> ({ river ( *n:River ) })	#children:4[14,129]4	0.0	null
						[
							child-0:*n:River -> ({ loc_2 ( *n:Country ) })	#children:3[13,154]3	0.0	null
							[
								child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[12,137]2	0.0	null
								[
									child-0:*n:CountryName -> ({ ' usa ' })	#children:1[11,34]1	0.0	null
								]
							]
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:13[20,1000]13	0.0	info:[17, 17, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:12[19,135]12	0.0	info:[17, 17, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:11[18,126]11	0.0	info:[16, 15, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:10[17,127]10	0.0	info:[14, 13, 0, 17, 127, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:9[16,126]9	0.0	info:[12, 11, 0, 16, 126, 10, 0, 0]
				[
					child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:8[15,181]8	0.0	info:[11, 10, 1, 15, 181, 10, 0, 0]
					[
						child-0:*n:River -> ({ river ( *n:River ) })	#children:7[14,129]7	0.0	info:[11, 9, 0, 14, 129, 10, 0, 0]
						[
							child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:6[13,130]6	0.0	info:[10, 6, 1, 13, 130, 10, 0, 0]
							[
								child-0:*n:State -> ({ most ( *n:State ) })	#children:5[12,179]5	0.0	info:[10, 5, 1, 12, 179, 10, 0, 0]
								[
									child-0:*n:State -> ({ state ( *n:State ) })	#children:4[11,126]4	0.0	info:[10, 5, 1, 11, 126, 10, 0, 0]
									[
										child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[10,172]3	0.0	info:[10, 3, 1, 10, 172, 10, 0, 0]
										[
											child-0:*n:City -> ({ largest ( *n:City ) })	#children:2[9,150]2	0.0	info:[10, 2, 0, 9, 150, 10, 0, 0]
											[
												child-0:*n:City -> ({ capital ( all ) })	#children:1[8,189]1	0.0	info:[9, 1, 1, 8, 189, 9, 0, 0]
											]
										]
									]
								]
							]
						]
					]
				]
			]
		]
	]
]

output:	answer(density_1(state(traverse_1(longest(river(loc_2(countryid('usa'))))))))
predic:	answer(state(next_to_2(state(traverse_1(river(loc_2(most(state(loc_1(largest(capital(all))))))))))))
788:	false
=INPUT=
*LeaveRoot* which is the highest peak not in alaska
=OUTPUT=
ROOT	#children:8[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:Place ) })	#children:7[19,124]6	0.0	null
	[
		child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:6[18,132]5	0.0	null
		[
			child-0:*n:Place -> ({ exclude ( *n:Place , *n:Place ) })	#children:5[17,0]4	0.0	null
			[
				child-0:*n:Place -> ({ mountain ( all ) })	#children:1[16,0]1	0.0	null
			]
			[
				child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:3[16,134]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' alaska ' })	#children:1[14,80]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	info:[8, 8, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:4[18,167]4	0.0	info:[8, 7, 0, 18, 167, 10, 0, 0]
		[
			child-0:*n:Place -> ({ place ( *n:Place ) })	#children:3[17,133]3	0.0	info:[7, 3, 1, 17, 133, 10, 0, 0]
			[
				child-0:*n:Place -> ({ elevation_2 ( *n:Num ) })	#children:2[16,198]2	0.0	info:[6, 1, 0, 16, 198, 10, 0, 0]
				[
					child-0:*n:Num -> ({ 0 })	#children:1[15,199]1	1.604344666721873E-154	info:[5, 0, 1, 15, 199, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(highest(exclude(mountain(all),loc_2(stateid('alaska')))))
predic:	answer(loc_1(place(elevation_2(0))))
789:	false
=INPUT=
*LeaveRoot* which is the longest river in usa
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:6[19,128]6	0.0	null
	[
		child-0:*n:River -> ({ longest ( *n:River ) })	#children:5[18,142]5	0.0	null
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:4[17,129]4	0.0	null
			[
				child-0:*n:River -> ({ loc_2 ( *n:Country ) })	#children:3[16,154]3	0.0	null
				[
					child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[15,137]2	0.0	null
					[
						child-0:*n:CountryName -> ({ ' usa ' })	#children:1[14,34]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:4[19,135]4	0.0	info:[7, 7, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:3[18,167]3	0.0	info:[7, 6, 0, 18, 167, 10, 0, 0]
		[
			child-0:*n:Place -> ({ lowest ( *n:Place ) })	#children:2[17,186]2	0.0	info:[5, 4, 0, 17, 186, 10, 0, 0]
			[
				child-0:*n:Place -> ({ place ( all ) })	#children:1[16,168]1	0.0	info:[4, 3, 0, 16, 168, 9, 0, 0]
			]
		]
	]
]

output:	answer(longest(river(loc_2(countryid('usa')))))
predic:	answer(loc_1(lowest(place(all))))
792:	false
=INPUT=
*LeaveRoot* which is the smallest state
=OUTPUT=
ROOT	#children:4[20,1000]4	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:3[19,135]3	0.0	null
	[
		child-0:*n:State -> ({ smallest ( *n:State ) })	#children:2[18,165]2	0.0	null
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	null
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[5, 5, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:4[19,135]4	0.0	info:[5, 5, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[18,172]3	0.0	info:[5, 4, 0, 18, 172, 10, 0, 0]
		[
			child-0:*n:City -> ({ largest ( *n:City ) })	#children:2[17,150]2	0.0	info:[4, 3, 0, 17, 150, 10, 0, 0]
			[
				child-0:*n:City -> ({ capital ( all ) })	#children:1[16,189]1	0.0	info:[3, 2, 1, 16, 189, 9, 0, 0]
			]
		]
	]
]

output:	answer(smallest(state(all)))
predic:	answer(loc_1(largest(capital(all))))
793:	false
=INPUT=
*LeaveRoot* which of the states bordering pennsylvania has the largest population
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	null
	[
		child-0:*n:State -> ({ largest_one ( population_1 ( *n:State ) ) })	#children:5[18,169]5	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	null
			[
				child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[16,127]3	0.0	null
				[
					child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[15,123]2	0.0	null
					[
						child-0:*n:StateName -> ({ ' pennsylvania ' })	#children:1[14,58]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[10, 10, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:7[19,135]7	0.0	info:[10, 10, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:6[18,126]6	0.0	info:[10, 9, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:5[17,127]5	0.0	info:[9, 8, 0, 17, 127, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:4[16,126]4	0.0	info:[8, 6, 1, 16, 126, 10, 0, 0]
				[
					child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[15,127]3	0.0	info:[8, 3, 1, 15, 127, 10, 0, 0]
					[
						child-0:*n:State -> ({ smallest_one ( area_1 ( *n:State ) ) })	#children:2[14,203]2	0.0	info:[8, 2, 1, 14, 203, 10, 0, 0]
						[
							child-0:*n:State -> ({ state ( all ) })	#children:1[13,141]1	0.0	info:[8, 1, 1, 13, 141, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(largest_one(population_1(state(next_to_2(stateid('pennsylvania'))))))
predic:	answer(state(next_to_2(state(next_to_2(smallest_one(area_1(state(all))))))))
794:	true
=INPUT=
*LeaveRoot* which river goes through the most states
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:5[19,128]5	0.0	null
	[
		child-0:*n:River -> ({ most ( *n:River ) })	#children:4[18,202]4	0.0	null
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:3[17,129]3	0.0	null
			[
				child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:2[16,163]2	0.0	null
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:5[19,128]5	0.0	info:[7, 7, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ most ( *n:River ) })	#children:4[18,202]4	0.0	info:[7, 6, 0, 18, 202, 10, 0, 0]
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:3[17,129]3	0.0	info:[6, 4, 1, 17, 129, 10, 0, 0]
			[
				child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:2[16,163]2	0.0	info:[6, 2, 1, 16, 163, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	info:[6, 1, 0, 15, 141, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(most(river(traverse_2(state(all)))))
predic:	answer(most(river(traverse_2(state(all)))))
795:	true
=INPUT=
*LeaveRoot* which river runs through most states
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:5[19,128]5	0.0	null
	[
		child-0:*n:River -> ({ most ( *n:River ) })	#children:4[18,202]4	0.0	null
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:3[17,129]3	0.0	null
			[
				child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:2[16,163]2	0.0	null
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:5[19,128]5	0.0	info:[6, 6, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ most ( *n:River ) })	#children:4[18,202]4	0.0	info:[6, 5, 0, 18, 202, 10, 0, 0]
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:3[17,129]3	0.0	info:[5, 3, 1, 17, 129, 10, 0, 0]
			[
				child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:2[16,163]2	0.0	info:[5, 1, 1, 16, 163, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	info:[5, 0, 1, 15, 141, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(most(river(traverse_2(state(all)))))
predic:	answer(most(river(traverse_2(state(all)))))
797:	true
=INPUT=
*LeaveRoot* which river traverses most states
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:5[19,128]5	0.0	null
	[
		child-0:*n:River -> ({ most ( *n:River ) })	#children:4[18,202]4	0.0	null
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:3[17,129]3	0.0	null
			[
				child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:2[16,163]2	0.0	null
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[5, 5, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:5[19,128]5	0.0	info:[5, 5, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ most ( *n:River ) })	#children:4[18,202]4	0.0	info:[5, 4, 0, 18, 202, 10, 0, 0]
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:3[17,129]3	0.0	info:[4, 2, 1, 17, 129, 10, 0, 0]
			[
				child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:2[16,163]2	0.0	info:[4, 1, 1, 16, 163, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	info:[4, 1, 1, 15, 141, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(most(river(traverse_2(state(all)))))
predic:	answer(most(river(traverse_2(state(all)))))
799:	false
=INPUT=
*LeaveRoot* which rivers do not run through texas
=OUTPUT=
ROOT	#children:7[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:6[19,128]5	0.0	null
	[
		child-0:*n:River -> ({ exclude ( *n:River , *n:River ) })	#children:5[18,170]4	0.0	null
		[
			child-0:*n:River -> ({ river ( all ) })	#children:1[17,171]1	0.0	null
		]
		[
			child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:3[17,163]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' texas ' })	#children:1[15,92]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:7[19,128]7	0.0	info:[7, 7, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ major ( *n:River ) })	#children:6[18,162]6	0.0	info:[7, 6, 0, 18, 162, 10, 0, 0]
		[
			child-0:*n:River -> ({ river ( *n:River ) })	#children:5[17,129]5	0.0	info:[6, 5, 0, 17, 129, 10, 0, 0]
			[
				child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:4[16,163]4	0.0	info:[5, 3, 1, 16, 163, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:3[15,126]3	0.0	info:[5, 2, 0, 15, 126, 10, 0, 0]
					[
						child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:2[14,172]2	0.0	info:[4, 1, 1, 14, 172, 10, 0, 0]
						[
							child-0:*n:City -> ({ city ( all ) })	#children:1[13,160]1	0.0	info:[4, 0, 1, 13, 160, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(exclude(river(all),traverse_2(stateid('texas'))))
predic:	answer(major(river(traverse_2(state(loc_1(city(all)))))))
800:	false
=INPUT=
*LeaveRoot* which rivers do not run through usa
=OUTPUT=
ROOT	#children:7[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:6[19,128]5	0.0	null
	[
		child-0:*n:River -> ({ exclude ( *n:River , *n:River ) })	#children:5[18,170]4	0.0	null
		[
			child-0:*n:River -> ({ river ( all ) })	#children:1[17,171]1	0.0	null
		]
		[
			child-0:*n:River -> ({ traverse_2 ( *n:Country ) })	#children:3[17,143]3	0.0	null
			[
				child-0:*n:Country -> ({ countryid ( *n:CountryName ) })	#children:2[16,137]2	0.0	null
				[
					child-0:*n:CountryName -> ({ ' usa ' })	#children:1[15,34]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:7[19,128]7	0.0	info:[7, 7, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:6[18,129]6	0.0	info:[7, 5, 1, 18, 129, 10, 0, 0]
		[
			child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:5[17,130]5	0.0	info:[7, 3, 1, 17, 130, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:4[16,126]4	0.0	info:[7, 2, 1, 16, 126, 10, 0, 0]
				[
					child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:3[15,167]3	0.0	info:[7, 1, 0, 15, 167, 10, 0, 0]
					[
						child-0:*n:Place -> ({ lowest ( *n:Place ) })	#children:2[14,186]2	0.0	info:[6, 0, 1, 14, 186, 10, 0, 0]
						[
							child-0:*n:Place -> ({ place ( all ) })	#children:1[13,168]1	0.0	info:[6, 0, 1, 13, 168, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(exclude(river(all),traverse_2(countryid('usa'))))
predic:	answer(river(loc_2(state(loc_1(lowest(place(all)))))))
803:	false
=INPUT=
*LeaveRoot* which rivers run through states that border the state with the capital austin
=OUTPUT=
ROOT	#children:11[20,1000]11	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:10[19,128]10	0.0	null
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:9[18,129]9	0.0	null
		[
			child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:8[17,163]8	0.0	null
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:7[16,126]7	0.0	null
				[
					child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:6[15,127]6	0.0	null
					[
						child-0:*n:State -> ({ state ( *n:State ) })	#children:5[14,126]5	0.0	null
						[
							child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:4[13,172]4	0.0	null
							[
								child-0:*n:City -> ({ capital ( *n:City ) })	#children:3[12,131]3	0.0	null
								[
									child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[11,147]2	0.0	null
									[
										child-0:*n:CityName -> ({ ' austin ' })	#children:1[10,30]1	0.0	null
									]
								]
							]
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:9[20,1000]9	0.0	info:[13, 13, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:8[19,135]8	0.0	info:[13, 13, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:7[18,126]7	0.0	info:[13, 12, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:6[17,181]6	0.0	info:[12, 11, 1, 17, 181, 10, 0, 0]
			[
				child-0:*n:River -> ({ river ( *n:River ) })	#children:5[16,129]5	0.0	info:[12, 10, 1, 16, 129, 10, 0, 0]
				[
					child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:4[15,163]4	0.0	info:[12, 8, 1, 15, 163, 10, 0, 0]
					[
						child-0:*n:State -> ({ state ( *n:State ) })	#children:3[14,126]3	0.0	info:[12, 7, 0, 14, 126, 10, 0, 0]
						[
							child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:2[13,127]2	0.0	info:[11, 4, 1, 13, 127, 10, 0, 0]
							[
								child-0:*n:State -> ({ state ( all ) })	#children:1[12,141]1	0.0	info:[11, 1, 1, 12, 141, 9, 0, 0]
							]
						]
					]
				]
			]
		]
	]
]

output:	answer(river(traverse_2(state(next_to_2(state(loc_1(capital(cityid('austin',_)))))))))
predic:	answer(state(traverse_1(river(traverse_2(state(next_to_2(state(all))))))))
804:	false
=INPUT=
*LeaveRoot* which rivers run through states with fewest cities
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:7[19,128]7	0.0	null
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:6[18,129]6	0.0	null
		[
			child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:5[17,163]5	0.0	null
			[
				child-0:*n:State -> ({ fewest ( *n:State ) })	#children:4[16,206]4	0.0	null
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:3[15,126]3	0.0	null
					[
						child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:2[14,172]2	0.0	null
						[
							child-0:*n:City -> ({ city ( all ) })	#children:1[13,160]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:10[20,1000]10	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:9[19,135]9	0.0	info:[8, 8, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:8[18,126]8	0.0	info:[8, 7, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:7[17,181]7	0.0	info:[7, 6, 1, 17, 181, 10, 0, 0]
			[
				child-0:*n:River -> ({ river ( *n:River ) })	#children:6[16,129]6	0.0	info:[7, 5, 1, 16, 129, 10, 0, 0]
				[
					child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:5[15,130]5	0.0	info:[7, 4, 1, 15, 130, 10, 0, 0]
					[
						child-0:*n:State -> ({ state ( *n:State ) })	#children:4[14,126]4	0.0	info:[7, 4, 1, 14, 126, 10, 0, 0]
						[
							child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:3[13,167]3	0.0	info:[7, 3, 0, 13, 167, 10, 0, 0]
							[
								child-0:*n:Place -> ({ lowest ( *n:Place ) })	#children:2[12,186]2	0.0	info:[6, 2, 1, 12, 186, 10, 0, 0]
								[
									child-0:*n:Place -> ({ place ( all ) })	#children:1[11,168]1	0.0	info:[6, 1, 0, 11, 168, 9, 0, 0]
								]
							]
						]
					]
				]
			]
		]
	]
]

output:	answer(river(traverse_2(fewest(state(loc_1(city(all)))))))
predic:	answer(state(traverse_1(river(loc_2(state(loc_1(lowest(place(all)))))))))
809:	false
=INPUT=
*LeaveRoot* which state borders hawaii
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	null
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' hawaii ' })	#children:1[15,101]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[4, 4, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:4[19,135]4	0.0	info:[4, 4, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:3[18,126]3	0.0	info:[4, 3, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:2[17,127]2	0.0	info:[3, 2, 0, 17, 127, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( all ) })	#children:1[16,141]1	0.0	info:[2, 0, 1, 16, 141, 9, 0, 0]
			]
		]
	]
]

output:	answer(state(next_to_2(stateid('hawaii'))))
predic:	answer(state(next_to_2(state(all))))
811:	true
=INPUT=
*LeaveRoot* which state borders the most states
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ most ( *n:State ) })	#children:4[18,179]4	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:3[17,126]3	0.0	null
			[
				child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:2[16,127]2	0.0	null
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	info:[6, 6, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ most ( *n:State ) })	#children:4[18,179]4	0.0	info:[5, 4, 0, 18, 179, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:3[17,126]3	0.0	info:[4, 3, 1, 17, 126, 10, 0, 0]
			[
				child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:2[16,127]2	0.0	info:[3, 1, 0, 16, 127, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	info:[2, 0, 1, 15, 141, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(most(state(next_to_2(state(all)))))
predic:	answer(most(state(next_to_2(state(all)))))
812:	false
=INPUT=
*LeaveRoot* which state capital has the smallest population
=OUTPUT=
ROOT	#children:4[20,1000]4	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:3[19,120]3	0.0	null
	[
		child-0:*n:City -> ({ smallest_one ( population_1 ( *n:City ) ) })	#children:2[18,190]2	0.0	null
		[
			child-0:*n:City -> ({ capital ( all ) })	#children:1[17,189]1	0.0	null
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	info:[7, 7, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:5[18,126]5	0.0	info:[7, 6, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:4[17,127]4	0.0	info:[6, 5, 0, 17, 127, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:3[16,126]3	0.0	info:[4, 3, 0, 16, 126, 10, 0, 0]
				[
					child-0:*n:State -> ({ loc_1 ( *n:River ) })	#children:2[15,182]2	0.0	info:[3, 2, 1, 15, 182, 10, 0, 0]
					[
						child-0:*n:River -> ({ river ( all ) })	#children:1[14,171]1	0.0	info:[3, 1, 0, 14, 171, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(smallest_one(population_1(capital(all))))
predic:	answer(state(next_to_2(state(loc_1(river(all))))))
814:	false
=INPUT=
*LeaveRoot* which state has the biggest population
=OUTPUT=
ROOT	#children:4[20,1000]4	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:3[19,135]3	0.0	null
	[
		child-0:*n:State -> ({ largest_one ( population_1 ( *n:State ) ) })	#children:2[18,169]2	0.0	null
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	null
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:3[19,135]3	0.0	info:[6, 6, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ loc_1 ( *n:River ) })	#children:2[18,182]2	0.0	info:[5, 4, 0, 18, 182, 10, 0, 0]
		[
			child-0:*n:River -> ({ river ( all ) })	#children:1[17,171]1	0.0	info:[3, 2, 0, 17, 171, 9, 0, 0]
		]
	]
]

output:	answer(largest_one(population_1(state(all))))
predic:	answer(loc_1(river(all)))
816:	false
=INPUT=
*LeaveRoot* which state has the greatest population
=OUTPUT=
ROOT	#children:4[20,1000]4	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:3[19,135]3	0.0	null
	[
		child-0:*n:State -> ({ largest_one ( population_1 ( *n:State ) ) })	#children:2[18,169]2	0.0	null
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	null
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	info:[6, 6, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	info:[6, 5, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[17,172]3	0.0	info:[5, 3, 1, 17, 172, 10, 0, 0]
			[
				child-0:*n:City -> ({ largest ( *n:City ) })	#children:2[16,150]2	0.0	info:[5, 2, 1, 16, 150, 10, 0, 0]
				[
					child-0:*n:City -> ({ capital ( all ) })	#children:1[15,189]1	0.0	info:[5, 1, 0, 15, 189, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(largest_one(population_1(state(all))))
predic:	answer(state(loc_1(largest(capital(all)))))
817:	false
=INPUT=
*LeaveRoot* which state has the highest elevation
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	null
		[
			child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:3[17,167]3	0.0	null
			[
				child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:2[16,132]2	0.0	null
				[
					child-0:*n:Place -> ({ place ( all ) })	#children:1[15,168]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:4[19,135]4	0.0	info:[6, 6, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[18,172]3	0.0	info:[5, 4, 0, 18, 172, 10, 0, 0]
		[
			child-0:*n:City -> ({ largest ( *n:City ) })	#children:2[17,150]2	0.0	info:[3, 2, 0, 17, 150, 10, 0, 0]
			[
				child-0:*n:City -> ({ capital ( all ) })	#children:1[16,189]1	0.0	info:[2, 1, 1, 16, 189, 9, 0, 0]
			]
		]
	]
]

output:	answer(state(loc_1(highest(place(all)))))
predic:	answer(loc_1(largest(capital(all))))
819:	false
=INPUT=
*LeaveRoot* which state has the highest point
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	null
		[
			child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:3[17,167]3	0.0	null
			[
				child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:2[16,132]2	0.0	null
				[
					child-0:*n:Place -> ({ place ( all ) })	#children:1[15,168]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:4[19,135]4	0.0	info:[6, 6, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[18,172]3	0.0	info:[5, 4, 0, 18, 172, 10, 0, 0]
		[
			child-0:*n:City -> ({ largest ( *n:City ) })	#children:2[17,150]2	0.0	info:[3, 2, 0, 17, 150, 10, 0, 0]
			[
				child-0:*n:City -> ({ capital ( all ) })	#children:1[16,189]1	0.0	info:[2, 1, 1, 16, 189, 9, 0, 0]
			]
		]
	]
]

output:	answer(state(loc_1(highest(place(all)))))
predic:	answer(loc_1(largest(capital(all))))
820:	false
=INPUT=
*LeaveRoot* which state has the highest population density
=OUTPUT=
ROOT	#children:4[20,1000]4	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:3[19,135]3	0.0	null
	[
		child-0:*n:State -> ({ largest_one ( density_1 ( *n:State ) ) })	#children:2[18,166]2	0.0	null
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	null
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:4[19,135]4	0.0	info:[7, 7, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[18,172]3	0.0	info:[5, 4, 0, 18, 172, 10, 0, 0]
		[
			child-0:*n:City -> ({ largest ( *n:City ) })	#children:2[17,150]2	0.0	info:[3, 2, 0, 17, 150, 10, 0, 0]
			[
				child-0:*n:City -> ({ capital ( all ) })	#children:1[16,189]1	0.0	info:[2, 1, 1, 16, 189, 9, 0, 0]
			]
		]
	]
]

output:	answer(largest_one(density_1(state(all))))
predic:	answer(loc_1(largest(capital(all))))
825:	false
=INPUT=
*LeaveRoot* which state has the lowest elevation
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	null
		[
			child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:3[17,167]3	0.0	null
			[
				child-0:*n:Place -> ({ lowest ( *n:Place ) })	#children:2[16,186]2	0.0	null
				[
					child-0:*n:Place -> ({ place ( all ) })	#children:1[15,168]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:4[19,135]4	0.0	info:[6, 6, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:3[18,167]3	0.0	info:[6, 5, 0, 18, 167, 10, 0, 0]
		[
			child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:2[17,132]2	0.0	info:[5, 3, 1, 17, 132, 10, 0, 0]
			[
				child-0:*n:Place -> ({ place ( all ) })	#children:1[16,168]1	1.04E-322	info:[5, 2, 1, 16, 168, 9, 0, 0]
			]
		]
	]
]

output:	answer(state(loc_1(lowest(place(all)))))
predic:	answer(loc_1(highest(place(all))))
826:	false
=INPUT=
*LeaveRoot* which state has the lowest point that borders idaho
=OUTPUT=
ROOT	#children:10[20,1000]10	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:9[19,135]9	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:8[18,126]8	0.0	null
		[
			child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:7[17,167]7	0.0	null
			[
				child-0:*n:Place -> ({ lowest ( *n:Place ) })	#children:6[16,186]6	0.0	null
				[
					child-0:*n:Place -> ({ place ( *n:Place ) })	#children:5[15,133]5	0.0	null
					[
						child-0:*n:Place -> ({ loc_2 ( *n:State ) })	#children:4[14,134]4	0.0	null
						[
							child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[13,127]3	0.0	null
							[
								child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[12,123]2	0.0	null
								[
									child-0:*n:StateName -> ({ ' idaho ' })	#children:1[11,41]1	0.0	null
								]
							]
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[9, 9, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:7[19,135]7	0.0	info:[9, 9, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:6[18,126]6	0.0	info:[9, 8, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:5[17,127]5	0.0	info:[8, 7, 0, 17, 127, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:4[16,126]4	0.0	info:[6, 5, 0, 16, 126, 10, 0, 0]
				[
					child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[15,172]3	0.0	info:[5, 3, 1, 15, 172, 10, 0, 0]
					[
						child-0:*n:City -> ({ largest ( *n:City ) })	#children:2[14,150]2	0.0	info:[5, 2, 1, 14, 150, 10, 0, 0]
						[
							child-0:*n:City -> ({ capital ( all ) })	#children:1[13,189]1	0.0	info:[5, 1, 0, 13, 189, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(state(loc_1(lowest(place(loc_2(next_to_2(stateid('idaho'))))))))
predic:	answer(state(next_to_2(state(loc_1(largest(capital(all)))))))
827:	false
=INPUT=
*LeaveRoot* which state has the lowest population density
=OUTPUT=
ROOT	#children:4[20,1000]4	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:3[19,135]3	0.0	null
	[
		child-0:*n:State -> ({ smallest_one ( density_1 ( *n:State ) ) })	#children:2[18,194]2	0.0	null
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	null
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:4[19,135]4	0.0	info:[7, 7, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:3[18,167]3	0.0	info:[5, 4, 0, 18, 167, 10, 0, 0]
		[
			child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:2[17,132]2	0.0	info:[4, 2, 1, 17, 132, 10, 0, 0]
			[
				child-0:*n:Place -> ({ place ( all ) })	#children:1[16,168]1	1.04E-322	info:[4, 1, 1, 16, 168, 9, 0, 0]
			]
		]
	]
]

output:	answer(smallest_one(density_1(state(all))))
predic:	answer(loc_1(highest(place(all))))
828:	false
=INPUT=
*LeaveRoot* which state has the most major cities
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	null
	[
		child-0:*n:State -> ({ most ( *n:State ) })	#children:5[18,179]5	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	null
			[
				child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[16,172]3	0.0	null
				[
					child-0:*n:City -> ({ major ( *n:City ) })	#children:2[15,156]2	0.0	null
					[
						child-0:*n:City -> ({ city ( all ) })	#children:1[14,160]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:4[19,135]4	0.0	info:[7, 7, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ loc_1 ( *n:River ) })	#children:3[18,182]3	0.0	info:[7, 6, 0, 18, 182, 10, 0, 0]
		[
			child-0:*n:River -> ({ major ( *n:River ) })	#children:2[17,162]2	0.0	info:[6, 5, 0, 17, 162, 10, 0, 0]
			[
				child-0:*n:River -> ({ river ( all ) })	#children:1[16,171]1	0.0	info:[5, 2, 1, 16, 171, 9, 0, 0]
			]
		]
	]
]

output:	answer(most(state(loc_1(major(city(all))))))
predic:	answer(loc_1(major(river(all))))
829:	false
=INPUT=
*LeaveRoot* which state has the most major rivers
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	null
	[
		child-0:*n:State -> ({ most ( *n:State ) })	#children:5[18,179]5	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	null
			[
				child-0:*n:State -> ({ loc_1 ( *n:River ) })	#children:3[16,182]3	0.0	null
				[
					child-0:*n:River -> ({ major ( *n:River ) })	#children:2[15,162]2	0.0	null
					[
						child-0:*n:River -> ({ river ( all ) })	#children:1[14,171]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:7[19,128]7	0.0	info:[7, 7, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:6[18,129]6	0.0	info:[7, 6, 0, 18, 129, 10, 0, 0]
		[
			child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:5[17,130]5	0.0	info:[6, 5, 1, 17, 130, 10, 0, 0]
			[
				child-0:*n:State -> ({ most ( *n:State ) })	#children:4[16,179]4	0.0	info:[5, 3, 0, 16, 179, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:3[15,126]3	0.0	info:[4, 2, 1, 15, 126, 10, 0, 0]
					[
						child-0:*n:State -> ({ loc_1 ( *n:River ) })	#children:2[14,182]2	0.0	info:[4, 1, 1, 14, 182, 10, 0, 0]
						[
							child-0:*n:River -> ({ river ( all ) })	#children:1[13,171]1	0.0	info:[4, 1, 1, 13, 171, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(most(state(loc_1(major(river(all))))))
predic:	answer(river(loc_2(most(state(loc_1(river(all)))))))
830:	false
=INPUT=
*LeaveRoot* which state has the most major rivers running through it
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	null
	[
		child-0:*n:State -> ({ most ( *n:State ) })	#children:5[18,179]5	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:4[17,126]4	0.0	null
			[
				child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:3[16,181]3	0.0	null
				[
					child-0:*n:River -> ({ major ( *n:River ) })	#children:2[15,162]2	0.0	null
					[
						child-0:*n:River -> ({ river ( all ) })	#children:1[14,171]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:9[20,1000]9	0.0	info:[10, 10, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:8[19,135]8	0.0	info:[10, 10, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ most ( *n:State ) })	#children:7[18,179]7	0.0	info:[10, 9, 0, 18, 179, 10, 0, 0]
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:6[17,126]6	0.0	info:[9, 6, 1, 17, 126, 10, 0, 0]
			[
				child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:5[16,127]5	0.0	info:[9, 5, 0, 16, 127, 10, 0, 0]
				[
					child-0:*n:State -> ({ most ( *n:State ) })	#children:4[15,179]4	0.0	info:[8, 3, 1, 15, 179, 10, 0, 0]
					[
						child-0:*n:State -> ({ state ( *n:State ) })	#children:3[14,126]3	0.0	info:[8, 2, 1, 14, 126, 10, 0, 0]
						[
							child-0:*n:State -> ({ loc_1 ( *n:River ) })	#children:2[13,182]2	0.0	info:[8, 1, 1, 13, 182, 10, 0, 0]
							[
								child-0:*n:River -> ({ river ( all ) })	#children:1[12,171]1	0.0	info:[8, 0, 1, 12, 171, 9, 0, 0]
							]
						]
					]
				]
			]
		]
	]
]

output:	answer(most(state(traverse_1(major(river(all))))))
predic:	answer(most(state(next_to_2(most(state(loc_1(river(all))))))))
832:	false
=INPUT=
*LeaveRoot* which state has the most population
=OUTPUT=
ROOT	#children:4[20,1000]4	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:3[19,135]3	0.0	null
	[
		child-0:*n:State -> ({ largest_one ( population_1 ( *n:State ) ) })	#children:2[18,169]2	0.0	null
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	null
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:4[19,135]4	0.0	info:[6, 6, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:3[18,167]3	0.0	info:[6, 5, 0, 18, 167, 10, 0, 0]
		[
			child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:2[17,132]2	0.0	info:[5, 4, 0, 17, 132, 10, 0, 0]
			[
				child-0:*n:Place -> ({ place ( all ) })	#children:1[16,168]1	0.0	info:[3, 2, 0, 16, 168, 9, 0, 0]
			]
		]
	]
]

output:	answer(largest_one(population_1(state(all))))
predic:	answer(loc_1(highest(place(all))))
833:	false
=INPUT=
*LeaveRoot* which state has the most rivers
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ most ( *n:State ) })	#children:4[18,179]4	0.0	null
		[
			child-0:*n:State -> ({ state ( *n:State ) })	#children:3[17,126]3	0.0	null
			[
				child-0:*n:State -> ({ loc_1 ( *n:River ) })	#children:2[16,182]2	0.0	null
				[
					child-0:*n:River -> ({ river ( all ) })	#children:1[15,171]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:7[19,128]7	0.0	info:[6, 6, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:6[18,129]6	0.0	info:[6, 5, 0, 18, 129, 10, 0, 0]
		[
			child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:5[17,130]5	0.0	info:[5, 4, 1, 17, 130, 10, 0, 0]
			[
				child-0:*n:State -> ({ most ( *n:State ) })	#children:4[16,179]4	0.0	info:[5, 3, 0, 16, 179, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( *n:State ) })	#children:3[15,126]3	0.0	info:[4, 2, 1, 15, 126, 10, 0, 0]
					[
						child-0:*n:State -> ({ loc_1 ( *n:River ) })	#children:2[14,182]2	0.0	info:[4, 1, 1, 14, 182, 10, 0, 0]
						[
							child-0:*n:River -> ({ river ( all ) })	#children:1[13,171]1	0.0	info:[4, 1, 1, 13, 171, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(most(state(loc_1(river(all)))))
predic:	answer(river(loc_2(most(state(loc_1(river(all)))))))
837:	false
=INPUT=
*LeaveRoot* which state has the smallest average urban population
=OUTPUT=
ROOT	#children:4[20,1000]4	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:3[19,135]3	0.0	null
	[
		child-0:*n:State -> ({ smallest_one ( density_1 ( *n:State ) ) })	#children:2[18,194]2	0.0	null
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	null
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:4[19,135]4	0.0	info:[8, 8, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[18,172]3	0.0	info:[7, 6, 0, 18, 172, 10, 0, 0]
		[
			child-0:*n:City -> ({ largest ( *n:City ) })	#children:2[17,150]2	0.0	info:[6, 3, 1, 17, 150, 10, 0, 0]
			[
				child-0:*n:City -> ({ capital ( all ) })	#children:1[16,189]1	0.0	info:[6, 2, 0, 16, 189, 9, 0, 0]
			]
		]
	]
]

output:	answer(smallest_one(density_1(state(all))))
predic:	answer(loc_1(largest(capital(all))))
838:	false
=INPUT=
*LeaveRoot* which state has the smallest population density
=OUTPUT=
ROOT	#children:4[20,1000]4	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:3[19,135]3	0.0	null
	[
		child-0:*n:State -> ({ smallest_one ( density_1 ( *n:State ) ) })	#children:2[18,194]2	0.0	null
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	null
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:3[19,135]3	0.0	info:[7, 7, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ loc_1 ( *n:River ) })	#children:2[18,182]2	0.0	info:[5, 4, 0, 18, 182, 10, 0, 0]
		[
			child-0:*n:River -> ({ river ( all ) })	#children:1[17,171]1	0.0	info:[3, 2, 0, 17, 171, 9, 0, 0]
		]
	]
]

output:	answer(smallest_one(density_1(state(all))))
predic:	answer(loc_1(river(all)))
841:	false
=INPUT=
*LeaveRoot* which state is mount mckinley in
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	null
		[
			child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:3[17,167]3	0.0	null
			[
				child-0:*n:Place -> ({ placeid ( *n:PlaceName ) })	#children:2[16,149]2	0.0	null
				[
					child-0:*n:PlaceName -> ({ ' mount mckinley ' })	#children:1[15,98]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:4[19,135]4	0.0	info:[6, 6, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ loc_1 ( *n:Place ) })	#children:3[18,167]3	0.0	info:[4, 3, 0, 18, 167, 10, 0, 0]
		[
			child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:2[17,132]2	0.0	info:[2, 1, 0, 17, 132, 10, 0, 0]
			[
				child-0:*n:Place -> ({ place ( all ) })	#children:1[16,168]1	0.0	info:[1, 0, 1, 16, 168, 9, 0, 0]
			]
		]
	]
]

output:	answer(state(loc_1(placeid('mountmckinley'))))
predic:	answer(loc_1(highest(place(all))))
844:	false
=INPUT=
*LeaveRoot* which state is the smallest
=OUTPUT=
ROOT	#children:4[20,1000]4	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:3[19,135]3	0.0	null
	[
		child-0:*n:State -> ({ smallest ( *n:State ) })	#children:2[18,165]2	0.0	null
		[
			child-0:*n:State -> ({ state ( all ) })	#children:1[17,141]1	0.0	null
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[5, 5, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:3[19,120]3	0.0	info:[5, 5, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ smallest_one ( population_1 ( *n:City ) ) })	#children:2[18,190]2	0.0	info:[5, 4, 0, 18, 190, 10, 0, 0]
		[
			child-0:*n:City -> ({ capital ( all ) })	#children:1[17,189]1	0.0	info:[4, 3, 1, 17, 189, 9, 0, 0]
		]
	]
]

output:	answer(smallest(state(all)))
predic:	answer(smallest_one(population_1(capital(all))))
851:	false
=INPUT=
*LeaveRoot* which states border illinois
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	null
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' illinois ' })	#children:1[15,90]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[4, 4, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:3[19,120]3	0.0	info:[4, 4, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ smallest_one ( population_1 ( *n:City ) ) })	#children:2[18,190]2	0.0	info:[4, 0, 1, 18, 190, 10, 0, 0]
		[
			child-0:*n:City -> ({ capital ( all ) })	#children:1[17,189]1	0.0	info:[4, 0, 1, 17, 189, 9, 0, 0]
		]
	]
]

output:	answer(state(next_to_2(stateid('illinois'))))
predic:	answer(smallest_one(population_1(capital(all))))
853:	false
=INPUT=
*LeaveRoot* which states border kentucky
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	null
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	null
			[
				child-0:*n:State -> ({ stateid ( *n:StateName ) })	#children:2[16,123]2	0.0	null
				[
					child-0:*n:StateName -> ({ ' kentucky ' })	#children:1[15,97]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:4[20,1000]4	0.0	info:[4, 4, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:3[19,120]3	0.0	info:[4, 4, 1, 19, 120, 10, 0, 0]
	[
		child-0:*n:City -> ({ smallest_one ( population_1 ( *n:City ) ) })	#children:2[18,190]2	0.0	info:[4, 0, 1, 18, 190, 10, 0, 0]
		[
			child-0:*n:City -> ({ capital ( all ) })	#children:1[17,189]1	0.0	info:[4, 0, 1, 17, 189, 9, 0, 0]
		]
	]
]

output:	answer(state(next_to_2(stateid('kentucky'))))
predic:	answer(smallest_one(population_1(capital(all))))
861:	false
=INPUT=
*LeaveRoot* which states border the missouri river
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:5[18,126]5	0.0	null
		[
			child-0:*n:State -> ({ next_to_2 ( *n:River ) })	#children:4[17,177]4	0.0	null
			[
				child-0:*n:River -> ({ river ( *n:River ) })	#children:3[16,129]3	0.0	null
				[
					child-0:*n:River -> ({ riverid ( *n:RiverName ) })	#children:2[15,152]2	0.0	null
					[
						child-0:*n:RiverName -> ({ ' missouri ' })	#children:1[14,115]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:6[19,128]6	0.0	info:[6, 6, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:5[18,129]5	0.0	info:[6, 5, 0, 18, 129, 10, 0, 0]
		[
			child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:4[17,130]4	0.0	info:[5, 3, 1, 17, 130, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:3[16,126]3	0.0	info:[5, 2, 0, 16, 126, 10, 0, 0]
				[
					child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:2[15,127]2	0.0	info:[4, 1, 1, 15, 127, 10, 0, 0]
					[
						child-0:*n:State -> ({ state ( all ) })	#children:1[14,141]1	0.0	info:[4, 0, 1, 14, 141, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(state(next_to_2(river(riverid('missouri')))))
predic:	answer(river(loc_2(state(next_to_2(state(all))))))
862:	false
=INPUT=
*LeaveRoot* which states border the state with the smallest area
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	null
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:3[17,127]3	0.0	null
			[
				child-0:*n:State -> ({ smallest_one ( area_1 ( *n:State ) ) })	#children:2[16,203]2	0.0	null
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[9, 9, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	info:[9, 9, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:5[18,126]5	0.0	info:[9, 8, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:4[17,127]4	0.0	info:[8, 5, 1, 17, 127, 10, 0, 0]
			[
				child-0:*n:State -> ({ state ( *n:State ) })	#children:3[16,126]3	0.0	info:[8, 3, 1, 16, 126, 10, 0, 0]
				[
					child-0:*n:State -> ({ next_to_2 ( *n:State ) })	#children:2[15,127]2	0.0	info:[8, 2, 0, 15, 127, 10, 0, 0]
					[
						child-0:*n:State -> ({ state ( all ) })	#children:1[14,141]1	0.0	info:[7, 1, 1, 14, 141, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(state(next_to_2(smallest_one(area_1(state(all))))))
predic:	answer(state(next_to_2(state(next_to_2(state(all))))))
863:	false
=INPUT=
*LeaveRoot* which state 's capital city is the largest
=OUTPUT=
ROOT	#children:8[20,1000]8	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:7[19,135]7	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:6[18,126]6	0.0	null
		[
			child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:5[17,172]5	0.0	null
			[
				child-0:*n:City -> ({ largest ( *n:City ) })	#children:4[16,150]4	0.0	null
				[
					child-0:*n:City -> ({ city ( *n:City ) })	#children:3[15,121]3	0.0	null
					[
						child-0:*n:City -> ({ capital_1 ( *n:State ) })	#children:2[14,201]2	0.0	null
						[
							child-0:*n:State -> ({ state ( all ) })	#children:1[13,141]1	0.0	null
						]
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:8[20,1000]8	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:Num ) })	#children:7[19,144]7	0.0	info:[8, 8, 1, 19, 144, 10, 0, 0]
	[
		child-0:*n:Num -> ({ count ( *n:City ) })	#children:6[18,155]6	0.0	info:[8, 7, 0, 18, 155, 10, 0, 0]
		[
			child-0:*n:City -> ({ major ( *n:City ) })	#children:5[17,156]5	0.0	info:[7, 6, 1, 17, 156, 10, 0, 0]
			[
				child-0:*n:City -> ({ city ( *n:City ) })	#children:4[16,121]4	0.0	info:[5, 3, 0, 16, 121, 10, 0, 0]
				[
					child-0:*n:City -> ({ loc_2 ( *n:State ) })	#children:3[15,122]3	0.0	info:[4, 2, 0, 15, 122, 10, 0, 0]
					[
						child-0:*n:State -> ({ largest_one ( density_1 ( *n:State ) ) })	#children:2[14,166]2	0.0	info:[3, 1, 1, 14, 166, 10, 0, 0]
						[
							child-0:*n:State -> ({ state ( all ) })	#children:1[13,141]1	0.0	info:[3, 0, 1, 13, 141, 9, 0, 0]
						]
					]
				]
			]
		]
	]
]

output:	answer(state(loc_1(largest(city(capital_1(state(all)))))))
predic:	answer(count(major(city(loc_2(largest_one(density_1(state(all))))))))
866:	false
=INPUT=
*LeaveRoot* which states does the chattahoochee river run through
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:5[18,126]5	0.0	null
		[
			child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:4[17,181]4	0.0	null
			[
				child-0:*n:River -> ({ river ( *n:River ) })	#children:3[16,129]3	0.0	null
				[
					child-0:*n:River -> ({ riverid ( *n:RiverName ) })	#children:2[15,152]2	0.0	null
					[
						child-0:*n:RiverName -> ({ ' chattahoochee ' })	#children:1[14,82]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	info:[8, 8, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:5[18,126]5	0.0	info:[7, 6, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:4[17,181]4	0.0	info:[6, 5, 1, 17, 181, 10, 0, 0]
			[
				child-0:*n:River -> ({ river ( *n:River ) })	#children:3[16,129]3	0.0	info:[6, 4, 0, 16, 129, 10, 0, 0]
				[
					child-0:*n:River -> ({ traverse_2 ( *n:State ) })	#children:2[15,163]2	0.0	info:[5, 1, 1, 15, 163, 10, 0, 0]
					[
						child-0:*n:State -> ({ state ( all ) })	#children:1[14,141]1	0.0	info:[5, 0, 1, 14, 141, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(state(traverse_1(river(riverid('chattahoochee')))))
predic:	answer(state(traverse_1(river(traverse_2(state(all))))))
869:	true
=INPUT=
*LeaveRoot* which states does the longest river run through
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	null
		[
			child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:3[17,181]3	0.0	null
			[
				child-0:*n:River -> ({ longest ( *n:River ) })	#children:2[16,142]2	0.0	null
				[
					child-0:*n:River -> ({ river ( all ) })	#children:1[15,171]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	info:[8, 8, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	info:[7, 6, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:3[17,181]3	0.0	info:[6, 5, 1, 17, 181, 10, 0, 0]
			[
				child-0:*n:River -> ({ longest ( *n:River ) })	#children:2[16,142]2	0.0	info:[6, 1, 1, 16, 142, 10, 0, 0]
				[
					child-0:*n:River -> ({ river ( all ) })	#children:1[15,171]1	0.0	info:[6, 0, 1, 15, 171, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(state(traverse_1(longest(river(all)))))
predic:	answer(state(traverse_1(longest(river(all)))))
871:	false
=INPUT=
*LeaveRoot* which states does the mississippi run through
=OUTPUT=
ROOT	#children:6[20,1000]6	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:5[19,135]5	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:4[18,126]4	0.0	null
		[
			child-0:*n:State -> ({ traverse_1 ( *n:River ) })	#children:3[17,181]3	0.0	null
			[
				child-0:*n:River -> ({ riverid ( *n:RiverName ) })	#children:2[16,152]2	0.0	null
				[
					child-0:*n:RiverName -> ({ ' mississippi ' })	#children:1[15,84]1	0.0	null
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:7[20,1000]7	0.0	info:[7, 7, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	info:[7, 7, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:5[18,126]5	0.0	info:[7, 6, 0, 18, 126, 10, 0, 0]
		[
			child-0:*n:State -> ({ high_point_2 ( *n:Place ) })	#children:4[17,209]4	0.0	info:[6, 5, 0, 17, 209, 10, 0, 0]
			[
				child-0:*n:Place -> ({ higher_2 ( *n:Place ) })	#children:3[16,210]3	0.0	info:[5, 4, 1, 16, 210, 10, 0, 0]
				[
					child-0:*n:Place -> ({ highest ( *n:Place ) })	#children:2[15,132]2	0.0	info:[5, 3, 0, 15, 132, 10, 0, 0]
					[
						child-0:*n:Place -> ({ place ( all ) })	#children:1[14,168]1	0.0	info:[3, 1, 0, 14, 168, 9, 0, 0]
					]
				]
			]
		]
	]
]

output:	answer(state(traverse_1(riverid('mississippi'))))
predic:	answer(state(high_point_2(higher_2(highest(place(all))))))
875:	false
=INPUT=
*LeaveRoot* which states have a river
=OUTPUT=
ROOT	#children:5[20,1000]5	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:4[19,135]4	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:3[18,126]3	0.0	null
		[
			child-0:*n:State -> ({ loc_1 ( *n:River ) })	#children:2[17,182]2	0.0	null
			[
				child-0:*n:River -> ({ river ( all ) })	#children:1[16,171]1	0.0	null
			]
		]
	]
]

=PREDICTION=
ROOT	#children:6[20,1000]6	0.0	info:[5, 5, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:River ) })	#children:5[19,128]5	0.0	info:[5, 5, 1, 19, 128, 10, 0, 0]
	[
		child-0:*n:River -> ({ river ( *n:River ) })	#children:4[18,129]4	0.0	info:[5, 4, 0, 18, 129, 10, 0, 0]
		[
			child-0:*n:River -> ({ loc_2 ( *n:State ) })	#children:3[17,130]3	0.0	info:[4, 1, 1, 17, 130, 10, 0, 0]
			[
				child-0:*n:State -> ({ largest_one ( population_1 ( *n:State ) ) })	#children:2[16,169]2	0.0	info:[4, 1, 1, 16, 169, 10, 0, 0]
				[
					child-0:*n:State -> ({ state ( all ) })	#children:1[15,141]1	0.0	info:[4, 0, 1, 15, 141, 9, 0, 0]
				]
			]
		]
	]
]

output:	answer(state(loc_1(river(all))))
predic:	answer(river(loc_2(largest_one(population_1(state(all))))))
876:	false
=INPUT=
*LeaveRoot* which states have cities named austin
=OUTPUT=
ROOT	#children:7[20,1000]7	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:6[19,135]6	0.0	null
	[
		child-0:*n:State -> ({ state ( *n:State ) })	#children:5[18,126]5	0.0	null
		[
			child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:4[17,172]4	0.0	null
			[
				child-0:*n:City -> ({ city ( *n:City ) })	#children:3[16,121]3	0.0	null
				[
					child-0:*n:City -> ({ cityid ( *n:CityName , _ ) })	#children:2[15,147]2	0.0	null
					[
						child-0:*n:CityName -> ({ ' austin ' })	#children:1[14,30]1	0.0	null
					]
				]
			]
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[6, 6, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:4[19,135]4	0.0	info:[6, 6, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[18,172]3	0.0	info:[5, 4, 0, 18, 172, 10, 0, 0]
		[
			child-0:*n:City -> ({ largest ( *n:City ) })	#children:2[17,150]2	0.0	info:[4, 1, 1, 17, 150, 10, 0, 0]
			[
				child-0:*n:City -> ({ capital ( all ) })	#children:1[16,189]1	0.0	info:[4, 0, 1, 16, 189, 9, 0, 0]
			]
		]
	]
]

output:	answer(state(loc_1(city(cityid('austin',_)))))
predic:	answer(loc_1(largest(capital(all))))
880:	false
=INPUT=
*LeaveRoot* which us city has the highest population density
=OUTPUT=
ROOT	#children:4[20,1000]4	0.0	null
[
	child-0:*n:Query -> ({ answer ( *n:City ) })	#children:3[19,120]3	0.0	null
	[
		child-0:*n:City -> ({ largest_one ( density_1 ( *n:City ) ) })	#children:2[18,0]2	0.0	null
		[
			child-0:*n:City -> ({ city ( all ) })	#children:1[17,160]1	0.0	null
		]
	]
]

=PREDICTION=
ROOT	#children:5[20,1000]5	0.0	info:[8, 8, 1, 20, 214, 0, 0, 0]
[
	child-0:*n:Query -> ({ answer ( *n:State ) })	#children:4[19,135]4	0.0	info:[8, 8, 1, 19, 135, 10, 0, 0]
	[
		child-0:*n:State -> ({ loc_1 ( *n:City ) })	#children:3[18,172]3	0.0	info:[6, 5, 0, 18, 172, 10, 0, 0]
		[
			child-0:*n:City -> ({ largest ( *n:City ) })	#children:2[17,150]2	0.0	info:[4, 3, 0, 17, 150, 10, 0, 0]
			[
				child-0:*n:City -> ({ capital ( all ) })	#children:1[16,189]1	0.0	info:[2, 1, 0, 16, 189, 9, 0, 0]
			]
		]
	]
]

output:	answer(largest_one(density_1(city(all))))
predic:	answer(loc_1(largest(capital(all))))
text accuracy=0.03214285714285714=9.0/280.0
Geoquery execution accuracy = 0.08571428571428572=24/280
